vim: ft=Fn:

generated by  $vimfiles/settings/all-unix.sh

../QR.md:\<f11>      " last modification time
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile /.git/COMMIT_EDITMSG/ nnoremap <F4> :wa<CR>:q<CR>
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile /.git/COMMIT_EDITMSG/ inoremap <F4> <Esc>:wa<CR>:q<CR>
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile /tmp/.nnn* nnoremap <F4> :wa<CR>:q<CR>
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile /tmp/.nnn* inoremap <F4> <Esc>:wa<CR>:q<CR>
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile *msgFilterRules.dat nnoremap <buffer> <F12> :%s#^name="\v(.*$)\n(^.*$)\n(^.*$)\n(^.*$)\n(^.*$)\n(^.*$)#name="\1░\2░\3░\4░\5░\6#g <bar> nohlsearch <CR>
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile *msgFilterRules.dat nnoremap <buffer> <S-F12> :%s#^name="\v(.*)░(.*)░(.*)░(.*)░(.*)░(.*)$#name="\1\r\2\r\3\r\4\r\5\r\6#g<CR>
../vim/plugin/plugin.vim:nnoremap <F5> :wa<CR>:edit<CR>
../vim/plugin/plugin.vim:inoremap <F5> <Esc>:wa<CR>:e<CR>
../vim/plugin/plugin.vim:vnoremap <F5> <Esc>:wa<CR>:e<CR>
../vim/plugin/plugin.vim:inoremap <leader><f5> :call clearmatches()<cr>
../vim/plugin/plugin.vim:nnoremap <leader><f5> :call clearmatches()<cr>
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* nnoremap <buffer> <F4> :call BackupQuit()<CR>
../vim/plugin/plugin.vim:autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* inoremap <buffer> <F4> <Esc>:call BackupQuit()<CR>
../vim/plugin/plugin.vim:  autocmd BufRead,BufNewFile fcr-* nnoremap <buffer> <F4> :call BackupQuit()<CR>
../vim/plugin/plugin.vim:  autocmd BufRead,BufNewFile fcr-* inoremap <buffer> <F4> <Esc>:call BackupQuit()<CR>
../vim/plugin/plugin.vim:  " noremap <F12> :call QuitNoName() <CR>
../vim/plugin/plugin.vim:nnoremap <silent><leader><F11> :echo strftime('%c',getftime(expand('%')))<cr>
../vim/plugin/plugin.vim:inoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>
../vim/plugin/plugin.vim:vnoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>
../vim/plugin/plugin.vim:nnoremap <S-F11> :call OpenInEmacs()<CR>
../vim/plugin/plugin.vim:inoremap <S-F11> <Esc><S-F11>
../vim/plugin/plugin.vim:nnoremap <F2> :wa<CR>
../vim/plugin/plugin.vim:inoremap <F2> <Esc>:wa<CR>
../vim/plugin/plugin.vim:vnoremap <F2> <Esc>:wa<CR>
../vim/plugin/plugin.vim:nnoremap <F4> :wa<CR>:bd<CR>
../vim/plugin/plugin.vim:inoremap <F4> <Esc>:wa<CR>:bd<CR>
../vim/plugin/plugin.vim:vnoremap <F4> <Esc>:wa<CR>:bd<CR>
../vim/plugin/plugin.vim:nnoremap <S-F5> :syntax sync fromstart<CR>
../vim/plugin/plugin.vim:inoremap <S-F5> <Esc><S-F5>
../vim/plugin/plugins.vim:nnoremap <F3> :call StripStoreCurSel()<CR>:Ggrep -i "<C-R>s" <bar>cw
../vim/plugin/plugins.vim:nnoremap <F8> :History:<CR>
../vim/plugin/plugins.vim:inoremap <F8> <Esc>:History:<CR>
../vim/plugin/plugins.vim:vnoremap <F8> <Esc>:History:<CR>
../vim/plugin/plugins.vim:nnoremap <F9> :History/<CR>
../vim/plugin/plugins.vim:inoremap <F9> <Esc>:History/<CR>
../vim/plugin/plugins.vim:vnoremap <F9> <Esc>:History/<CR>
../vim/plugin/plugins.vim:  nnoremap <S-F9> call popup_clear(1):<CR>
../vim/plugin/plugins.vim:nnoremap <F10> :cd %:p:h<CR>:NERDTreeCWD<CR>
../vim/plugin/plugins.vim:inoremap <F10> <Esc>:cd %:p:h<CR>:NERDTreeCWD<CR>
../vim/plugin/plugins.vim:nnoremap <F6> :execute "normal \<Plug>(openbrowser-smart-search)"<bar>silent !nsBt<CR>
../vim/plugin/plugins.vim:vmap <F6> <Plug>(openbrowser-smart-search)
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:You can add breakpoints with |:GoDebugBreakpoint| (<F9>) and run your program
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:with |:GoDebugContinue| (<F5>).
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:program state. You can go to the next line with |:GoDebugNext| (<F10>) or step
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:in with |:GoDebugStep| (<F11>).
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:The program can also be halted with `:GoDebugHalt` (<F8>).
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:    Mapped to <F8> by default.
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:    Mapped to <F9> by default.
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:    Mapped to <F5> by default.
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:    Mapped to <F10> by default.
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:    Mapped to <F11> by default.
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:    Mapped to <F6> by default, which will evaluate the <cword> under the
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:     \ '(go-debug-continue)':   {'key': '<F5>'},
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:     \ '(go-debug-print)':      {'key': '<F6>'},
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:     \ '(go-debug-breakpoint)': {'key': '<F9>'},
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:     \ '(go-debug-next)':       {'key': '<F10>'},
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:     \ '(go-debug-step)':       {'key': '<F11>'},
../vim/packs-cp/opt/vim-go/doc/vim-go.txt:     \ '(go-debug-halt)':       {'key': '<F8>'},
../vim/packs-cp/opt/vim-go/autoload/go/config.vim:     \ '(go-debug-continue)':   {'key': '<F5>'},
../vim/packs-cp/opt/vim-go/autoload/go/config.vim:     \ '(go-debug-print)':      {'key': '<F6>'},
../vim/packs-cp/opt/vim-go/autoload/go/config.vim:     \ '(go-debug-breakpoint)': {'key': '<F9>'},
../vim/packs-cp/opt/vim-go/autoload/go/config.vim:     \ '(go-debug-next)':       {'key': '<F10>'},
../vim/packs-cp/opt/vim-go/autoload/go/config.vim:     \ '(go-debug-step)':       {'key': '<F11>'},
../vim/packs-cp/opt/vim-go/autoload/go/config.vim:     \ '(go-debug-halt)':       {'key': '<F8>'},
../vim/packs-cp/opt/vim-colors-solarized/doc/solarized.txt:    * the default mapping of <F5>
../vim/packs-cp/opt/vim-colors-solarized/doc/solarized.txt:Toggle Background starts with a default mapping to function key <F5>. If you 
../vim/packs-cp/opt/vim-colors-solarized/doc/solarized.txt:remove/change your existing <F5> mapping to another value. To customize the 
../vim/packs-cp/opt/vim-colors-solarized/doc/solarized.txt:"<F5>" value to the key or key combination you wish to use:
../vim/packs-cp/opt/vim-colors-solarized/doc/solarized.txt:	call togglebg#map("<F5>")
../vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:    call togglebg#map("<F5>")
../vim/packs-cp/opt/vim-colors-solarized/README.mkd:<F5> if that mapping is available. If it is not available you will need to 
../vim/packs-cp/opt/vim-colors-solarized/README.mkd:either map the function manually or change your current <F5> mapping to 
../vim/packs-cp/opt/vim-colors-solarized/README.mkd:support normal, insert and visual mode usage, changing the "<F5>" value to the 
../vim/packs-cp/opt/vim-colors-solarized/README.mkd:    call togglebg#map("<F5>")
../vim/packs-cp/opt/undotree/doc/undotree.txt:    nnoremap <F5> :UndotreeToggle<cr>
../vim/packs-cp/opt/undotree/doc/undotree.txt:    `nnoremap <F6> :UndotreePersistUndo<cr>`
../vim/packs-cp/opt/undotree/README.md:nnoremap <F5> :UndotreeToggle<CR>
../vim/packs-cp/opt/undotree/README.md:vim.keymap.set('n', '<leader><F5>', vim.cmd.UndotreeToggle)
../vim/packs-cp/opt/FastFold/doc/FastFold.txt:  favorite keystroke, say <F5>, by adding
../vim/packs-cp/opt/FastFold/doc/FastFold.txt:    nmap <F5> <Plug>(FastFoldUpdate)
../vim/packs-cp/opt/FastFold/README.md:  You can remap `zuz` to your favorite keystroke, say `<F5>`, by adding
../vim/packs-cp/opt/FastFold/README.md:  `nmap <F5> <Plug>(FastFoldUpdate)` to your `.vimrc`.
../vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <F8>                        <Plug>FontsizeBegin
../vim/packs-cp/opt/supertab/plugin/supertab.vim:  "   nmap <F6> :call SetSuperTabCompletionType("<c-p>")<cr>
../vim/packs-cp/opt/nightfox.nvim/readme.md:map <F2> <cmd>call SynStack()<cr>
../vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <F1>          Toggle help information.
../vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:" Press <F1> for Help
../vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:  nnoremap <silent> <F11> :BufExplorer<CR>
../vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:  nnoremap <silent> <s-F11> :ToggleBufExplorer<CR>
../vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:  nnoremap <silent> <m-F11> :BufExplorerHorizontalSplit<CR>
../vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:      * Changed the help key from '?' to <F1> to be more 'standard'.
../vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                   nnoremap <silent> <F11> :BufExplorer<CR>
../vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                   nnoremap <silent> <s-F11> :ToggleBufExplorer<CR>
../vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                   nnoremap <silent> <m-F11> :BufExplorerHorizontalSplit<CR>
../vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <nowait> <buffer> <F1>          :call <SID>ToggleHelp()<CR>
../vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:        call add(header, '" <F1> : toggle this help')
../vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:        call add(header, '" Press <F1> for Help')
../vim/packs-cp/opt/Highlight.vim/README.md:map <F2> :HighlightText Screenshots<CR>
../vim/packs-cp/opt/Highlight.vim/README.md:map <F3> :HighlightYanked 134<CR>
../vim/packs-cp/opt/Highlight.vim/README.md::map <F3> @:
../vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  call s:Map('n', '<F1>', ':help :Git_blame<CR>', '<silent>', ft)
../vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', '<F1>',  ":<C-U>help fugitive-map<CR>", '<silent>')
../vim/packs-cp/opt/vim-airline/doc/airline.txt:|~           type :help<Enter> or <F1>  for on-line help                    |
../vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <F5>          <Plug>XTablineToggleTabs
../vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader><F5>  <Plug>XTablineToggleFiltering
../vim/packs-cp/opt/vim-airline/doc/airline.txt:be updated automatically. Either re-enter the tab or press <F5> two times.
../vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<F5>','<Plug>XTablineToggleTabs')
../vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader><F5>','<Plug>XTablineToggleFiltering')
../vim/packs-cp/opt/vim-airline/README.md:|~           type :help<Enter> or <F1>  for on-line help                      |
../vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <F5> <Plug>(fern-action-reload)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	" toggle insert/replace with <F10>
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	" toggle insert/replace with <F10>
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	" toggle insert/replace with <F10>
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	" toggle insert/replace with <F10>
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/README.md:" toggle insert/replace with <F10>
../vim/packs-cp/opt/vim-textmanip/README.md:nmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/README.md:xmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/README.md:" toggle insert/replace with <F10>
../vim/packs-cp/opt/vim-textmanip/README.md:nmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/README.md:xmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/README.md:" toggle insert/replace with <F10>
../vim/packs-cp/opt/vim-textmanip/README.md:nmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-textmanip/README.md:xmap <F10> <Plug>(textmanip-toggle-mode)
../vim/packs-cp/opt/vim-tagbar/doc/tagbar.txt:        nnoremap <silent> <F8> :TagbarToggle<CR>
../vim/packs-cp/opt/vim-tagbar/doc/tagbar.txt:You can then open and close Tagbar by simply pressing the <F8> key.
../vim/packs-cp/opt/vim-tagbar/doc/tagbar.txt:<F1>/?        Display key mapping help.
../vim/packs-cp/opt/vim-tagbar/README.md:My only tweak is to remove `'<F1>', ` from `tagbar/plugin/tagbar.vim` such that `<f1>` is free for my (unrelated) preferred use.
../vim/packs-cp/opt/vifm.vim/doc/app/vifm-app.txt:    keycode when Ctrl-I is pressed, then `:noremap <f1> :histnext<cr>` in vifm,
../vim/packs-cp/opt/vifm.vim/doc/app/vifm-app.txt:<f0> - <f63>
../vim/packs-cp/opt/vifm.vim/doc/app/vifm-app.txt:<a-f1>,...,<a-f12>, <m-f1>,...,<m-f12>
../vim/packs-cp/opt/vifm.vim/doc/app/vifm-app.txt:<s-f1>,...,<s-f12>
../vim/packs-cp/opt/vifm.vim/doc/app/vifm-app.txt: cmap <f1> man<space>
../vim/packs-cp/opt/vifm.vim/doc/app/vifm-app.txt:will put "man " in line when you hit the <f1> key in the command line mode.
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:注意: 当在CtrlP中时你可以使用 <F5> 来快速的清除缓存。
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:  let g:ctrlp_prompt_mappings = { 'ToggleKeyLoop()': ['<F3>'] }
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:    \ 'PrtClearCache()':      ['<F5>'],
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:    \ 'PrtDeleteEnt()':       ['<F7>'],
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:  let g:ctrlp_prompt_mappings = { 'ToggleMRURelative()': ['<F2>'] }
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:   清除当前工作目录的缓存。和在CtrlP内按 <F5> 效果一样。
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:  <F5>
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:  <F7>
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:      + <F7>
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:      <F5> 强制刷新。如果 `.ctrlpignore` 改动过，这样也会使用新的匹配模式。
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:              <F5> 也会从最近最多使用列表中移除不存在的文件。
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:    + 新按键绑定: <F5>。
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:Note: you can quickly purge the cache by pressing <F5> while inside CtrlP.
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:  let g:ctrlp_prompt_mappings = { 'ToggleKeyLoop()': ['<F3>'] }
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:    \ 'PrtClearCache()':      ['<F5>'],
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:    \ 'PrtDeleteEnt()':       ['<F7>'],
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:  let g:ctrlp_prompt_mappings = { 'ToggleMRURelative()': ['<F2>'] }
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:   Flush the cache for the current working directory. The same as pressing <F5>
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:  <F5>
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:  <F7>
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:      + <F7>
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:      times. You can hit <F5> to force it to refresh. This will use the newer
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:                   <F5> also removes non-existent files from MRU list.
../vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:    + New mapping: <F5>.
../vim/packs-cp/opt/ctrlp.vim/readme.md:* Press `<F5>` to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
../vim/packs-cp/opt/ctrlp.vim/autoload/ctrlp.vim:	\ 'PrtClearCache()':      ['<F5>'],
../vim/packs-cp/opt/ctrlp.vim/autoload/ctrlp.vim:	\ 'PrtDeleteEnt()':       ['<F7>'],
../vim/packs-cp/opt/ale/doc/ale.txt:  nmap <F8> <Plug>(ale_fix)
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:  - Add `\left ... \right)` modifiers to surrounding delimiters with `<F8>`
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:  - Insert new command with `<F7>`
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F6>             |<plug>(vimtex-env-surround-line)|              `n`
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F6>             |<plug>(vimtex-env-surround-visual)|            `x`
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F7>             |<plug>(vimtex-cmd-create)|                     `nxi`
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F8>             |<plug>(vimtex-delim-add-modifiers)|            `n`
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:  mapped by default to <f7>. See below for the behaviour in the different
../vim/packs-cp/opt/vimtex/doc/vimtex.txt:      imap <buffer> <f7> <plug>(vimtex-cmd-create)}<left>
../vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', '<F6>', '<plug>(vimtex-env-surround-line)')
../vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'x', '<F6>', '<plug>(vimtex-env-surround-visual)')
../vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'i', '<F7>', '<plug>(vimtex-cmd-create)')
../vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', '<F7>', '<plug>(vimtex-cmd-create)')
../vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'x', '<F7>', '<plug>(vimtex-cmd-create)')
../vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', '<F8>', '<plug>(vimtex-delim-add-modifiers)')
../vim/packs-cp/opt/vimtex/README.md:  - Add `\left ... \right)` modifiers to surrounding delimiters with `<F8>`
../vim/packs-cp/opt/vimtex/README.md:  - Insert new command with `<F7>`
../vim/packs-cp/opt/vimtex/test/test-commands/test-insert-cmd.vim:call vimtex#test#keys("lla\<f7>}", 'foobar', '\foo{bar}')
../vim/packs-cp/opt/vimtex/test/test-commands/test-insert-cmd.vim:call vimtex#test#keys("llla\<f7>bar}", 'foo*', '\foo*{bar}')
../vim/packs-cp/opt/vimtex/test/test-commands/test-insert-cmd.vim:call vimtex#test#keys("llla\<f7>}", 'foo*bar', '\foo*{bar}')
../vim/packs-cp/opt/vimtex/test/test-commands/test-insert-cmd.vim:call vimtex#test#keys("fbve\<f7>emph\<cr>", 'foobar', 'foo\emph{bar}')
../vim/packs-cp/opt/vimtex/test/test-commands/test-insert-cmd.vim:call vimtex#test#keys("\<f7>emph\<cr>", 'foo', '\emph{foo}')
../vim/packs-cp/opt/vim-matchup/doc/matchup.txt:  nmap <silent> <F7> <plug>(matchup-hi-surround)
../vim/packs-cp/opt/vim-matchup/README.md:nmap <silent> <F7> <plug>(matchup-hi-surround)
../vim/packs-cp/opt/vim-colors-tomorrow/doc/tomorrow.txt:    * the default mapping of <F5>
../vim/packs-cp/opt/vim-colors-tomorrow/doc/tomorrow.txt:Toggle Background starts with a default mapping to function key <F5>. If you 
../vim/packs-cp/opt/vim-colors-tomorrow/doc/tomorrow.txt:remove/change your existing <F5> mapping to another value. To customize the 
../vim/packs-cp/opt/vim-colors-tomorrow/doc/tomorrow.txt:"<F5>" value to the key or key combination you wish to use:
../vim/packs-cp/opt/vim-colors-tomorrow/doc/tomorrow.txt:	call togglebg#map("<F5>")
../vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:    call togglebg#map("<F5>")
../vim/packs-cp/opt/vim-colors-tomorrow/README.mkd:<F5> if that mapping is available. If it is not available you will need to
../vim/packs-cp/opt/vim-colors-tomorrow/README.mkd:either map the function manually or change your current <F5> mapping to
../vim/packs-cp/opt/vim-colors-tomorrow/README.mkd:support normal, insert and visual mode usage, changing the "<F5>" value to the
../vim/packs-cp/opt/vim-colors-tomorrow/README.mkd:    call togglebg#map("<F5>")
../vim/ftplugin/php/phpfolding.vim:"       map <F5> <Esc>:EnableFastPHPFolds<Cr>
../vim/ftplugin/php/phpfolding.vim:"       map <F6> <Esc>:EnablePHPFolds<Cr>
../vim/ftplugin/php/phpfolding.vim:"       map <F7> <Esc>:DisablePHPFolds<Cr>
../vim/ftplugin/tex.vim:  nnoremap <buffer><F12> :call CompiledPDF()<CR>
../vim/ftplugin/tex.vim:nnoremap <buffer><leader><F7> :call TabularFullAlign()<CR><Bar>:update<CR>
../vim/ftplugin/tex.vim:inoremap <buffer><leader><F7> <Esc>:call TabularFullAlign()<CR><Bar>:update<CR>
../vim/ftplugin/tex.vim:nnoremap <localleader><f5> :let &cole=(&cole == 2) ? 0 : 2 <bar> echo 'conceallevel ' . &cole <CR>
../vim/ftplugin/tex.vim:  nnoremap <silent><buffer><leader><F7> :call PHMatch()<cr>
../vim/ftplugin/tex.vim:  inoremap <silent><buffer><leader><F7> <Esc>:call PHMatch()<cr>
../vim/ftplugin/tex.vim:  vnoremap <silent><buffer><leader><F7> <Esc>:call PHMatch()<cr>
../vim/ftplugin/tex.vim:  nnoremap <silent><buffer><leader><F7> :call LaTeXsyntaxFolding()<cr>
../vim/ftplugin/tex.vim:  inoremap <silent><buffer><leader><F7> <Esc>:call LaTeXsyntaxFolding()<cr>
../vim/ftplugin/tex.vim:  vnoremap <silent><buffer><leader><F7> <Esc>:call LaTeXsyntaxFolding()<cr>
../vim/ftplugin/fugitive.vim:" <F1> gets remapped by  vim-fugitive  to  :h fugitive
../vim/ftplugin/fugitive.vim:nnoremap <buffer><F1> <C-W><C-W>
../vim/ftplugin/fugitive.vim:inoremap <buffer><F1> <Esc><C-W><C-W>
../vim/ftplugin/fugitive.vim:vnoremap <buffer><F1> <Esc><C-W><C-W>
../vim/ftplugin/tbmo.vim:nnoremap <buffer><f7> :s/\n/, / <bar> nohlsearch <CR>
../vim/ftplugin/tbmo.vim:" <s-f7> - split a comma-separated list into separate lines
../vim/ftplugin/tbmo.vim:nnoremap <buffer><s-f7> :s/, /\r/g <bar> nohlsearch <CR>
../vim/ftplugin/muttaliases.vim:nnoremap <buffer> <F7> gg2jVG:sort u <cr>
../vim/ftplugin/md.vim:nnoremap <buffer> <F12> :call CompiledPDF()<CR>
../vim/ftplugin/md.vim:  nnoremap <buffer><leader><leader><F7> :execute "silent !perl $misc/CP/PerlTools/MessengerMd.pl ".expand('%:p')<CR>
../vim/ftplugin/md.vim:  nnoremap <buffer><leader><leader><F7> :call MessengerMd()<CR>
../vim/ftplugin/md.vim:" check with  :map <leader><leader><F7>
../vim/ftplugin/md.vim:  nnoremap <buffer><leader><F7> :execute "silent !perl $misc/CP/PerlTools/mysmsMD.pl ".expand('%:p')<CR>
../vim/ftplugin/md.vim:  nnoremap <buffer><leader><F7> :call MysmsMD()<CR>
../vim/ftplugin/md.vim:" check with  :map <leader><F7>
../vim/ftplugin/csv.vim:nnoremap <buffer><F7> :call CVCT()<cr>
../vim/enter/vimrc-Arch.vim:  noremap <F11> :silent !dolphin %:p:h &<CR>
../vim/enter/vimrc-Arch.vim:  imap <F11> <Esc><F11>
../vim/enter/vimrc-Arch.vim:  noremap <F11> :cd %:p:h<CR><bar>:silent !pcmanfm &<CR>
../vim/enter/vimrc-Arch.vim:  imap <F11> <Esc><F11>
../vim/enter/gvimrc.vim:nnoremap <S-F1> :if &guioptions=~#'m'<Bar>set guioptions-=m<Bar>else<Bar>set guioptions+=m<Bar>endif<CR>
../vim/enter/vimrc-Win10.vim:nnoremap <F11> :!start explorer /select,%:p<CR>
../vim/enter/vimrc-Win10.vim:inoremap <F11> <Esc><F11>
../vim/enter/vimrc.vim:" <F1> switches windows
../vim/enter/vimrc.vim:nnoremap <F1> <C-W><C-W>
../vim/enter/vimrc.vim:inoremap <F1> <Esc><C-W><C-W>
../vim/enter/vimrc.vim:vnoremap <F1> <Esc><C-W><C-W>
../vim/enter/vimrc.vim:inoremap <F3> <Esc>
../vim/enter/vimrc.vim:inoremap <S-F2> <Esc>
