../ftplugin/gitconfig.vim:nnoremap <leader>u :s#https://github.com/#git@github.com:#g <CR>
../ftplugin/dokuwiki.vim:nnoremap <leader>= I=<Esc>A=<Esc>
../ftplugin/dokuwiki.vim:nnoremap <leader><leader>= I=== <Esc>A ===<Esc>
../ftplugin/dokuwiki.vim:vnoremap <buffer><leader>hh y:call PageTitleToHyperlink()<CR>
../ftplugin/dokuwiki.vim:nnoremap <leader>' viwc''''<Esc>hP
../ftplugin/dokuwiki.vim:vnoremap <leader>' c''''<Esc>hP
../ftplugin/dokuwiki.vim:"   :unmap <leader>i
../ftplugin/dokuwiki.vim:nnoremap <buffer> <leader>i :s/\m\(^>\+\) /\1 <wrap indent> /<CR><Bar>A </wrap><Esc>
../ftplugin/shbuild.vim:vnoremap <buffer><leader>> s/^#/##/<CR>
../ftplugin/shbuild.vim:nnoremap <buffer><leader><leader>> :call FirmComment()<cr>
../ftplugin/shbuild.vim:nnoremap <buffer><leader><leader>< :call FirmUnComment()<cr>
../ftplugin/markdown.vim:vnoremap <buffer><leader>> s/^#/##/<CR>
../ftplugin/markdown.vim:nnoremap <buffer> <leader>` viwc``<Esc>P
../ftplugin/markdown.vim:vnoremap <buffer> <leader>v1 :s#^\v(.+)$#> \1  #g <bar> nohlsearch <CR>
../ftplugin/markdown.vim:vnoremap <buffer> <leader>v2 :s#^\v(.+)  $\n^$#\1\r#g <CR>
../ftplugin/email.vim:nnoremap <leader><leader>= I== <Esc>A ==<Esc>
../ftplugin/email.vim:nnoremap <leader>== I==<Esc>A==<Esc>
../ftplugin/email.vim:nnoremap <leader>=- 0xx<Esc>$xx<Esc>
../ftplugin/tex.vim:vnoremap <leader>b c\textbf{}<Esc>P
../ftplugin/tex.vim:vnoremap <buffer> <leader>v1 :s#^\v(.+)$#\1 \\\\#g <bar> nohlsearch <CR>
../ftplugin/tex.vim:vnoremap <buffer> <leader>v2 :s#^\v(.+) \\\\$\n^$#\1\r#g <CR>
../ftplugin/fugitive.vim:nnoremap <buffer><leader>gp :Git push<cr>
../ftplugin/build.vim:vnoremap <buffer><leader>> :s/^#/##/<CR>
../gvimrc.vim:nnoremap <leader>8 :call EightyTwoColumns()<cr>
../keystrokes.md:	<leader>zz => (mapped in my vimrc to) toggle the value of 'scrolloff'
../keystrokes.md:	<leader>tc          => (mapped to) ColorToggle (by colorizer) and files open fast when off
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>pe <Plug>(PickerEdit)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>ps <Plug>(PickerSplit)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>pt <Plug>(PickerTabedit)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>pv <Plug>(PickerVsplit)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>pb <Plug>(PickerBuffer)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>p] <Plug>(PickerTag)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>pw <Plug>(PickerStag)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>po <Plug>(PickerBufferTag)
../pack/shell/start/vim-picker/README.md:nmap <unique> <leader>ph <Plug>(PickerHelp)
../pack/shell/start/fzf.vim/doc/fzf-vim.txt:    nmap <leader><tab> <plug>(fzf-maps-n)
../pack/shell/start/fzf.vim/doc/fzf-vim.txt:    xmap <leader><tab> <plug>(fzf-maps-x)
../pack/shell/start/fzf.vim/doc/fzf-vim.txt:    omap <leader><tab> <plug>(fzf-maps-o)
../pack/shell/start/fzf.vim/README.md:nmap <leader><tab> <plug>(fzf-maps-n)
../pack/shell/start/fzf.vim/README.md:xmap <leader><tab> <plug>(fzf-maps-x)
../pack/shell/start/fzf.vim/README.md:omap <leader><tab> <plug>(fzf-maps-o)
../pack/other/start/vim-visual-star-search/plugin/visual-star-search.vim:if maparg('<leader>*', 'n') == ''
../pack/other/start/vim-visual-star-search/plugin/visual-star-search.vim:  nnoremap <leader>* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'<CR>
../pack/other/start/vim-visual-star-search/plugin/visual-star-search.vim:if maparg('<leader>*', 'v') == ''
../pack/other/start/vim-visual-star-search/plugin/visual-star-search.vim:  vnoremap <leader>* :<C-u>call VisualStarSearchSet('/')<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **'<CR>
../pack/other/start/vim-visual-star-search/test-patterns:recursive search (<leader>*), and see if Vim finds
../pack/other/start/vim-visual-star-search/README.md:If you hit `<leader>*` (`\*` unless you changed the mapleader), vim
../pack/other/start/vim-visual-star-search/README.md:If you have already mapped `<leader>*` then visual star search won't override it.
../pack/other/start/quick-scope/doc/quick-scope.txt:Create a custom mapping (<leader> + q in the example below):
../pack/other/start/quick-scope/doc/quick-scope.txt:  nmap <leader>q <plug>(QuickScopeToggle)
../pack/other/start/quick-scope/doc/quick-scope.txt:  xmap <leader>q <plug>(QuickScopeToggle)
../pack/other/start/quick-scope/README.md:nmap <leader>q <plug>(QuickScopeToggle)
../pack/other/start/quick-scope/README.md:xmap <leader>q <plug>(QuickScopeToggle)
../pack/layout/opt/colorizer/plugin/colorizer.vim:" By default, <leader>tc is mapped to ColorToggle. If you want to use another
../pack/layout/opt/colorizer/plugin/colorizer.vim:  nmap <unique> <Leader>tc <Plug>Colorizer
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cC <Plug>Colorizer
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cC <Plug>Colorizer
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cT <Plug>ColorContrast
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cT <Plug>ColorContrast
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
../pack/layout/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/layout/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
../pack/layout/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cC <Plug>Colorizer
../pack/layout/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
../pack/layout/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cC <Plug>Colorizer
../pack/layout/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/layout/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cT <Plug>ColorContrast
../pack/layout/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/layout/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cT <Plug>ColorContrast
../pack/layout/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
../pack/layout/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/layout/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
../pack/layout/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/layout/opt/Colorizer/Colorizer.vmb:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
../pack/layout/opt/Colorizer/Colorizer.vmb:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
../pack/layout/opt/Colorizer/Colorizer.vmb:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
../pack/layout/opt/Colorizer/Colorizer.vmb:It uses the prefix <leader>c to set all functionality up. By default, <Leader>
../pack/layout/opt/Colorizer/Colorizer.vmb:is defined as '\' (|<Leader>|). Use the name provided in the second column to
../pack/layout/opt/Colorizer/doc/Colorizer.txt:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
../pack/layout/opt/Colorizer/doc/Colorizer.txt:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
../pack/layout/opt/Colorizer/doc/Colorizer.txt:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
../pack/layout/opt/Colorizer/doc/Colorizer.txt:It uses the prefix <leader>c to set all functionality up. By default, <Leader>
../pack/layout/opt/Colorizer/doc/Colorizer.txt:is defined as '\' (|<Leader>|). Use the name provided in the second column to
../pack/layout/opt/vim-ShowTrailingWhitespace/doc/ShowTrailingWhitespace.txt:    nnoremap <silent> <Leader>t$ :<C-u>call ShowTrailingWhitespace#Toggle(0)<Bar>echo (ShowTrailingWhitespace#IsSet() ? 'Show trailing whitespace' : 'Not showing trailing whitespace')<CR>
../pack/layout/opt/vim-ShowTrailingWhitespace/README.md:    nnoremap <silent> <Leader>t$ :<C-u>call ShowTrailingWhitespace#Toggle(0)<Bar>echo (ShowTrailingWhitespace#IsSet() ? 'Show trailing whitespace' : 'Not showing trailing whitespace')<CR>
../pack/layout/opt/limelight.vim/README.md:nmap <Leader>l <Plug>(Limelight)
../pack/layout/opt/limelight.vim/README.md:xmap <Leader>l <Plug>(Limelight)
../pack/layout/opt/vim-better-whitespace/plugin/better-whitespace.vim:call s:InitVariable('better_whitespace_operator', '<leader>s')
../pack/layout/opt/vim-better-whitespace/doc/better-whitespace.txt:By default, an operator is provided mapped to: <leader>s.
../pack/layout/opt/vim-better-whitespace/README.md:    *  There is an operator (defaulting to `<leader>s`) to clean whitespace.
../pack/layout/opt/vim-better-whitespace/README.md:        For example, in normal mode, `<leader>sip` will remove trailing whitespace from the
../pack/layout/start/vim-easy-align/test/include/setup.vader:  vnoremap <silent> <Leader>r<Enter> :LiveEasyAlign!<Enter>
../pack/layout/start/vim-easy-align/test/include/setup.vader:  " vnoremap <silent> <Leader><Enter>  :LiveEasyAlign<Enter>
../pack/layout/start/vim-easy-align/test/include/setup.vader:  " nmap <leader>A <Plug>(EasyAlignOperator)
../pack/layout/start/vim-easy-align/test/include/setup.vader:  vmap <leader><Enter> <Plug>(LiveEasyAlign)
../pack/layout/start/vim-easy-align/test/include/setup.vader:  nmap <leader>A       <Plug>(EasyAlign)
../pack/layout/start/vim-easy-align/test/include/setup.vader:  vmap <leader>.       <Plug>(EasyAlignRepeat)
../pack/layout/start/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>=  <Plug>FontsizeBegin
../pack/layout/start/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>+  <Plug>FontsizeInc
../pack/layout/start/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>-  <Plug>FontsizeDec
../pack/layout/start/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>0  <Plug>FontsizeDefault
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>=    Begin "font size" mode
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>+    Increment font size (by [count])
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>-    Decrement font size (by [count])
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>0    Revert to default font size
../pack/layout/start/vim-fontsize/doc/fontsize.txt:Note that by default, <Leader> is the backslash character, so for example
../pack/layout/start/vim-fontsize/doc/fontsize.txt:<Leader><Leader>+ is invoked by pressing \\+ from normal mode.
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  5<Leader><Leader>+
../pack/layout/start/vim-fontsize/doc/fontsize.txt:to use <Leader> instead of <Leader><Leader> as a prefix:
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>=  <Plug>FontsizeBegin
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>+  <Plug>FontsizeInc
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>-  <Plug>FontsizeDec
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>0  <Plug>FontsizeDefault
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  - Switch default key bindings to <Leader><Leader>x instead of <Leader>xx.
../pack/layout/start/vim-fontsize/doc/fontsize.txt:  - Changed <Leader>== to enter "font size" mode without changing the
../pack/layout/start/vim-fontsize/README.rst:For example, using the default key bindings, pressing <Leader><Leader>+ will
../pack/ft/start/vim-base64/plugin/base64.vim:vnoremap <silent> <leader>atob :<c-u>call base64#v_atob()<cr>
../pack/ft/start/vim-base64/plugin/base64.vim:vnoremap <silent> <leader>btoa :<c-u>call base64#v_btoa()<cr>
../pack/ft/start/vim-base64/plugin/base64.vim:nnoremap <leader>btoa/ :%s/\v()/\=base64#encode(submatch(1))/<home><right><right><right><right><right><right>
../pack/ft/start/vim-base64/plugin/base64.vim:nnoremap <leader>atob/ :%s/\v()/\=base64#decode(submatch(1))/<home><right><right><right><right><right><right>
../pack/ft/start/vim-base64/doc/tags:base64-<leader>-atob	base64.txt	/*base64-<leader>-atob*
../pack/ft/start/vim-base64/doc/tags:base64-<leader>-atob/	base64.txt	/*base64-<leader>-atob\/*
../pack/ft/start/vim-base64/doc/tags:base64-<leader>-btoa/	base64.txt	/*base64-<leader>-btoa\/*
../pack/ft/start/vim-base64/doc/tags:debase64-<leader>-btoa	base64.txt	/*debase64-<leader>-btoa*
../pack/ft/start/vim-base64/doc/base64.txt:                                                        *debase64-<leader>-btoa*
../pack/ft/start/vim-base64/doc/base64.txt:<leader>btoa            Decodes the visually selected base64 string
../pack/ft/start/vim-base64/doc/base64.txt:                                                        *base64-<leader>-atob*
../pack/ft/start/vim-base64/doc/base64.txt:<leader>atob            Base64 encodes the visually selected string
../pack/ft/start/vim-base64/doc/base64.txt:                                                       *base64-<leader>-atob/*
../pack/ft/start/vim-base64/doc/base64.txt:<leader>btoa/           Starts a command line for decoding a regex submatch
../pack/ft/start/vim-base64/doc/base64.txt:                                                       *base64-<leader>-btoa/*
../pack/ft/start/vim-base64/doc/base64.txt:<leader>atob/           Starts a command line for encoding a regex submatch
../pack/ft/start/vim-base64/README.md:* `<leader>atob` to convert from base64 to a string
../pack/ft/start/vim-base64/README.md:* `<leader>btoa` to convert from a string to base64
../pack/ft/start/vim-base64/README.md:You can also, in normal mode, replace all instances of a regular expression by their base64 representation, using `<leader>btoa/` or `<leader>atob/`. This will insert a command mode string, with your cursor directly where you can type the regular expression.
../plugin/plugin.vim:nnoremap <leader>f :let@f=@%<CR>
../plugin/plugin.vim:nnoremap <leader>u :Underline
../plugin/plugin.vim:  noremap <leader>yp :lan fr_FR.UTF-8<CR>:pu=strftime('%a %d %b %Y')<CR>:lan en_GB.UTF-8<CR>
../plugin/plugin.vim:  noremap <leader>yp :lan tim French<CR>:pu=strftime('%a %d %b %Y')<CR>:lan tim English_United Kingdom<CR>
../plugin/plugin.vim:nnoremap <leader>vg :call VimgrepSelection()<CR>
../plugin/plugin.vim:" and <leader>pt toggles it:
../plugin/plugin.vim:nnoremap <leader>pt :call ParenthsToggle()<cr>
../plugin/plugin.vim:nnoremap <leader>n :nohlsearch<CR>
../plugin/plugin.vim:vnoremap <leader>n <Esc>:nohlsearch<CR>
../plugin/plugin.vim:noremap <leader>q :copen<CR>
../plugin/plugin.vim:  nnoremap <leader>v v$hy
../plugin/plugin.vim:nnoremap <leader>vs :call ConvertSearchForVisualSelection()<CR>
../plugin/textFormat.vim:nnoremap <leader>2 :%s/“/"/g<bar>:%s/”/"/g<cr>
../plugin/textFormat.vim:nnoremap <leader>[ :s/\m\[.\{-}]//g<CR>
../plugin/textFormat.vim:nnoremap <leader>5 :call UnicodePercent()<cr>
../plugin/textFormat.vim:nnoremap <leader>9 :call PercentUnicode()<cr>
../plugin/buffers.vim:nnoremap <leader>s :buffers<CR>:sbuffer<Space>
../plugin/buffers.vim:nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>
../plugin/buffers.vim:nnoremap <silent><leader>rn :set rnu! rnu? <CR>
../plugin/plugins/textSearch.vim:" <Leader>f{char} to move to {char}
../plugin/plugins/textSearch.vim:map  <Leader><Leader>f <Plug>(easymotion-bd-f)
../plugin/plugins/textSearch.vim:nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)
../plugin/plugins/textSearch.vim:map  <Leader><Leader>w <Plug>(easymotion-bd-w)
../plugin/plugins/textSearch.vim:nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
../plugin/plugins/textSearch.vim:nnoremap <leader>e :call EasyMotionSearchToggle()<cr>
../plugin/plugins/shell.vim:nnoremap <leader>lt 3GVG:LanguageToolCheck <CR>
../plugin/plugins/shell.vim:nnoremap <leader>- :Texplore<cr>
../plugin/plugins/shell.vim:nnoremap <leader>d :cd %:p:h<CR>:pwd<CR>
../plugin/plugins/plugins.vim:noremap <leader>yy :CalendarH<CR>
../plugin/plugins/plugins.vim:nnoremap <leader>m :MRU
../plugin/plugins/plugins.vim:inoremap <leader>m :MRU
../plugin/plugins/plugins.vim:vnoremap <leader>m :MRU
../plugin/plugins/plugins.vim:noremap <leader>gg :GitGutterToggle<CR>
../plugin/plugins/plugins.vim:noremap <silent> <leader>be :BufExplorer<CR>
../plugin/plugins/plugins.vim:nmap <unique> <leader>pe <Plug>(PickerEdit)
../plugin/plugins/plugins.vim:nmap <unique> <leader>pb <Plug>(PickerBuffer)
../plugin/plugins/plugins.vim:"  <Leader>be - Opens BufExplorer
../plugin/plugins/plugins.vim:"  <Leader>bt - Toggles BufExplorer open or closed
../plugin/plugins/plugins.vim:"  <Leader>bs - Opens horizontally split window BufExplorer
../plugin/plugins/plugins.vim:"  <Leader>bv - Opens vertically split window BufExplorer
../plugin/plugins/plugins.vim:nnoremap <leader>bdd :Bdelete other<CR>
../plugin/plugins/plugins.vim:nnoremap <leader>bd  :Bdelete hidden<CR>
../tags:base64-<leader>-atob	grabbed/leaderUses.txt	/*base64-<leader>-atob*
../tags:base64-<leader>-atob	pack/ft/start/vim-base64/doc/base64.txt	/*base64-<leader>-atob*
../tags:base64-<leader>-atob/	grabbed/leaderUses.txt	/*base64-<leader>-atob\/*
../tags:base64-<leader>-atob/	pack/ft/start/vim-base64/doc/base64.txt	/*base64-<leader>-atob\/*
../tags:base64-<leader>-btoa/	grabbed/leaderUses.txt	/*base64-<leader>-btoa\/*
../tags:base64-<leader>-btoa/	pack/ft/start/vim-base64/doc/base64.txt	/*base64-<leader>-btoa\/*
../tags:debase64-<leader>-btoa	grabbed/leaderUses.txt	/*debase64-<leader>-btoa*
../tags:debase64-<leader>-btoa	pack/ft/start/vim-base64/doc/base64.txt	/*debase64-<leader>-btoa*
../vimrc.vim:noremap <leader>ll :set list! list? <CR>
../vimrc.vim:nnoremap <leader>x <C-W>c
../vimrc.vim:nnoremap <silent><leader>cc :set cuc! cuc? <CR>
../vimrc.vim:nnoremap <silent><leader>cl :set cul! cul? <CR>
../vimrc.vim:nnoremap <leader><down> 5<C-W>-
../vimrc.vim:nnoremap <leader><up> 5<C-W>+
../vimrc.vim:nnoremap <leader><left> 10<C-W><
../vimrc.vim:nnoremap <leader><right> 10<C-W>>
