vim: ft=leader:

../after/plugin/plugins.vim:noremap <leader>gg :call GitGutterFocus()<cr>
../ftplugin/dokuwiki.vim:"   :unmap <leader>i
../ftplugin/dokuwiki.vim:nnoremap <buffer> <leader><leader>i :s/\m\(^>\+\) /\1 <wrap indent> /<CR><Bar>A </wrap><Esc>
../ftplugin/dokuwiki.vim:nnoremap <buffer> <leader>= I=<Esc>A=<Esc>
../ftplugin/dokuwiki.vim:nnoremap <buffer> <leader><leader>= I=== <Esc>A ===<Esc>
../ftplugin/dokuwiki.vim:vnoremap <buffer><leader>hh y:call PageTitleToHyperlink()<CR>
../ftplugin/dokuwiki.vim:nnoremap <buffer> <leader>' viwc''''<Esc>hP
../ftplugin/dokuwiki.vim:vnoremap <buffer> <leader>' c''''<Esc>hP
../ftplugin/fugitive.vim:nnoremap <buffer><leader>gp :Git push<cr>
../ftplugin/fugitive.vim:nnoremap <buffer><leader>gs 4j-<cr>
../ftplugin/email.vim:nnoremap <buffer> <leader><leader>= I==  <Esc>A  ==<Esc>
../ftplugin/email.vim:nnoremap <buffer> <leader>== I==<Esc>A==<Esc>
../ftplugin/email.vim:nnoremap <buffer> <leader>=- 0xx<Esc>$xx<Esc>
../ftplugin/email.vim:nnoremap <buffer> <leader># 099i~<Esc>
../ftplugin/vim.vim:vnoremap <buffer><leader>> :s/"">/"">>/<CR>
../ftplugin/vim.vim:vnoremap <buffer><leader>< :s/"">>/"">/<CR>
../ftplugin/vim.vim:nnoremap <buffer><leader><leader>> :call FirmComment()<cr>
../ftplugin/vim.vim:nnoremap <buffer><leader><leader>< :call FirmUnComment()<cr>
../ftplugin/md.vim:"  (I'm using <leader> here to avoid accidentally running this)
../ftplugin/md.vim:  nnoremap <buffer><leader><F7> :execute "silent !perl $onGH/misc/PerlTools/mysmsMD.pl ".expand('%:p')<CR>
../ftplugin/md.vim:  nnoremap <buffer><leader><F7> :call MysmsMD()<CR>
../ftplugin/md.vim:" check with  :map <leader><F7>
../ftplugin/md.vim:vnoremap <buffer> <leader>v1 :s#^\v(.+)$#> \1  #g <bar> nohlsearch <CR>
../ftplugin/md.vim:vnoremap <buffer> <leader>v2 :s#^\v(.+)  $\n^$#\1\r#g <CR>
../ftplugin/tex.vim:nnoremap <buffer><leader><leader>< :s/</\\url{/<bar>s/>/}/<CR>  " convert md url
../ftplugin/tex.vim:vnoremap <buffer><leader><leader>b c\textbf{<Esc>pa}<Esc>  " enbolden a selection
../ftplugin/tex.vim:vnoremap <buffer><leader><leader>i c\textit{<Esc>pa}<Esc>  " italicize a selection
../ftplugin/tex.vim:nnoremap <buffer><leader>> :call DemoteSubSections()<CR>
../ftplugin/tex.vim:vnoremap <buffer><leader>> <Esc>:call DemoteSubSections()<CR>
../ftplugin/tex.vim:nnoremap <buffer><leader>< :call PromoteSubSections()<CR>
../ftplugin/tex.vim:vnoremap <buffer><leader>< <Esc>:call PromoteSubSections()<CR>
../ftplugin/tex.vim:vnoremap <leader>b c\textbf{}<Esc>P
../ftplugin/tex.vim:vnoremap <buffer> <leader>v1 :s#^\v(.+)$#\1 \\\\#g <bar> nohlsearch <CR>
../ftplugin/tex.vim:vnoremap <buffer> <leader>v2 :s#^\v(.+) \\\\$\n^$#\1\r#g <CR>
../ftplugin/gitconfig.vim:nnoremap <leader>u :s#https://github.com/#git@github.com:#g <CR>
../ftplugin/HashFolding.vim:vnoremap <buffer><leader>> :s/^#/##/<CR>
../ftplugin/HashFolding.vim:vnoremap <buffer><leader>< :s/^#//<CR>
../ftplugin/HashEqualsFolding.vim:vnoremap <buffer><leader>> :s/#=/#==/<CR>  " demote
../ftplugin/HashEqualsFolding.vim:vnoremap <buffer><leader>< :s/#==/#=/<CR>  " promote
../ftplugin/HashEqualsFolding.vim:nnoremap <buffer><leader><leader>> :call FirmComment()<cr>
../ftplugin/HashEqualsFolding.vim:nnoremap <buffer><leader><leader>< :call FirmUnComment()<cr>
../ftplugin/markdown.vim:vnoremap <buffer><leader>> :s/^#/##/<CR>
../ftplugin/markdown.vim:vnoremap <buffer><leader>< :s/^#//<CR>
../ftplugin/markdown.vim:nnoremap <buffer> <leader>` viwc``<Esc>P
../ftplugin/markdown.vim:vnoremap <leader>` c``<Esc>P
../ftplugin/python.vim:nnoremap <leader>u :TagbarToggle<CR>
../ftplugin/perl.vim:nnoremap <leader>u :TagbarToggle<CR>
../ftplugin/bbcode.vim:nnoremap <buffer> <leader>] viwc[b][/b]<Esc>hhhP
../ftplugin/bbcode.vim:vnoremap <buffer> <leader>] c[b][/b]<Esc>hhhP
../gvimrc.vim:nnoremap <leader>8 :call EightyTwoColumns()<cr>
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>*   *
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>#   #
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>g   g
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>g#  g#
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>z   z
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>gz  gz
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>z#  z#
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>gz# gz#
../pack/packs-cp/opt/listtoggle/plugin/listtoggle.vim:      \ get( g:, 'lt_location_list_toggle_map', '<leader>l' )
../pack/packs-cp/opt/listtoggle/plugin/listtoggle.vim:      \ get( g:, 'lt_quickfix_list_toggle_map', '<leader>q' )
../pack/packs-cp/opt/listtoggle/plugin/listtoggle.vim:if g:lt_location_list_toggle_map != '<leader>l' ||
../pack/packs-cp/opt/listtoggle/plugin/listtoggle.vim:      \ g:lt_quickfix_list_toggle_map != '<leader>q'
../pack/packs-cp/opt/listtoggle/README.md:    let g:lt_location_list_toggle_map = '<leader>l'
../pack/packs-cp/opt/listtoggle/README.md:    let g:lt_quickfix_list_toggle_map = '<leader>q'
../pack/packs-cp/opt/listtoggle/README.md:By default, they are set to `<leader>l` and `<leader>q`, respectively.
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vnoremap <silent> <Leader>r<Enter> :LiveEasyAlign!<Enter>
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  " vnoremap <silent> <Leader><Enter>  :LiveEasyAlign<Enter>
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  " nmap <leader>A <Plug>(EasyAlignOperator)
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader><Enter> <Plug>(LiveEasyAlign)
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  nmap <leader>A       <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader>.       <Plug>(EasyAlignRepeat)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:            map <Leader><Leader> <Plug>(easymotion-prefix)
../pack/packs-cp/opt/vim-easymotion/README.md:**The default leader has been changed to `<Leader><Leader>` to avoid
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader> <Plug>(easymotion-prefix)
../pack/packs-cp/opt/vim-easymotion/README.md:All motions will then be triggered with `<Leader>` by default, e.g.
../pack/packs-cp/opt/vim-easymotion/README.md:`<Leader>s`, `<Leader>gE`.
../pack/packs-cp/opt/vim-easymotion/README.md:Type `<Leader><Leader>w`(`<Plug>(easymotion-w)`) to trigger the word motion `w`.
../pack/packs-cp/opt/vim-easymotion/README.md:Type `<Leader><Leader>fo`, and all "o" characters are highlighted:
../pack/packs-cp/opt/vim-easymotion/README.md:" <Leader>f{char} to move to {char}
../pack/packs-cp/opt/vim-easymotion/README.md:map  <Leader>f <Plug>(easymotion-bd-f)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>f <Plug>(easymotion-overwin-f)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>L <Plug>(easymotion-bd-jk)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>L <Plug>(easymotion-overwin-line)
../pack/packs-cp/opt/vim-easymotion/README.md:map  <Leader>w <Plug>(easymotion-bd-w)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>w <Plug>(easymotion-overwin-w)
../pack/packs-cp/opt/vim-easymotion/README.md:By default, you can already jump forward or backward with `<Leader>s`. A useful
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>l <Plug>(easymotion-lineforward)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>h <Plug>(easymotion-linebackward)
../pack/packs-cp/opt/vim-easymotion/README.md:For example, `<Leader><Leader>sa` can search '„ÅÇ'.
../pack/packs-cp/opt/vim-easymotion/README.md:Default `<Leader><Leader>` prefix isn't easy to press, and I leave them just for backwards compatibility.
../pack/packs-cp/opt/vim-easymotion/README.md:You should at least change the prefix key like this `map <Leader> <Plug>(easymotion-prefix)`
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
../pack/packs-cp/opt/vim-easymotion/README.md:**`<Leader>j`** & **`<Leader>k`** make it easy to move to the lines.
../pack/packs-cp/opt/vim-easymotion/README.md:Of course, you can use any key you want instead of `s` such as `<Space>`, `<Leader>s`, etc...
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>w <Plug>(easymotion-iskeyword-w)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>b <Plug>(easymotion-iskeyword-b)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>w <Plug>(easymotion-iskeyword-w)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>b <Plug>(easymotion-iskeyword-b)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>e <Plug>(easymotion-iskeyword-e)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>ge <Plug>(easymotion-iskeyword-ge)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>W <Plug>(easymotion-W)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>B <Plug>(easymotion-B)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>E <Plug>(easymotion-E)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>gE <Plug>(easymotion-gE)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Type <Leader><Leader>w to trigger the word motion |w|. See
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Type <Leader><Leader>fo, and all "o" characters are highlighted: >
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Note: The default leader has been changed to <Leader><Leader> to avoid
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>f{char}      | Find {char} to the right. See |f|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>F{char}      | Find {char} to the left. See |F|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>t{char}      | Till before the {char} to the right. See |t|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>T{char}      | Till after the {char} to the left. See |T|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>w            | Beginning of word forward. See |w|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>W            | Beginning of WORD forward. See |W|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>b            | Beginning of word backward. See |b|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>B            | Beginning of WORD backward. See |B|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>e            | End of word forward. See |e|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>E            | End of WORD forward. See |E|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>ge           | End of word backward. See |ge|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>gE           | End of WORD backward. See |gE|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>j            | Line downward. See |j|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>k            | Line upward. See |k|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>n            | Jump to latest "/" or "?" forward. See |n|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>N            | Jump to latest "/" or "?" backward. See |N|.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>s            | Find(Search) {char} forward and backward.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-f) | <Leader>f{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-F) | <Leader>F{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-t) | <Leader>t{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-T) | <Leader>T{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-w) | <Leader>w
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-W) | <Leader>W
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-b) | <Leader>b
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-B) | <Leader>B
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-e) | <Leader>e
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-E) | <Leader>E
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-ge)| <Leader>ge
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-gE)| <Leader>gE
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-j) | <Leader>j
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-k) | <Leader>k
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-n) | <Leader>n
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-N) | <Leader>N
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-s) | <Leader>s
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>f <Plug>(easymotion-overwin-f)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>f <Plug>(easymotion-bd-f)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>f <Plug>(easymotion-bd-f)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>s <Plug>(easymotion-overwin-f2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>s <Plug>(easymotion-bd-f2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>s <Plug>(easymotion-bd-f2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>L <Plug>(easymotion-overwin-line)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>L <Plug>(easymotion-bd-jk)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>L <Plug>(easymotion-bd-jk)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>w <Plug>(easymotion-overwin-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>w <Plug>(easymotion-bd-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>w <Plug>(easymotion-bd-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>; <Plug>(easymotion-next)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>, <Plug>(easymotion-prev)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-eol-j)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-eol-K)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>w <Plug>(easymotion-iskeyword-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>b <Plug>(easymotion-iskeyword-b)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    nmap <Leader>s <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    xmap <Leader>s <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    omap <Leader>z <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>s{char}{char}{char}...<CR>
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:For example, '<Leader><Leader>fa' can search '„ÅÇ'. This feature doesn't
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Type <Leader><Leader>w and the text is updated: >
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Note: The default leader key has been changed to '<Leader><Leader>' to
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map <Leader> <Plug>(easymotion-prefix)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Default: '<Leader><Leader>'
../pack/packs-cp/opt/vim-fontsize/README.rst:For example, using the default key bindings, pressing <Leader><Leader>+ will
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>=  <Plug>FontsizeBegin
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>+  <Plug>FontsizeInc
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>-  <Plug>FontsizeDec
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>0  <Plug>FontsizeDefault
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>=    Begin "font size" mode
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>+    Increment font size (by [count])
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>-    Decrement font size (by [count])
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>0    Revert to default font size
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:Note that by default, <Leader> is the backslash character, so for example
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:<Leader><Leader>+ is invoked by pressing \\+ from normal mode.
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  5<Leader><Leader>+
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:to use <Leader> instead of <Leader><Leader> as a prefix:
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>=  <Plug>FontsizeBegin
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>+  <Plug>FontsizeInc
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>-  <Plug>FontsizeDec
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>0  <Plug>FontsizeDefault
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  - Switch default key bindings to <Leader><Leader>x instead of <Leader>xx.
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  - Changed <Leader>== to enter "font size" mode without changing the
../pack/packs-cp/opt/limelight.vim/README.md:nmap <Leader>l <Plug>(Limelight)
../pack/packs-cp/opt/limelight.vim/README.md:xmap <Leader>l <Plug>(Limelight)
../pack/packs-cp/opt/vim-ShowTrailingWhitespace/README.md:    nnoremap <silent> <Leader>t$ :<C-u>call ShowTrailingWhitespace#Toggle(0)<Bar>
../pack/packs-cp/opt/vim-ShowTrailingWhitespace/doc/ShowTrailingWhitespace.txt:    nnoremap <silent> <Leader>t$ :<C-u>call ShowTrailingWhitespace#Toggle(0)<Bar>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bb',   '<Plug>BufKillBack')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bf',   '<Plug>BufKillForward')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bun',  '<Plug>BufKillBun')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bun', '<Plug>BufKillBangBun')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bd',   '<Plug>BufKillBd')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bd',  '<Plug>BufKillBangBd')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bw',   '<Plug>BufKillBw')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bw',  '<Plug>BufKillBangBw')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bundo','<Plug>BufKillUndo')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>ba',   '<Plug>BufKillAlt')
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:"            changed a map CalendarV for <Leader>cal
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:"            changed a map CalendarH for <Leader>caL
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:"             make a map CalendarV for <Leader>ca
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:"             <Leader>ca didn't show current month.
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:"     1.3e : added usage for <Leader>
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>cal <Plug>CalendarV
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>caL <Plug>CalendarH
../pack/packs-cp/opt/csv.vim/csv.vmb:changed the |<Leader>| or |<LocalLeader>| variables, those the <Localleader>
../pack/packs-cp/opt/csv.vim/README.md:changed the `<Leader>` or `<LocalLeader>` variables, those the `<Localleader>`
../pack/packs-cp/opt/csv.vim/doc/ft-csv.txt:changed the |<Leader>| or |<LocalLeader>| variables, those the <Localleader>
../pack/packs-cp/opt/quick-scope/README.md:nmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/quick-scope/README.md:xmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/quick-scope/doc/quick-scope.txt:Create a custom mapping (<leader> + q in the example below):
../pack/packs-cp/opt/quick-scope/doc/quick-scope.txt:  nmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/quick-scope/doc/quick-scope.txt:  xmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader><F5>','<Plug>XTablineToggleFiltering')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader>tr','<Plug>XTablineReopen')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdc <Plug>XTablineCdCurrent
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdd <Plug>XTablineCdDown1
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd2 <Plug>XTablineCdDown2
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd3 <Plug>XTablineCdDown3
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdh <Plug>XTablineCdHome
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  <leader>0 will jump to tenth buffer. Those mappings are not automatically
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>1 <Plug>AirlineSelectTab1
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>2 <Plug>AirlineSelectTab2
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>3 <Plug>AirlineSelectTab3
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>4 <Plug>AirlineSelectTab4
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>5 <Plug>AirlineSelectTab5
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>6 <Plug>AirlineSelectTab6
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>7 <Plug>AirlineSelectTab7
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>8 <Plug>AirlineSelectTab8
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>9 <Plug>AirlineSelectTab9
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>0 <Plug>AirlineSelectTab0
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>- <Plug>AirlineSelectPrevTab
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>+ <Plug>AirlineSelectNextTab
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>10 <Plug>AirlineSelectTab10
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>11 <Plug>AirlineSelectTab11
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>12 <Plug>AirlineSelectTab12
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>13 <Plug>AirlineSelectTab13
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>01 <Plug>AirlineSelectTab01
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>02 <Plug>AirlineSelectTab02
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>03 <Plug>AirlineSelectTab03
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader><F5>  <Plug>XTablineToggleFiltering
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>tr    <Plug>XTablineReopen <SID>ReopenLastTab
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdc       <Plug>XTablineCdCurrent
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdd       <Plug>XTablineCdDown1
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd2       <Plug>XTablineCdDown2
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd3       <Plug>XTablineCdDown3
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdh       <Plug>XTablineCdHome
../pack/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:if maparg('<leader>*', 'n') == ''
../pack/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:  nnoremap <leader>* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'<CR>
../pack/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:if maparg('<leader>*', 'v') == ''
../pack/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:  vnoremap <leader>* :<C-u>call VisualStarSearchSet('/')<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **'<CR>
../pack/packs-cp/opt/vim-visual-star-search/README.md:If you hit `<leader>*` (`\*` unless you changed the mapleader), vim
../pack/packs-cp/opt/vim-visual-star-search/README.md:If you have already mapped `<leader>*` then visual star search won't override it.
../pack/packs-cp/opt/vim-visual-star-search/test-patterns:recursive search (<leader>*), and see if Vim finds
../pack/packs-cp/opt/colorizer/plugin/colorizer.vim:" By default, <leader>tc is mapped to ColorToggle. If you want to use another
../pack/packs-cp/opt/colorizer/plugin/colorizer.vim:  nmap <unique> <Leader>tc <Plug>Colorizer
../pack/packs-cp/opt/nerdtree/README.markdown:nnoremap <leader>n :NERDTreeFocus<CR>
../pack/packs-cp/opt/vim-base64/plugin/base64.vim:  vnoremap <silent> <leader>atob :<c-u>call base64#v_atob()<cr>
../pack/packs-cp/opt/vim-base64/plugin/base64.vim:  vnoremap <silent> <leader>btoa :<c-u>call base64#v_btoa()<cr>
../pack/packs-cp/opt/vim-base64/plugin/base64.vim:  nnoremap <leader>btoa/ :%s/\v()/\=base64#encode(submatch(1))/<home><right><right><right><right><right><right>
../pack/packs-cp/opt/vim-base64/plugin/base64.vim:  nnoremap <leader>atob/ :%s/\v()/\=base64#decode(submatch(1))/<home><right><right><right><right><right><right>
../pack/packs-cp/opt/vim-base64/README.md:* `<leader>atob` to convert from base64 to a string
../pack/packs-cp/opt/vim-base64/README.md:* `<leader>btoa` to convert from a string to base64
../pack/packs-cp/opt/vim-base64/README.md:You can also, in normal mode, replace all instances of a regular expression by their base64 representation, using `<leader>btoa/` or `<leader>atob/`. This will insert a command mode string, with your cursor directly where you can type the regular expression.
../pack/packs-cp/opt/vim-base64/doc/base64.txt:                                                        *debase64-<leader>-btoa*
../pack/packs-cp/opt/vim-base64/doc/base64.txt:<leader>btoa            Base64 encodes the visually selected string
../pack/packs-cp/opt/vim-base64/doc/base64.txt:                                                        *base64-<leader>-atob*
../pack/packs-cp/opt/vim-base64/doc/base64.txt:<leader>atob            Decodes the visually selected base64 string
../pack/packs-cp/opt/vim-base64/doc/base64.txt:                                                       *base64-<leader>-atob/*
../pack/packs-cp/opt/vim-base64/doc/base64.txt:<leader>btoa/           Starts a command line for encoding a regex submatch
../pack/packs-cp/opt/vim-base64/doc/base64.txt:                                                       *base64-<leader>-btoa/*
../pack/packs-cp/opt/vim-base64/doc/base64.txt:<leader>atob/           Starts a command line for decoding a regex submatch
../pack/packs-cp/opt/vim-base64/doc/tags:base64-<leader>-atob	base64.txt	/*base64-<leader>-atob*
../pack/packs-cp/opt/vim-base64/doc/tags:base64-<leader>-atob/	base64.txt	/*base64-<leader>-atob\/*
../pack/packs-cp/opt/vim-base64/doc/tags:base64-<leader>-btoa/	base64.txt	/*base64-<leader>-btoa\/*
../pack/packs-cp/opt/vim-base64/doc/tags:debase64-<leader>-btoa	base64.txt	/*debase64-<leader>-btoa*
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"   You want to invoke a command :Foo in a line-wise mapping <Leader>foo; the
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	nnoremap <Leader>foo :<C-u>.Foo<CR>
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	nnoremap <Leader>foo :Foo<CR>
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	:nnoremap <Leader>foo :call ingo#cmdrangeconverter#BufferToLineRange('Foo')<Bar>if ingo#err#IsSet()<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"   a mapping <Leader>foo that defaults to the whole buffer, unless [count] is
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	:nnoremap <Leader>foo :<C-u>if ! ingo#cmdrangeconverter#LineToBufferRange('s///g')<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/err.vim:"	nnoremap <Leader>f :call Foo#Bar()<Bar>if ingo#err#IsSet()<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/text/surroundings/Lines/Creator.vim:" [count]<Leader>??	Insert ??? around [count] lines.
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/text/surroundings/Lines/Creator.vim:" [count]<Leader>?{motion}
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/text/surroundings/Lines/Creator.vim:" {Visual}<Leader>?	Insert ??? around the selection.
../pack/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:                execute mode . 'map <leader>' . a:combo . ' ' . plug
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cc` **|NERDCommenterComment|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cn` **|NERDCommenterNested|**
../pack/packs-cp/opt/nerdcommenter/README.md:    Same as <leader>cc but forces nesting.
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>c<space>` **|NERDCommenterToggle|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cm` **|NERDCommenterMinimal|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>ci` **|NERDCommenterInvert|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cs` **|NERDCommenterSexy|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cy` **|NERDCommenterYank|**
../pack/packs-cp/opt/nerdcommenter/README.md:    Same as <leader>cc except that the commented line(s) are yanked first.
../pack/packs-cp/opt/nerdcommenter/README.md:  * `<leader>c$` **|NERDCommenterToEOL|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `<leader>cA` **|NERDCommenterAppend|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `<leader>ca` **|NERDCommenterAltDelims|**
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cl` **|NERDCommenterAlignLeft**
../pack/packs-cp/opt/nerdcommenter/README.md:    `[count]<leader>cb` **|NERDCommenterAlignBoth**
../pack/packs-cp/opt/nerdcommenter/README.md:    Same as **|NERDCommenterComment|** except that the delimiters are aligned down the left side (`<leader>cl`) or both sides (`<leader>cb`).
../pack/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cu` **|NERDCommenterUncomment|**
../pack/packs-cp/opt/nerdcommenter/README.md:nnoremap <silent> <leader>c} V}:call NERDComment('x', 'toggle')<CR>
../pack/packs-cp/opt/nerdcommenter/README.md:nnoremap <silent> <leader>c{ V{:call NERDComment('x', 'toggle')<CR>
../pack/packs-cp/opt/nerdcommenter/CHANGELOG.md:*  use |<Leader>| instead of comma to start the default mappings
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Most NERD commenter commands are executed using the |<Leader>| key. In Vim
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:In the definition of custom commands |<Leader>| is the placeholder for the 
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:leader key. To see the current mapping for |<Leader>| type :echo mapleader.
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cc |NERDCommenterComment|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cn |NERDCommenterNested|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc but forces nesting.
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|c<space> |NERDCommenterToggle|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cm |NERDCommenterMinimal|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|ci |NERDCommenterInvert|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cs |NERDCommenterSexy|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cy |NERDCommenterYank|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc except that the commented line(s) are yanked first.
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|c$ |NERDCommenterToEOL|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|cA |NERDCommenterAppend|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|ca |NERDCommenterAltDelims|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cl    |NERDCommenterAlignLeft|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cb    |NERDCommenterAlignBoth|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:left side (|<Leader>|cl) or both sides (|<Leader>|cb).
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cu |NERDCommenterUncomment|
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cc
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cn
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Performs nested commenting.  Works the same as |<Leader>|cc except that if a line
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|c<space>
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cm
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|cm then a '/*' will be placed at the start of the top line and a '*/'
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|ci
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cs
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cy
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc except that it yanks the line(s) that are commented first.
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|c$
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|cA
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|ca
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:if the user is editing a c++ file using // comments and they hit |<Leader>|ca
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mappings: [count]|<Leader>|cl   [count]|<Leader>|cb
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc except that the comment delimiters are aligned on the left
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cu
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|cu on this line: >
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:and we comment it with |<Leader>|cn it will be changed to: >
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:you hit |<Leader>|cc on a line that is already commented it will be commented
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>be  - Opens BufExplorer
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>bt  - Toggles BufExplorer open or closed
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>bs  - Opens horizontally split window BufExplorer
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>bv  - Opens vertically split window BufExplorer
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>be :BufExplorer<CR>
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>bt :ToggleBufExplorer<CR>
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>
../pack/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>be   or   :BufExplorer   or   Your custom key mapping
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>bt   or   :ToggleBufExplorer   or   Your custom key mapping
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>bs   or   :BufExplorerHorizontalSplit   or   Your custom key mapping
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>bv   or   :BufExplorerVerticalSplit   or   Your custom key mapping
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:When <Leader>bs or <Leader>bv is issued, bufexplorer opens in either a
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:windows) in the newly split window.  When <Leader>be is issued, bufexplorer
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:If you do not like the default key mappings of <Leader>be, <Leader>bs, and
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:<Leader>bv, you can override bufexplorer's default mappings by setting up
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:    - Thanks to PhilRunninger for changing documentation to use <Leader>, in
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:      map <Leader>bt, and the function ToggleBufExplorer().
../pack/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:      *compliant*, adding default keymappings of <Leader>be and <Leader>bs
../pack/packs-cp/opt/vim-gitgutter/README.mkd:You can jump between hunks with `[c` and `]c`.  You can preview, stage, and undo hunks with `<leader>hp`, `<leader>hs`, and `<leader>hu` respectively.
../pack/packs-cp/opt/vim-gitgutter/README.mkd:* stage the hunk with `<Leader>hs` or
../pack/packs-cp/opt/vim-gitgutter/README.mkd:* undo it with `<Leader>hu`.
../pack/packs-cp/opt/vim-gitgutter/README.mkd:* either visually selecting the part you want and staging with your mapping, e.g. `<Leader>hs`;
../pack/packs-cp/opt/vim-gitgutter/README.mkd:* preview the hunk, e.g. `<Leader>hp`;
../pack/packs-cp/opt/vim-gitgutter/README.mkd:* stage the remaining lines: either write (`:w`) the window or stage via `<Leader>hs` or `:GitGutterStageHunk`.
../pack/packs-cp/opt/vim-gitgutter/README.mkd:And you can preview a hunk's changes with `<Leader>hp`.  The location of the preview window is configured with `g:gitgutter_preview_win_location` (default `'bo'`).  You can of course change this mapping, e.g:
../pack/packs-cp/opt/vim-gitgutter/README.mkd:nmap <silent> <Leader>x :set opfunc=CleanUp<CR>g@
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'v') && maparg('<Leader>hs', 'x') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'n') && maparg('<Leader>hs', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterUndoHunk)') && maparg('<Leader>hu', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hu <Plug>(GitGutterUndoHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterPreviewHunk)') && maparg('<Leader>hp', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hp <Plug>(GitGutterPreviewHunk)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:                                                         *gitgutter-<Leader>hp*
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:<Leader>hp              Preview the hunk under the cursor.
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:                                                         *gitgutter-<Leader>hs*
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:<Leader>hs              Stage the hunk under the cursor.
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:                                                         *gitgutter-<Leader>hu*
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:<Leader>hu              Undo the hunk under the cursor.
../pack/packs-cp/opt/vim-gitgutter/doc/tags:gitgutter-<Leader>hp	gitgutter.txt	/*gitgutter-<Leader>hp*
../pack/packs-cp/opt/vim-gitgutter/doc/tags:gitgutter-<Leader>hs	gitgutter.txt	/*gitgutter-<Leader>hs*
../pack/packs-cp/opt/vim-gitgutter/doc/tags:gitgutter-<Leader>hu	gitgutter.txt	/*gitgutter-<Leader>hu*
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pe <Plug>(PickerEdit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ps <Plug>(PickerSplit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pt <Plug>(PickerTabedit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pd <Plug>(PickerTabdrop)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pv <Plug>(PickerVsplit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pb <Plug>(PickerBuffer)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>p] <Plug>(PickerTag)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pw <Plug>(PickerStag)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>po <Plug>(PickerBufferTag)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ph <Plug>(PickerHelp)
../pack/packs-unix/opt/vim-better-whitespace/plugin/better-whitespace.vim:call s:InitVariable('better_whitespace_operator', '<leader>s')
../pack/packs-unix/opt/vim-better-whitespace/README.md:    *  There is an operator (defaulting to `<leader>s`) to clean whitespace.
../pack/packs-unix/opt/vim-better-whitespace/README.md:        For example, in normal mode, `<leader>sip` will remove trailing whitespace from the
../pack/packs-unix/opt/vim-better-whitespace/doc/better-whitespace.txt:By default, an operator is provided mapped to: <leader>s.
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:It uses the prefix <leader>c to set all functionality up. By default, <Leader>
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:is defined as '\' (|<Leader>|). Use the name provided in the second column to
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:It uses the prefix <leader>c to set all functionality up. By default, <Leader>
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:is defined as '\' (|<Leader>|). Use the name provided in the second column to
../pack/packs-unix/opt/fzf.vim/README.md:nmap <leader><tab> <plug>(fzf-maps-n)
../pack/packs-unix/opt/fzf.vim/README.md:xmap <leader><tab> <plug>(fzf-maps-x)
../pack/packs-unix/opt/fzf.vim/README.md:omap <leader><tab> <plug>(fzf-maps-o)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    nmap <leader><tab> <plug>(fzf-maps-n)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    xmap <leader><tab> <plug>(fzf-maps-x)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    omap <leader><tab> <plug>(fzf-maps-o)
../plugin/plugins.vim:noremap <leader>aa :ALEToggleBuffer<CR>
../plugin/plugins.vim:noremap <silent> <leader>be :BufExplorer<CR>
../plugin/plugins.vim:"  <Leader>be - Opens BufExplorer
../plugin/plugins.vim:"  <Leader>bt - Toggles BufExplorer open or closed
../plugin/plugins.vim:"  <Leader>bs - Opens horizontally split window BufExplorer
../plugin/plugins.vim:"  <Leader>bv - Opens vertically split window BufExplorer
../plugin/plugins.vim:noremap <leader>yy :CalendarH<CR>
../plugin/plugins.vim:nnoremap <leader>bdd :Bdelete other<CR>
../plugin/plugins.vim:nnoremap <leader>bd  :Bdelete hidden<CR>
../plugin/plugins.vim:nnoremap <leader>bb :CtrlPBuffer<CR>
../plugin/plugins.vim:    nnoremap <leader>j :Files /mnt/BX200/Dropbox/JH<CR>
../plugin/plugins.vim:    nnoremap <leader>j :Files /mnt/SDEP128G/Dropbox/JH<CR>
../plugin/plugins.vim:    nnoremap <leader>j :Files /mnt/SD480GSSDPlus/Dropbox/JH<CR>
../plugin/plugins.vim:  nnoremap <leader>B :BLines<CR>
../plugin/plugins.vim:  nnoremap <leader>L :Lines<CR>
../plugin/plugins.vim:  nnoremap <leader>bf :Buffers<CR>
../plugin/plugins.vim:let g:lt_location_list_toggle_map = '<leader>ll'
../plugin/plugins.vim:  nnoremap <leader>m :MRU
../plugin/plugins.vim:  nnoremap <leader>m :MRU<CR>
../plugin/plugins.vim:  " nnoremap <silent> <leader>mt /\.tex<CR>:MRU<CR>
../plugin/plugins.vim:  nnoremap <leader>mc :call MRU_highlighted('\.cls')<CR>:se hls<CR>
../plugin/plugins.vim:  nnoremap <leader>mm :call MRU_highlighted('\.md' )<CR>:se hls<CR>
../plugin/plugins.vim:  nnoremap <leader>ml :call MRU_highlighted('\.pl' )<CR>:se hls<CR>
../plugin/plugins.vim:  nnoremap <leader>mp :call MRU_highlighted('\.ps1')<CR>:se hls<CR>
../plugin/plugins.vim:  nnoremap <leader>mt :call MRU_highlighted('\.txt')<CR>:se hls<CR>
../plugin/plugins.vim:  nnoremap <leader>mv :call MRU_highlighted('\.vim')<CR>:se hls<CR>
../plugin/plugins.vim:  nnoremap <leader>mx :call MRU_highlighted('\.tex')<CR>:se hls<CR>
../plugin/plugins.vim:  nnoremap <leader>my :call MRU_highlighted('\.py')<CR>:se hls<CR>
../plugin/plugins.vim:" <leader>c<space> -> NERDCommenterToggle
../plugin/plugins.vim:" add this for relevant filetypes:  nnoremap <silent> <buffer> <leader>ct :TagbarToggle<CR>
../plugin/plugins.vim:" <Leader>f{char} to move to {char}
../plugin/plugins.vim:map  <Leader><Leader>f <Plug>(easymotion-bd-f)
../plugin/plugins.vim:nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)
../plugin/plugins.vim:map  <Leader><Leader>w <Plug>(easymotion-bd-w)
../plugin/plugins.vim:nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
../plugin/plugins.vim:nnoremap <leader>e :call EasyMotionSearchToggle()<cr>
../plugin/plugins.vim:" <Leader><Leader>+ -> bigger font
../plugin/plugins.vim:" <Leader><Leader>- -> smaller font
../plugin/plugins.vim:" <Leader><Leader>0 -> default font size
../plugin/plugins.vim:" nnoremap <leader>LT :call LanguageTool_lopen() <CR>
../plugin/plugins.vim:nnoremap <leader>lt :LangTool <bar> lopen 15 <CR>
../plugin/plugins.vim:  nmap <unique> <leader>pe <Plug>(PickerEdit)
../plugin/plugins.vim:  nmap <unique> <leader>pb <Plug>(PickerBuffer)
../plugin/plugin.vim:nnoremap <leader>sb :buffers<CR>:sbuffer<Space>
../plugin/plugin.vim:" nnoremap <leader>2 :sil!%s/‚Äú/"/g<bar>:sil!%s/‚Äù/"/g<bar>:sil!%s/‚Äò/'/g<bar>:sil!%s/‚Äô/'/g<cr>
../plugin/plugin.vim:nnoremap <leader>2 :call ClearFancyText()<cr>
../plugin/plugin.vim:  noremap <leader>yp :lan fr_FR.UTF-8<CR>:pu=strftime('%a %d %b %Y')<CR>:lan en_GB.UTF-8<CR>
../plugin/plugin.vim:  noremap <leader>yp :lan tim French<CR>:pu=strftime('%a %d %b %Y')<CR>:lan tim English_United Kingdom<CR>
../plugin/plugin.vim:nnoremap <leader>9 :call PercentUnicode()<cr>
../plugin/plugin.vim:nnoremap <leader>5 :call UnicodePercent()<cr>
../plugin/plugin.vim:nnoremap <leader>[ :s/\m\[.\{-}]//g<CR>
../plugin/plugin.vim:nnoremap <leader>U :Underline
../plugin/plugin.vim:nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>
../plugin/plugin.vim:nnoremap <silent><leader>rn :set rnu! rnu? <CR>
../plugin/plugin.vim:nnoremap <leader>n :nohlsearch<CR>
../plugin/plugin.vim:vnoremap <leader>n <Esc>:nohlsearch<CR>
../plugin/plugin.vim:nnoremap <leader>vg :call VimgrepSelection()<CR>
../plugin/plugin.vim:nnoremap <leader>i :call IncSearchToggle()<cr>
../plugin/plugin.vim:" and <leader>pt toggles it:
../plugin/plugin.vim:nnoremap <leader>pt :call ParenthsToggle()<cr>
../plugin/plugin.vim:" noremap <leader>q :copen<CR>
../plugin/plugin.vim:nnoremap <leader>sw :call SearchCFW()<CR>
../plugin/plugin.vim:nnoremap <leader>vs :call ConvertSearchForVisualSelection()<CR>
../plugin/plugin.vim:vnoremap <leader>vs <Esc>:call ConvertSearchForVisualSelection()<CR>
../plugin/plugin.vim:  nnoremap <leader>v v$hy
../plugin/plugin.vim:nnoremap <leader>f :let@f=@%<CR>
../plugin/plugin.vim:nnoremap <leader>- :Hexplore<cr>
../plugin/plugin.vim:nnoremap <leader>d :cd %:p:h<CR>:pwd<CR>
../QR.md:	<leader>atob " base64 to a string
../QR.md:	<leader>btoa " a string to base64
../QR.md:	<leader>tc          " (mapped to) ColorToggle (by colorizer) and files open fast when off
../syntax/leader.vim:syn match leader '<leader>\c' nextgroup=keystrokes
../vimrc.vim:noremap <leader><leader>ll :set list! list? <CR>
../vimrc.vim:nnoremap <leader>x <C-W>c
../vimrc.vim:nnoremap <silent><leader><leader>c :set cuc! cuc? <CR>
../vimrc.vim:nnoremap <silent><leader><leader>l :set cul! cul? <CR>
../vimrc.vim:nnoremap <leader><down> 5<C-W>-
../vimrc.vim:nnoremap <leader><up> 5<C-W>+
../vimrc.vim:nnoremap <leader><left> 10<C-W><
../vimrc.vim:nnoremap <leader><right> 10<C-W>>
../vimrc.vim:nnoremap <leader>c= :windo set nowfh <CR>
