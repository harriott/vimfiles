
generated by  $vimfiles/settings/all-unix.sh

$vimfiles

vim/ftplugin/ALElocaleader.vim:noremap <silent> <localleader>] <Plug>(ale_next_wrap)
vim/ftplugin/ALElocaleader.vim:noremap <silent> <localleader>[ <Plug>(ale_previous_wrap)
vim/packs-win64/opt/fzf/plugin/fzf.vim:nnoremap <silent> <Plug>(fzf-insert) i
vim/packs-win64/opt/fzf/plugin/fzf.vim:nnoremap <silent> <Plug>(fzf-normal) <Nop>
vim/packs-win64/opt/fzf/plugin/fzf.vim:  tnoremap <silent> <Plug>(fzf-insert) <C-\><C-n>i
vim/packs-win64/opt/fzf/plugin/fzf.vim:  tnoremap <silent> <Plug>(fzf-normal) <C-\><C-n>
vim/packs-win64/opt/fzf/plugin/fzf.vim:      call feedkeys(&filetype == 'fzf' ? "\<Plug>(fzf-insert)" : "\<Plug>(fzf-normal)")
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:if g:interestingWordsDefaultMappings && !hasmapto('<Plug>InterestingWords')
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:      nnoremap <silent> <unique> <script> <Plug>InterestingWords
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:      vnoremap <silent> <unique> <script> <Plug>InterestingWords
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:      nnoremap <silent> <unique> <script> <Plug>InterestingWordsClear
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:      nnoremap <silent> <unique> <script> <Plug>InterestingWordsForeward
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:      nnoremap <silent> <unique> <script> <Plug>InterestingWordsBackward
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:    if !hasmapto('<Plug>' . a:rhs)
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:        execute 'nmap <buffer>' . a:lhs . ' <Plug>' . a:rhs
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:        execute 'vmap <buffer>' . a:lhs . ' <Plug>' . a:rhs
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:call <sid>MapNormVis('<Plug>Markdown_MoveToNextHeader', '<sid>MoveToNextHeader')
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:call <sid>MapNormVis('<Plug>Markdown_MoveToPreviousHeader', '<sid>MoveToPreviousHeader')
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:call <sid>MapNormVis('<Plug>Markdown_MoveToNextSiblingHeader', '<sid>MoveToNextSiblingHeader')
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:call <sid>MapNormVis('<Plug>Markdown_MoveToPreviousSiblingHeader', '<sid>MoveToPreviousSiblingHeader')
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:call <sid>MapNormVis('<Plug>Markdown_MoveToParentHeader', '<sid>MoveToParentHeader')
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:call <sid>MapNormVis('<Plug>Markdown_MoveToCurHeader', '<sid>MoveToCurHeader')
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:nnoremap <Plug>Markdown_OpenUrlUnderCursor :call <sid>OpenUrlUnderCursor()<cr>
vim/packs-cp/opt/vim-markdown/ftplugin/markdown.vim:nnoremap <Plug>Markdown_EditUrlUnderCursor :call <sid>EditUrlUnderCursor()<cr>
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  You can also map them by yourself with '<Plug>' mappings.
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  'gx' command. '<Plug>Markdown_OpenUrlUnderCursor'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  relative markdown links. '<Plug>Markdown_EditUrlUnderCursor'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:- ']]': go to next header. '<Plug>Markdown_MoveToNextHeader'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  '<Plug>Markdown_MoveToPreviousHeader'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  '<Plug>Markdown_MoveToNextSiblingHeader'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  '<Plug>Markdown_MoveToPreviousSiblingHeader'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:- ']h': go to Current header. '<Plug>Markdown_MoveToCurHeader'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:- ']u': go to parent header (Up). '<Plug>Markdown_MoveToParentHeader'
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  map asdf <Plug>Markdown_MoveToParentHeader
vim/packs-cp/opt/vim-markdown/doc/vim-markdown.txt:  map <Plug> <Plug>Markdown_MoveToParentHeader
vim/packs-cp/opt/colorizer/plugin/colorizer.vim:" 	nmap ,tc <Plug>Colorizer
vim/packs-cp/opt/colorizer/plugin/colorizer.vim:nnoremap <silent> <Plug>Colorizer :ColorToggle<CR>
vim/packs-cp/opt/colorizer/plugin/colorizer.vim:if !hasmapto("<Plug>Colorizer") && (!exists("g:colorizer_nomap") || g:colorizer_nomap == 0)
vim/packs-cp/opt/colorizer/plugin/colorizer.vim:  nmap <unique> <Leader>tc <Plug>Colorizer
vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG
vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a
vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv
vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:        exe "silent! nmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:        exe "silent! imap <unique> ".a:mapActivation." <Plug>ToggleBackground"
vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:        exe "silent! vmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
vim/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:if !exists("no_plugin_maps") && !hasmapto('<Plug>ToggleBackground')
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/view.vim:" Use <Plug>(WinSaveView) from any mode at the beginning of a mapping to save
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/view.vim:" At the end of the mapping, use <Plug>(WinRestView) from normal mode to restore
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/motion/omap.vim:    \   (a:operator ==# 'c' ? "\<Plug>(IngoLibraryOmapRepeatReinsert)" : ''),
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/motion/omap.vim:inoremap <Plug>(IngoLibraryOmapRepeatReinsert) <C-r>.<Esc>
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"	silent! call repeat#set("\<Plug>(HistoryRecallWhatRepeat)", a:repeatCount)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"	silent! call repeat#setreg("\<Plug>(HistoryRecallWhatRepeat)", a:register)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   nnoremap <silent> <Plug>(HistoryRecallWhat)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   if ! hasmapto('<Plug>(HistoryRecallWhat)', 'n')
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"       nmap qX <Plug>(HistoryRecallWhat)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   nnoremap <silent> <Plug>(HistoryRecallListWhat)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   if ! hasmapto('<Plug>(HistoryRecallListWhat)', 'n')
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"       nmap qx <Plug>(HistoryRecallListWhat)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   nnoremap <silent> <Plug>(HistoryRecallWhatRepeat)
vim/packs-cp/opt/vim-startify/plugin/startify.vim:nnoremap <silent><plug>(startify-open-buffers) :<c-u>call startify#open_buffers()<cr>
vim/packs-cp/opt/vim-startify/doc/startify.txt:    autocmd User Startified nmap <buffer> o <plug>(startify-open-buffers)
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestEasy simple
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', 'simple mapping', '<Plug>TestEasy')
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestKeyNotation :<C-U>echo<CR>
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', 'key notation', '<Plug>TestKeyNotation')
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestBar :echo "<Bar><Bar>foo"<Bar>version <Bar> quit<CR>
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', 'bar', '<Plug>TestBar')
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestLt echo "\<lt>Plug><lt>NONO"
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', '<lt>', '<Plug>TestLt')
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestSID :<CR><SID>(JustATest):<CR>
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call vimtap#Is(maparg('<Plug>TestSID', '', 0, 1).rhs, ':<CR><SID>(JustATest):<CR>', 'original does not resolve <SID>')
vim/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call vimtap#Like(ingo#compat#maparg('<Plug>TestSID'), '^:<CR><SNR>\d\+_(JustATest):<CR>$', 'compatibility wrapper resolves <SID> to <SNR>')
vim/packs-cp/opt/vim-matchup/test/issues/59/rebind.vim:xmap u% <plug>(matchup-i%)
vim/packs-cp/opt/vim-matchup/test/issues/59/rebind.vim:omap u% <plug>(matchup-i%)
vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG
vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a
vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv
vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:        exe "silent! nmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:        exe "silent! imap <unique> ".a:mapActivation." <Plug>ToggleBackground"
vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:        exe "silent! vmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
vim/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:if !exists("no_plugin_maps") && !hasmapto('<Plug>ToggleBackground')
vim/packs-cp/opt/vim-matchup/test/issues/15/enhance-vimrc:    return &operatorfunc ==? matchstr(maparg('<Plug>Commentary', 'n'),
vim/packs-cp/opt/vim-matchup/README.md:nmap <silent> <F7> <plug>(matchup-hi-surround)
vim/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-browser)`
vim/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search)`
vim/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search-so)`
vim/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search-google)`
vim/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search-wikipedia)`
vim/packs-cp/opt/vim-open-url/README.md:remapping `<Plug>` mappings (Default: `1`)
vim/packs-cp/opt/vim-matchup/autoload/matchup/custom.vim:    execute 'nnoremap <silent> <plug>(matchup-custom-'.a:keys.')'
vim/packs-cp/opt/vim-matchup/autoload/matchup/custom.vim:    execute 'nmap' a:keys '<plug>(matchup-custom-'.a:keys.')'
vim/packs-cp/opt/vim-matchup/autoload/matchup/custom.vim:    execute 'xmap <silent> <plug>(matchup-custom-'.a:keys.')'
vim/packs-cp/opt/vim-matchup/autoload/matchup/custom.vim:    execute 'xmap <silent>' a:keys '<plug>(matchup-custom-'.a:keys.')'
vim/packs-cp/opt/vim-matchup/autoload/matchup/custom.vim:    execute 'onoremap <silent> <plug>(matchup-custom-'.a:keys.')'
vim/packs-cp/opt/vim-matchup/autoload/matchup/custom.vim:      execute 'omap' a:keys '<plug>(matchup-custom-'.a:keys.')'
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-browser) :OpenURL <cfile><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-browser) :<C-U>OpenURL <C-R>=open_url#get_selection()<CR><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search) :OpenSearchURL <cword><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search) :<C-U>OpenSearchURL <C-R>=open_url#get_selection()<CR><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search-so) :OpenSearchURL so <cword><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search-so) :<C-U>OpenSearchURL so <C-R>=open_url#get_selection()<CR><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search-google) :OpenSearchURL google <cword><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search-google) :<C-U>OpenSearchURL google <C-R>=open_url#get_selection()<CR><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search-wikipedia) :OpenSearchURL wikipedia <cword><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search-wikipedia) :<C-U>OpenSearchURL wikipedia <C-R>=open_url#get_selection()<CR><CR>
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-browser)', 'n')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap gB <Plug>(open-url-browser)
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-browser)', 'x')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap gB <Plug>(open-url-browser)
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search)', 'n')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap g<CR> <Plug>(open-url-search)
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search)', 'x')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap g<CR> <Plug>(open-url-search)
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-wikipedia)', 'n')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap gW <Plug>(open-url-search-wikipedia)
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-wikipedia)', 'x')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap gW <Plug>(open-url-search-wikipedia)
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-google)', 'n')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap gG <Plug>(open-url-search-google)
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-google)', 'x')
vim/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap gG <Plug>(open-url-search-google)
vim/packs-cp/opt/vim-matchup/autoload/matchup/surround.vim:  let l:tpope = !empty(maparg('<plug>VSurround', 'x'))
vim/packs-cp/opt/vim-matchup/autoload/matchup/surround.vim:    silent! call repeat#set("\<plug>(matchup-ds%)", v:count)
vim/packs-cp/opt/vim-matchup/autoload/matchup/surround.vim:    execute "normal \<plug>VSurround".l:char
vim/packs-cp/opt/vim-matchup/autoload/matchup/surround.vim:    silent! call repeat#set("\<plug>(matchup-cs%)"
vim/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-browser)`
vim/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search)`
vim/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search-so)`        " Unmapped by default
vim/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search-google)`
vim/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search-wikipedia)`
vim/packs-cp/opt/vim-matchup/autoload/matchup/matchparen.vim:  nnoremap <silent> <plug>(matchup-hi-surround)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:map('onore', '<expr> <plug>(matchup-o_'.l:opforce.')',
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:            \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:            \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-g%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:            \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-]%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:            \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-[%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:            \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-z%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:            \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-i%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:            \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-a%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:          \ '<plug>(matchup-o_'.l:opforce.')<plug>(matchup-'.a:rhs.')'
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', '%',  '<plug>(matchup-%)' )
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', 'g%', '<plug>(matchup-g%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('x', '%',  '<plug>(matchup-%)' )
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('x', 'g%', '<plug>(matchup-g%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', ']%', '<plug>(matchup-]%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', '[%', '<plug>(matchup-[%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('x', ']%', '<plug>(matchup-]%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('x', '[%', '<plug>(matchup-[%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', 'z%', '<plug>(matchup-z%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('x', 'z%', '<plug>(matchup-z%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:omap('o', '%', '<plug>(matchup-%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:omap('o', 'g%', '<plug>(matchup-g%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:map('o', ']%', '<plug>(matchup-]%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:map('o', '[%', '<plug>(matchup-[%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:map('o', 'z%', '<plug>(matchup-z%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('i', '<c-g>%', '<plug>(matchup-c_g%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('x', 'i%', '<plug>(matchup-i%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('x', 'a%', '<plug>(matchup-a%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:map('o', 'i%', '<plug>(matchup-i%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:      call s:map('o', 'a%', '<plug>(matchup-a%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', '<2-LeftMouse>', '<plug>(matchup-double-click)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', 'ds%', '<plug>(matchup-ds%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    call s:map('n', 'cs%', '<plug>(matchup-cs%)')
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <silent> <plug>(matchup-%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <silent> <plug>(matchup-g%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  xmap     <silent> <plug>(matchup-%) <sid>(matchup-%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  onoremap <silent> <plug>(matchup-%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  xmap     <silent> <plug>(matchup-g%) <sid>(matchup-g%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  onoremap <silent> <plug>(matchup-g%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <silent> <plug>(matchup-]%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <silent> <plug>(matchup-[%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  xmap     <plug>(matchup-]%) <sid>(matchup-]%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  xmap     <plug>(matchup-[%) <sid>(matchup-[%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  onoremap <silent> <plug>(matchup-]%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  onoremap <silent> <plug>(matchup-[%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <silent> <plug>(matchup-z%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  xmap     <silent> <plug>(matchup-z%) <sid>(matchup-z%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  onoremap <silent> <plug>(matchup-z%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <silent> <plug>(matchup-Z%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  xmap     <silent> <plug>(matchup-Z%) <sid>(matchup-Z%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  onoremap <silent> <plug>(matchup-Z%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  inoremap <silent> <plug>(matchup-c_g%)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    let l:p1 = 'noremap <silent> <plug>(matchup-'
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <silent> <plug>(matchup-double-click)
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:  nnoremap <plug>(matchup-reload) :<c-u>MatchupReload<cr>
vim/packs-cp/opt/vim-matchup/autoload/matchup.vim:    let l:p1 = 'noremap <silent> <plug>(matchup-'
vim/packs-cp/opt/FastFold/README.md:nmap zuz <Plug>(FastFoldUpdate)
vim/packs-cp/opt/FastFold/README.md:  `nmap <SID>(DisableFastFoldUpdate) <Plug>(FastFoldUpdate) ` to your `.vimrc`.
vim/packs-cp/opt/FastFold/README.md:  `nmap <F5> <Plug>(FastFoldUpdate)` to your `.vimrc`.
vim/packs-cp/opt/FastFold/plugin/fastfold.vim:nnoremap <silent> <Plug>(FastFoldUpdate) :<c-u>FastFoldUpdate!<CR>
vim/packs-cp/opt/FastFold/plugin/fastfold.vim:if !hasmapto('<Plug>(FastFoldUpdate)', 'n') && empty(mapcheck('zuz', 'n'))
vim/packs-cp/opt/FastFold/plugin/fastfold.vim:  nmap zuz <Plug>(FastFoldUpdate)
vim/packs-cp/opt/FastFold/doc/FastFold.txt:    nmap <F5> <Plug>(FastFoldUpdate)
vim/packs-cp/opt/FastFold/doc/FastFold.txt:    nmap <SID>(DisableFastFoldUpdate) <Plug>(FastFoldUpdate)
vim/packs-cp/opt/FastFold/doc/FastFold.txt:  nmap zuz <Plug>(FastFoldUpdate)
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:provided as a <plug>-mapping (see |using-<plug>|).  For any given map, the
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:  nmap <leader>% <plug>(matchup-z%)
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   %           |<plug>(matchup-%)|                         nx     motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   g%          |<plug>(matchup-g%)|                        nx     motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   [%          |<plug>(matchup-[%)|                        nx     motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   ]%          |<plug>(matchup-]%)|                        nx     motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   z%          |<plug>(matchup-z%)|                        nx     motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   a%          |<plug>(matchup-a%)|                        x      text_obj
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   i%          |<plug>(matchup-i%)|                        x      text_obj
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   ds%         |<plug>(matchup-ds%)|                       n      surround
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   cs%         |<plug>(matchup-cs%)|                       n      surround
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   (none)      |<plug>(matchup-hi-surround)|               n      matchparen
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   %           |<plug>(matchup-%)|                         o      motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   %           |<plug>(matchup-o_)||<plug>(matchup-%)|       o      motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   v%          |<plug>(matchup-o_v)||<plug>(matchup-%)|      o      motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   V%          |<plug>(matchup-o_V)||<plug>(matchup-%)|      o      motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:   <c-v>%      |<plug>(matchup-o_<c-v>)||<plug>(matchup-%)|  o      motion
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:                                                  *<plug>(matchup-hi-surround)*
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:  nmap <silent> <F7> <plug>(matchup-hi-surround)
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:  |<plug>(matchup-hi-surround)| but is updated each time the cursor moves.
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:    return &operatorfunc ==? matchstr(maparg('<Plug>Commentary', 'n'),
vim/packs-cp/opt/undotree/autoload/undotree.vim:        silent exec 'nmap '.map_options.i[1].' <plug>Undotree'.i[0]
vim/packs-cp/opt/undotree/autoload/undotree.vim:        silent exec 'nnoremap '.map_options.'<plug>Undotree'.i[0]
vim/packs-cp/opt/undotree/doc/undotree.txt:    nmap <buffer> J <plug>UndotreeNextState
vim/packs-cp/opt/undotree/doc/undotree.txt:    nmap <buffer> K <plug>UndotreePreviousState
vim/packs-cp/opt/undotree/doc/undotree.txt:        nmap <buffer> J <plug>UndotreeNextState
vim/packs-cp/opt/undotree/doc/undotree.txt:        nmap <buffer> K <plug>UndotreePreviousState
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeHelp
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeClose
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeFocusTarget
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeClearHistory
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeTimestampToggle
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeDiffToggle
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeNextState
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreePreviousState
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeNextSavedState
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreePreviousSavedState
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeRedo
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeUndo
vim/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeEnter
vim/packs-cp/opt/dsf.vim/README.md:If you'd like to set your own mappings, instead of using the built-ins, simply set the variable `g:dsf_no_mappings` to `1` and use the <Plug> mappings provided by the plugin:
vim/packs-cp/opt/dsf.vim/README.md:nmap dsf <Plug>DsfDelete
vim/packs-cp/opt/dsf.vim/README.md:nmap csf <Plug>DsfChange
vim/packs-cp/opt/dsf.vim/README.md:nmap dsnf <Plug>DsfNextDelete
vim/packs-cp/opt/dsf.vim/README.md:nmap csnf <Plug>DsfNextChange
vim/packs-cp/opt/dsf.vim/README.md:omap af <Plug>DsfTextObjectA
vim/packs-cp/opt/dsf.vim/README.md:xmap af <Plug>DsfTextObjectA
vim/packs-cp/opt/dsf.vim/README.md:omap if <Plug>DsfTextObjectI
vim/packs-cp/opt/dsf.vim/README.md:xmap if <Plug>DsfTextObjectI
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfDelete :call <SID>DeleteSurroundingFunctionCall()<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  silent! call repeat#set("\<Plug>DsfDelete")
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfNextDelete :call <SID>DeleteNextSurroundingFunctionCall()<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  silent! call repeat#set("\<Plug>DsfNextDelete")
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfChange :call <SID>ChangeSurroundingFunctionCall()<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfNextChange :call <SID>ChangeNextSurroundingFunctionCall()<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:onoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:xnoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:onoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:xnoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap dsf <Plug>DsfDelete
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap csf <Plug>DsfChange
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap dsnf <Plug>DsfNextDelete
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap csnf <Plug>DsfNextChange
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  omap af <Plug>DsfTextObjectA
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  xmap af <Plug>DsfTextObjectA
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  omap if <Plug>DsfTextObjectI
vim/packs-cp/opt/dsf.vim/plugin/dsf.vim:  xmap if <Plug>DsfTextObjectI
vim/packs-cp/opt/quick-scope/README.md:nmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/quick-scope/README.md:xmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:set the variable `g:dsf_no_mappings` to `1` and use the <Plug> mappings
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap dsf <Plug>DsfDelete
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap csf <Plug>DsfChange
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap dsnf <Plug>DsfNextDelete
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap csnf <Plug>DsfNextChange
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    omap af <Plug>DsfTextObjectA
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    xmap af <Plug>DsfTextObjectA
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    omap if <Plug>DsfTextObjectI
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:    xmap if <Plug>DsfTextObjectI
vim/packs-cp/opt/dsf.vim/doc/dsf.txt:mappings. You'll still have the <Plug> maps provided to you that you can map
vim/packs-cp/opt/quick-scope/plugin/quick_scope.vim:      execute printf(mapmode . ' <expr> <Plug>(QuickScope%s) quick_scope#Ready() . quick_scope#Aim("%s") . quick_scope#Reload() . quick_scope#DoubleTap()', motion, motion)
vim/packs-cp/opt/quick-scope/plugin/quick_scope.vim:    execute printf('nnoremap <silent> <Plug>(QuickScope%s) :<C-U>call quick_scope#Ready() \| execute "normal!" v:count1 . quick_scope#Aim("%s") \| call quick_scope#Reload() \| call quick_scope#DoubleTap()<CR>', motion, motion)
vim/packs-cp/opt/quick-scope/plugin/quick_scope.vim:        execute printf(mapmode . ' <unique> %s <Plug>(QuickScope%s)', motion, motion)
vim/packs-cp/opt/quick-scope/plugin/quick_scope.vim:nnoremap <silent> <plug>(QuickScopeToggle) :call quick_scope#Toggle()<cr>
vim/packs-cp/opt/quick-scope/plugin/quick_scope.vim:xnoremap <silent> <plug>(QuickScopeToggle) :<c-u>call quick_scope#Toggle()<cr>
vim/packs-cp/opt/quick-scope/doc/quick-scope.txt:                                                    *<plug>(QuickScopeToggle)*
vim/packs-cp/opt/quick-scope/doc/quick-scope.txt:  nmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/quick-scope/doc/quick-scope.txt:  xmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/quick-scope/doc/quick-scope.txt:                        - Changed highlight on keys mappings to <Plug> mappings
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim: if !hasmapto('<Plug>SaveWinPosn')
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim:  map <unique> <Leader>swp <Plug>SaveWinPosn
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim: if !hasmapto('<Plug>RestoreWinPosn')
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim:  map <unique> <Leader>rwp <Plug>RestoreWinPosn
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim:nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim:nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>
vim/packs-cp/opt/vim-subversive/README.md:nmap s <plug>(SubversiveSubstitute)
vim/packs-cp/opt/vim-subversive/README.md:nmap ss <plug>(SubversiveSubstituteLine)
vim/packs-cp/opt/vim-subversive/README.md:nmap S <plug>(SubversiveSubstituteToEndOfLine)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>cs <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader>cs <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>css <plug>(SubversiveSubstituteWordRangeConfirm)
vim/packs-cp/opt/vim-subversive/README.md:    nmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:    xmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:    nmap <leader>ss <plug>(SubversiveSubstituteWordRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>ss <plug>(SubversiveSubvertWordRange)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>ss <plug>(SubversiveSubvertWordRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:xmap s <plug>(SubversiveSubstitute)
vim/packs-cp/opt/vim-subversive/README.md:xmap p <plug>(SubversiveSubstitute)
vim/packs-cp/opt/vim-subversive/README.md:xmap P <plug>(SubversiveSubstitute)
vim/packs-cp/opt/incsearch.vim/test/incremental_next_prev.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/incremental_next_prev.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/incremental_next_prev.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/module.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/module.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/module.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/highlight.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/highlight.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/highlight.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/fold.vim:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/fold.vim:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/fold.vim:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/fold.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/fold.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/fold.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/scroll.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/scroll.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/scroll.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/cancel.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/cancel.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/cancel.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/visual_behavior.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/visual_behavior.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/visual_behavior.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/insert_register.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/insert_register.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/insert_register.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/n_and_N.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/n_and_N.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/n_and_N.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/count.vim:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/count.vim:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/count.vim:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/magic_option.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/magic_option.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/magic_option.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/question_pattern.vimspec:    map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/question_pattern.vimspec:    map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/question_pattern.vimspec:    map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/register.vim:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/register.vim:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/register.vim:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/autocmd.vimspec:    map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/autocmd.vimspec:    map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/autocmd.vimspec:    map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/history.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/history.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/history.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/repetition.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/repetition.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/repetition.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/jumplist.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/jumplist.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/jumplist.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map n  <Plug>(incsearch-nohl-n)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map N  <Plug>(incsearch-nohl-N)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map *  <Plug>(incsearch-nohl-*)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map #  <Plug>(incsearch-nohl-#)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map g* <Plug>(incsearch-nohl-g*)
vim/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map g# <Plug>(incsearch-nohl-g#)
vim/packs-cp/opt/incsearch.vim/test/lastpattern.vimspec:    map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/lastpattern.vimspec:    map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/lastpattern.vimspec:    map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/nomagic.vim:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/nomagic.vim:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/nomagic.vim:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/nomagic.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/nomagic.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/nomagic.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-forward)' , 'nvo'), "incsearch#go({'command': '/'})")
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-backward)', 'nvo'), "incsearch#go({'command': '?'})")
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-stay)'    , 'nvo'), "incsearch#go({'command': '/', 'is_stay': 1})")
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl)', 'nvo'), 'incsearch#autocmd#auto_nohlsearch(1)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl0)', 'nvo'), 'incsearch#autocmd#auto_nohlsearch(0)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-n)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-n)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-N)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-N)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-*)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-*)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-#)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-#)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-g*)', 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-g*)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-g#)', 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-g#)')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-n)' , 'nvo'), 'g:incsearch#consistent_n_direction && !v:searchforward ? ''N'' : ''n''')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-N)' , 'nvo'), 'g:incsearch#consistent_n_direction && !v:searchforward ? ''n'' : ''N''')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-*)' , 'nvo'), '*')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-#)' , 'nvo'), '#')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-g*)', 'nvo'), 'g*')
vim/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-g#)', 'nvo'), 'g#')
vim/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z/ <Plug>(incsearch-fuzzy-/)
vim/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z? <Plug>(incsearch-fuzzy-?)
vim/packs-cp/opt/incsearch-fuzzy.vim/README.md:map zg/ <Plug>(incsearch-fuzzy-stay)
vim/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z/ <Plug>(incsearch-fuzzyspell-/)
vim/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z? <Plug>(incsearch-fuzzyspell-?)
vim/packs-cp/opt/incsearch-fuzzy.vim/README.md:map zg/ <Plug>(incsearch-fuzzyspell-stay)
vim/packs-cp/opt/incsearch.vim/test/test.vimrc:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/test.vimrc:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/test.vimrc:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map *   <Plug>(asterisk-*)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map #   <Plug>(asterisk-#)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map g*  <Plug>(asterisk-g*)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map g#  <Plug>(asterisk-g#)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map z*  <Plug>(asterisk-z*)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map gz* <Plug>(asterisk-gz*)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map z#  <Plug>(asterisk-z#)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:map gz# <Plug>(asterisk-gz#)
vim/packs-cp/opt/vim-asterisk/README.md:map *   <Plug>(asterisk-*)
vim/packs-cp/opt/vim-asterisk/README.md:map #   <Plug>(asterisk-#)
vim/packs-cp/opt/vim-asterisk/README.md:map g*  <Plug>(asterisk-g*)
vim/packs-cp/opt/vim-asterisk/README.md:map g#  <Plug>(asterisk-g#)
vim/packs-cp/opt/vim-asterisk/README.md:map z*  <Plug>(asterisk-z*)
vim/packs-cp/opt/vim-asterisk/README.md:map gz* <Plug>(asterisk-gz*)
vim/packs-cp/opt/vim-asterisk/README.md:map z#  <Plug>(asterisk-z#)
vim/packs-cp/opt/vim-asterisk/README.md:map gz# <Plug>(asterisk-gz#)
vim/packs-cp/opt/vim-asterisk/README.md:map *  <Plug>(asterisk-z*)
vim/packs-cp/opt/vim-asterisk/README.md:map #  <Plug>(asterisk-z#)
vim/packs-cp/opt/vim-asterisk/README.md:map g* <Plug>(asterisk-gz*)
vim/packs-cp/opt/vim-asterisk/README.md:map g# <Plug>(asterisk-gz#)
vim/packs-cp/opt/vim-subversive/autoload/subversive/lineRangeMotion.vim:    call feedkeys("\<plug>(_SubversiveSubstituteRangeSecondary)", "mi")
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstitute) :<c-u>call subversive#singleMotion#preSubstitute(v:register, 0, '')<cr>:set opfunc=subversive#singleMotion#substituteMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubstitute) :<c-u>call subversive#singleMotion#preSubstitute(v:register, 1, visualmode())<cr><esc>`<:set opfunc=subversive#singleMotion#substituteMotion<cr>g@`>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteToEndOfLine) :<c-u>call subversive#singleMotion#substituteToEndOfLineSetup(v:register, v:count)<cr>:set opfunc=subversive#singleMotion#substituteToEndOfLine<cr>g@l
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteLine) :<c-u>call subversive#singleMotion#substituteLineSetup(v:register, v:count)<cr>:set opfunc=subversive#singleMotion#substituteLine<cr>g@l
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteRange) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 0, 0, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubstituteRange) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 0, 0, 0)<cr><esc>:call subversive#lineRangeMotion#selectTextMotion('char', 1)<cr>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteRangeDelete) :<c-u>call subversive#lineRangeMotion#preSubstitute("_", 1, 0, 0, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubstituteRangeDelete) :<c-u>call subversive#lineRangeMotion#preSubstitute("_", 1, 0, 0, 0)<cr><esc>:call subversive#lineRangeMotion#selectTextMotion('char', 1)<cr>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteWordRange) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 0, 1, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@iw
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteRangeConfirm) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 0, 0, 1)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubstituteRangeConfirm) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 0, 0, 1)<cr><esc>:call subversive#lineRangeMotion#selectTextMotion('char', 1)<cr>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteWordRangeConfirm) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 0, 1, 1)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@iw
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteRangeNoPrompt) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 0, 0, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubstituteRangeNoPrompt) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 0, 0, 0)<cr><esc>:call subversive#lineRangeMotion#selectTextMotion('char', 1)<cr>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteWordRangeNoPrompt) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 0, 1, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@iw
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteRangeNoPromptConfirm) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 0, 0, 1)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubstituteRangeNoPromptConfirm) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 0, 0, 1)<cr><esc>:call subversive#lineRangeMotion#selectTextMotion('char', 1)<cr>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubstituteWordRangeNoPromptConfirm) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 0, 1, 1)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@iw
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubvertRange) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 1, 0, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubvertRange) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 1, 0, 0)<cr><esc>:call subversive#lineRangeMotion#selectTextMotion('char', 1)<cr>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubvertWordRange) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 1, 1, 1, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@iw
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubvertRangeNoPrompt) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 1, 0, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:xnoremap <silent> <plug>(SubversiveSubvertRangeNoPrompt) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 1, 0, 0)<cr><esc>:call subversive#lineRangeMotion#selectTextMotion('char', 1)<cr>
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(SubversiveSubvertWordRangeNoPrompt) :<c-u>call subversive#lineRangeMotion#preSubstitute(v:register, 0, 1, 1, 0)<cr>:set opfunc=subversive#lineRangeMotion#selectTextMotion<cr>g@iw
vim/packs-cp/opt/vim-subversive/plugin/subversive.vim:nnoremap <silent> <plug>(_SubversiveSubstituteRangeSecondary) :<c-u>set opfunc=subversive#lineRangeMotion#selectRangeMotion<cr>g@
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-*)   asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 1, 'is_whole' : 1})
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-g*)  asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 1, 'is_whole' : 0})
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-z*)  asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 0, 'is_whole' : 1})
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-gz*) asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 0, 'is_whole' : 0})
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-#)   asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 1, 'is_whole' : 1})
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-g#)  asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 1, 'is_whole' : 0})
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-z#)  asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 0, 'is_whole' : 1})
vim/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-gz#) asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 0, 'is_whole' : 0})
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap s <plug>(SubversiveSubstitute)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap ss <plug>(SubversiveSubstituteLine)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap S <plug>(SubversiveSubstituteToEndOfLine)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>ss <plug>(SubversiveSubstituteWordRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>cr <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader>cr <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>crr <plug>(SubversiveSubstituteWordRangeConfirm)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>ss <plug>(SubversiveSubvertWordRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>ss <plug>(SubversiveSubvertWordRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap s <plug>(SubversiveSubstitute)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap p <plug>(SubversiveSubstitute)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap P <plug>(SubversiveSubstitute)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		\     'mappings' : ['<Plug>(asterisk-']
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-*)  					*<Plug>(asterisk-star)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-#)     					*<Plug>(asterisk-#)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-g*) 					*<Plug>(asterisk-gstar)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-g#)    					*<Plug>(asterisk-g#)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-z*) 					*<Plug>(asterisk-zstar)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-z#)    					*<Plug>(asterisk-z#)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-gz*) 					*<Plug>(asterisk-gzstar)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-gz#)   					*<Plug>(asterisk-gz#)*
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map *   <Plug>(asterisk-*)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map #   <Plug>(asterisk-#)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g*  <Plug>(asterisk-g*)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g#  <Plug>(asterisk-g#)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map z*  <Plug>(asterisk-z*)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map gz* <Plug>(asterisk-gz*)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map z#  <Plug>(asterisk-z#)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map gz# <Plug>(asterisk-gz#)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map *  <Plug>(asterisk-z*)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map #  <Plug>(asterisk-z#)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g* <Plug>(asterisk-gz*)
vim/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g# <Plug>(asterisk-gz#)
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzy-/) incsearch#go(<SID>config_fuzzy())
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzy-?) incsearch#go(<SID>config_fuzzy({'command': '?'}))
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzy-stay) incsearch#go(<SID>config_fuzzy({'is_stay': 1}))
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyword-/) incsearch#go(<SID>config_fuzzyword())
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyword-?) incsearch#go(<SID>config_fuzzyword({'command': '?'}))
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyword-stay) incsearch#go(<SID>config_fuzzyword({'is_stay': 1}))
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyspell-/) incsearch#go(<SID>config_fuzzyspell())
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyspell-?) incsearch#go(<SID>config_fuzzyspell({'command': '?'}))
vim/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyspell-stay) incsearch#go(<SID>config_fuzzyspell({'is_stay': 1}))
vim/packs-cp/opt/vim-go/autoload/go/debug_test.vim:    call assert_equal('<Plug>(go-debug-continue)', maparg('q', 'n', 0))
vim/packs-cp/opt/vim-go/autoload/go/debug_test.vim:    while maparg('<Plug>(go-debug-stop)') == '' && reltimefloat(reltime(l:start)) < 10
vim/packs-cp/opt/vim-go/autoload/go/debug_test.vim:    call assert_equal(':<C-U>call go#debug#Stop()<CR>', maparg('<Plug>(go-debug-stop)', 'n', 0))
vim/packs-cp/opt/vim-go/autoload/go/debug_test.vim:    call assert_equal('', maparg('<Plug>(go-debug-stop'))
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  for k in map(split(execute('nmap <Plug>(go-debug-'), "\n"), 'matchstr(v:val, "^n\\s\\+\\zs\\S\\+")')
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:    nmap <buffer> q <Plug>(go-debug-stop)
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:    nmap <buffer> q <Plug>(go-debug-stop)
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:    nmap <buffer> q <Plug>(go-debug-stop)
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-breakpoint) :<C-u>call go#debug#Breakpoint()<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-continue)   :<C-u>call go#debug#Stack('continue')<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-stop)       :<C-u>call go#debug#Stop()<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-next)       :<C-u>call go#debug#Stack('next')<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-step)       :<C-u>call go#debug#Stack('step')<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-stepout)    :<C-u>call go#debug#Stack('stepOut')<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-print)      :<C-u>call go#debug#Print(expand('<cword>'))<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:  nnoremap <silent> <Plug>(go-debug-halt)       :<C-u>call go#debug#Stack('halt')<CR>
vim/packs-cp/opt/vim-go/autoload/go/debug.vim:      let l:mapping = printf('%s %s <Plug>%s', l:mapping, l:lhs, l:arg)
vim/packs-cp/opt/vim-go/CHANGELOG.md:* Add `<Plug>(go-decls)` and `<Plug>(go-decls-dir)` mappings.
vim/packs-cp/opt/vim-go/CHANGELOG.md:* Add **:GoIfErr** command together with the `<Plug>(go-iferr)` plug key to
vim/packs-cp/opt/vim-go/CHANGELOG.md:* Add `<Plug>(go-imports)` mapping to make it assignable to other keys [[GH-878]](https://github.com/fatih/vim-go/pull/878)
vim/packs-cp/opt/vim-go/CHANGELOG.md:  terminal split modes: `<Plug>(go-run-vertical)`,  `<Plug>(go-run-split)`
vim/packs-cp/opt/vim-go/CHANGELOG.md:  and  `<Plug>(go-run-tab)`
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <silent><expr> <Plug>(incsearch-forward)  incsearch#go({'command': '/'})
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <silent><expr> <Plug>(incsearch-backward) incsearch#go({'command': '?'})
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <silent><expr> <Plug>(incsearch-stay)     incsearch#go({'command': '/', 'is_stay': 1})
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:"     e.g. `<Plug>(incsearch-nohl)n` works but `n<Plug>(incsearch-nohl)` doesn't
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(incsearch-nohl)  incsearch#autocmd#auto_nohlsearch(1)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(incsearch-nohl0) incsearch#autocmd#auto_nohlsearch(0)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(incsearch-nohl2) incsearch#autocmd#auto_nohlsearch(2)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-n)  <Plug>(incsearch-nohl)<Plug>(_incsearch-n)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-N)  <Plug>(incsearch-nohl)<Plug>(_incsearch-N)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-*)  <Plug>(incsearch-nohl)<Plug>(_incsearch-*)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-#)  <Plug>(incsearch-nohl)<Plug>(_incsearch-#)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-g*) <Plug>(incsearch-nohl)<Plug>(_incsearch-g*)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-g#) <Plug>(incsearch-nohl)<Plug>(_incsearch-g#)
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(_incsearch-n)  g:incsearch#consistent_n_direction && !v:searchforward ? 'N' : 'n'
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(_incsearch-N)  g:incsearch#consistent_n_direction && !v:searchforward ? 'n' : 'N'
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-*)  *
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-#)  #
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-g*) g*
vim/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-g#) g#
vim/packs-cp/opt/unicode.vim/CHANGELOG.md:- document [<Plug>(UnicodeGA)]
vim/packs-cp/opt/unicode.vim/CHANGELOG.md:[<Plug>(UnicodeGA)]:        https://github.com/chrisbra/unicode.vim/blob/b86ed79b7f84805c757f662e05b0e64814fdf105/doc/unicode.txt#L369-L375
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:						*<Plug>(incsearch-forward)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:						*<Plug>(incsearch-backward)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:						*<Plug>(incsearch-stay)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:		map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:		map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:		map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:    <Plug>(incsearch-forward):   Incremental searching forward
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:    <Plug>(incsearch-backward):  Incremental searching backward
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:    <Plug>(incsearch-stay):      It doesn't move the cursor unless you
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl)				*<Plug>(incsearch-nohl)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl0)				*<Plug>(incsearch-nohl0)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-n)			*<Plug>(incsearch-nohl-n)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-N)			*<Plug>(incsearch-nohl-N)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-*)			*<Plug>(incsearch-nohl-star)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-#)			*<Plug>(incsearch-nohl-#)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-g*)			*<Plug>(incsearch-nohl-gstar)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-g#)			*<Plug>(incsearch-nohl-g#)*
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map n  <Plug>(incsearch-nohl-n)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map N  <Plug>(incsearch-nohl-N)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map *  <Plug>(incsearch-nohl-*)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map #  <Plug>(incsearch-nohl-#)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g* <Plug>(incsearch-nohl-g*)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g# <Plug>(incsearch-nohl-g#)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	NOTE: |<Plug>(incsearch-nohl-n)| stuff are just aliases to
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	`<Plug>(incsearch-nohl)n` except |n| doesn't get remapped, so the
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	|<Plug>(incsearch-nohl)|.
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	Please make sure to place |<Plug>(incsearch-nohl)| before the cursor
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	moving mappings. |<Plug>(incsearch-nohl0)| handles search enhancement
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map *   <Plug>(incsearch-nohl)<Plug>(asterisk-*)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g*  <Plug>(incsearch-nohl)<Plug>(asterisk-g*)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map #   <Plug>(incsearch-nohl)<Plug>(asterisk-#)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g#  <Plug>(incsearch-nohl)<Plug>(asterisk-g#)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map z*  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map gz* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map z#  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map gz# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	|<Plug>(incsearch-backward)| which is improved motion of |?|.
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	Boolean option for stay feature |<Plug>(incsearch-stay)|.
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	2. Avoid Unneeded loading for mappings like |<Plug>(incsearch-nohl)|
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	2. Minor fix: history emulation with |<Plug>(incsearch-stay)|
vim/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    - Enable cursor moving while |<Plug>(incsearch-stay)|
vim/packs-cp/opt/limelight.vim/README.md:You can invoke `:Limelight` for a visual range. There are also `<Plug>`
vim/packs-cp/opt/limelight.vim/README.md:nmap <Leader>l <Plug>(Limelight)
vim/packs-cp/opt/limelight.vim/README.md:xmap <Leader>l <Plug>(Limelight)
vim/packs-cp/opt/vim-go/ftplugin/godoc/mappings.vim:nnoremap <silent> <Plug>(go-doc) :<C-u>call go#doc#Open("new", "split")<CR>
vim/packs-cp/opt/vim-go/ftplugin/godoc/mappings.vim:nnoremap <silent> <Plug>(go-doc-tab) :<C-u>call go#doc#Open("tabnew", "tabe")<CR>
vim/packs-cp/opt/vim-go/ftplugin/godoc/mappings.vim:nnoremap <silent> <Plug>(go-doc-vertical) :<C-u>call go#doc#Open("vnew", "vsplit")<CR>
vim/packs-cp/opt/vim-go/ftplugin/godoc/mappings.vim:nnoremap <silent> <Plug>(go-doc-split) :<C-u>call go#doc#Open("new", "split")<CR>
vim/packs-cp/opt/vim-go/ftplugin/godoc/mappings.vim:nnoremap <silent> <Plug>(go-doc-browser) :<C-u>call go#doc#OpenBrowser()<CR>
vim/packs-cp/opt/limelight.vim/plugin/limelight.vim:nnoremap <silent> <Plug>(Limelight) :set opfunc=limelight#operator<CR>g@
vim/packs-cp/opt/limelight.vim/plugin/limelight.vim:xnoremap <silent> <Plug>(Limelight) :Limelight<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:nnoremap <unique><script><silent> <Plug>(MakeDigraph)	    :set opfunc=unicode#GetDigraph<CR>g@
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:vnoremap <unique><script><silent> <Plug>(MakeDigraph)	    :<C-U>call unicode#GetDigraph(visualmode(), 1)<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:nnoremap <unique><script><silent> <Plug>(UnicodeGA)	    :<C-U>UnicodeName<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:inoremap <unique><script><silent> <Plug>(DigraphComplete)   <C-R>=unicode#CompleteDigraph()<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:inoremap <unique><script><silent> <Plug>(UnicodeComplete)   <C-R>=unicode#CompleteUnicode()<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:inoremap <unique><script><silent> <Plug>(HTMLEntityComplete)   <C-R>=unicode#CompleteHTMLEntity()<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:inoremap <unique><script><silent> <Plug>(UnicodeFuzzy) <C-\><C-O>:call unicode#Fuzzy()<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:nnoremap <unique><script><silent> <Plug>(UnicodeSwapCompleteName) :<C-U>call <sid>ToggleUnicodeCompletion()<CR>
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:    if !hasmapto('<Plug>(MakeDigraph)', 'n') && maparg('<f4>', 'n') ==# ''
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:        nmap <F4> <Plug>(MakeDigraph)
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:    if !hasmapto('<Plug>(MakeDigraph)', 'v') && maparg('<f4>', 'v') ==# ''
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:        vmap <F4> <Plug>(MakeDigraph)
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:    if !hasmapto('<Plug>(DigraphComplete)', 'i') && maparg('<c-x><c-g>', 'i') ==# ''
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:        imap <C-X><C-G> <Plug>(DigraphComplete)
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:    if !hasmapto('<Plug>(UnicodeComplete)', 'i') && maparg('<c-x><c-z>', 'i') ==# ''
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:        imap <C-X><C-Z> <Plug>(UnicodeComplete)
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:    if !hasmapto('<Plug>(HTMLEntityComplete)', 'i') && maparg('<c-x><c-b>', 'i') ==# ''
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:        imap <C-X><C-B> <Plug>(HTMLEntityComplete)
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:    if !hasmapto('<Plug>(UnicodeFuzzy)', 'i') && maparg('<c-g><c-f>', 'i') ==# ''
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:        imap <C-G><C-F> <Plug>(UnicodeFuzzy)
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:    if !hasmapto('<Plug>(UnicodeSwapCompleteName)', 'n') && maparg('<leader>un', 'n') ==# ''
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:        nmap <leader>un <Plug>(UnicodeSwapCompleteName)
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:"    if !hasmapto('<Plug>(UnicodeGA)')
vim/packs-cp/opt/unicode.vim/plugin/unicode.vim:"        nmap ga <Plug>(UnicodeGA)
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-run) :<C-u>call go#cmd#Run(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:  nnoremap <silent> <Plug>(go-run-vertical) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'vsplit', [])<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:  nnoremap <silent> <Plug>(go-run-split) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'split', [])<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:  nnoremap <silent> <Plug>(go-run-tab) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'tabe', [])<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-build) :<C-u>call go#cmd#Build(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-generate) :<C-u>call go#cmd#Generate(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-install) :<C-u>call go#cmd#Install(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-test) :<C-u>call go#test#Test(!g:go_jump_to_error, 0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-test-func) :<C-u>call go#test#Func(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-test-compile) :<C-u>call go#test#Test(!g:go_jump_to_error, 1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-test-file) :<C-u>call go#test#File(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-coverage) :<C-u>call go#coverage#Buffer(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-coverage-clear) :<C-u>call go#coverage#Clear()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-coverage-toggle) :<C-u>call go#coverage#BufferToggle(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-coverage-browser) :<C-u>call go#coverage#Browser(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-files) :<C-u>call go#tool#Files()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-deps) :<C-u>call go#tool#Deps()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-info) :<C-u>call go#tool#Info(1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-import) :<C-u>call go#import#SwitchImport(1, '', expand('<cword>'), '')<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-imports) :<C-u>call go#fmt#Format(1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-fmt) :<C-u>call go#fmt#Format(0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-implements) :<C-u>call go#implements#Implements(-1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-referrers) :<C-u>call go#referrers#Referrers(-1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-sameids) :<C-u>call go#sameids#SameIds(1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-sameids-toggle) :<C-u>call go#sameids#ToggleSameIds()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-rename) :<C-u>call go#rename#Rename(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-decls) :<C-u>call go#decls#Decls(0, '')<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-decls-dir) :<C-u>call go#decls#Decls(1, '')<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def) :<C-u>call go#def#Jump('', 0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-vertical) :<C-u>call go#def#Jump("vsplit", 0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-split) :<C-u>call go#def#Jump("split", 0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-tab) :<C-u>call go#def#Jump("tab", 0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-type) :<C-u>call go#def#Jump('', 1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-type-vertical) :<C-u>call go#def#Jump("vsplit", 1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-type-split) :<C-u>call go#def#Jump("split", 1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-type-tab) :<C-u>call go#def#Jump("tab", 1)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-pop) :<C-u>call go#def#StackPop()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-stack) :<C-u>call go#def#Stack()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-def-stack-clear) :<C-u>call go#def#StackClear()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-doc) :<C-u>call go#doc#Open("new", "split")<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-doc-tab) :<C-u>call go#doc#Open("tabnew", "tabe")<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-doc-vertical) :<C-u>call go#doc#Open("vnew", "vsplit")<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-doc-split) :<C-u>call go#doc#Open("new", "split")<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-doc-browser) :<C-u>call go#doc#OpenBrowser()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-metalinter) :<C-u>call go#lint#Gometa(!g:go_jump_to_error, 0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-lint) :<C-u>call go#lint#Golint(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-vet) :<C-u>call go#lint#Vet(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-alternate-edit) :<C-u>call go#alternate#Switch(0, "edit")<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-alternate-vertical) :<C-u>call go#alternate#Switch(0, "vsplit")<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-alternate-split) :<C-u>call go#alternate#Switch(0, "split")<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-iferr) :<C-u>call go#iferr#Generate()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-if-err) :<C-u>call go#iferr#Generate()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-diagnostics) :<C-u>call go#lint#Diagnostics(!g:go_jump_to_error)<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:nnoremap <silent> <Plug>(go-fill-struct) :<C-u>call go#fillstruct#FillStruct()<CR>
vim/packs-cp/opt/vim-go/ftplugin/go/mappings.vim:xnoremap <silent> <Plug>(go-extract) :<C-u>call go#extract#Extract(0)<CR>
vim/packs-cp/opt/vim-go/ftplugin/gomod/mappings.vim:nnoremap <silent> <Plug>(go-mod-fmt) :<C-u>call go#mod#Format()<CR>
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:<F4>		Normal/Visual   Generate Digraph from chars |<Plug>(MakeDigraph)|
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:                                                        *<Plug>(MakeDigraph)*
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:    nmap <f2> <Plug>(MakeDigraph)
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:                                                        *<Plug>(UnicodeGA)*
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:    nmap ga <Plug>(UnicodeGA)
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:					*<Plug>(UnicodeSwapCompleteName)*
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:unicode names. Use the <Plug>(UnicodeSwapCompleteName) to toggle between both
vim/packs-cp/opt/unicode.vim/doc/unicode.txt:					               *<Plug>(UnicodeFuzzy)*
vim/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>Dsurround".char,scount)
vim/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>C".(a:0 > 2 && a:3 ? "S" : "s")."urround".char.newchar.s:input,scount)
vim/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>Y".(a:0 && a:1 ? "S" : "s")."surround".char.s:input,a:type)
vim/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>SurroundRepeat".char.s:input)
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>SurroundRepeat .
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')
vim/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')
vim/packs-cp/opt/vim-surround/plugin/surround.vim:vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>
vim/packs-cp/opt/vim-surround/plugin/surround.vim:vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>
vim/packs-cp/opt/vim-surround/plugin/surround.vim:inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>
vim/packs-cp/opt/vim-surround/plugin/surround.vim:inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ds  <Plug>Dsurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap cs  <Plug>Csurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap cS  <Plug>CSurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ys  <Plug>Ysurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap yS  <Plug>YSurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap yss <Plug>Yssurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ySs <Plug>YSsurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ySS <Plug>YSsurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  xmap S   <Plug>VSurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:  xmap gS  <Plug>VgSurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:    if !hasmapto("<Plug>Isurround","i") && "" == mapcheck("<C-S>","i")
vim/packs-cp/opt/vim-surround/plugin/surround.vim:      imap    <C-S> <Plug>Isurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:    imap      <C-G>s <Plug>Isurround
vim/packs-cp/opt/vim-surround/plugin/surround.vim:    imap      <C-G>S <Plug>ISurround
vim/packs-cp/opt/vim-go/doc/vim-go.txt:vim-go has several <Plug> keys which can be used to create custom mappings
vim/packs-cp/opt/vim-go/doc/vim-go.txt:  au FileType go nmap <leader>r <Plug>(go-run)
vim/packs-cp/opt/vim-go/doc/vim-go.txt:documentation in the |go-commands| section. Available <Plug> keys are:
vim/packs-cp/opt/vim-go/doc/vim-go.txt: au FileType go nmap <leader>rt <Plug>(go-run-tab)
vim/packs-cp/opt/vim-go/doc/vim-go.txt: au FileType go nmap <leader>rs <Plug>(go-run-split)
vim/packs-cp/opt/vim-go/doc/vim-go.txt: au FileType go nmap <leader>rv <Plug>(go-run-vertical)
vim/packs-cp/opt/incsearch.vim/README.md:map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/README.md:map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/README.md:map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/README.md:`<Plug>(incsearch-stay)` doesn't move the cursor.
vim/packs-cp/opt/incsearch.vim/README.md:map n  <Plug>(incsearch-nohl-n)
vim/packs-cp/opt/incsearch.vim/README.md:map N  <Plug>(incsearch-nohl-N)
vim/packs-cp/opt/incsearch.vim/README.md:map *  <Plug>(incsearch-nohl-*)
vim/packs-cp/opt/incsearch.vim/README.md:map #  <Plug>(incsearch-nohl-#)
vim/packs-cp/opt/incsearch.vim/README.md:map g* <Plug>(incsearch-nohl-g*)
vim/packs-cp/opt/incsearch.vim/README.md:map g# <Plug>(incsearch-nohl-g#)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  " nmap <leader>A <Plug>(EasyAlignOperator)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <Enter>         <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader><Enter> <Plug>(LiveEasyAlign)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  nmap <leader>A       <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader>.       <Plug>(EasyAlignRepeat)
vim/packs-cp/opt/vim-easy-align/test/fixed.vader:* #51 Repeat of visual <Plug>(LiveEasyAlign) broken
vim/packs-cp/opt/vim-easy-align/test/fixed.vader:Do (#51/#52 <Plug>(EasyAlignRepeat) in visual mode):
vim/packs-cp/opt/vim-easy-align/README.md:xmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/README.md:nmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/README.md:#### 1. `<Plug>` mappings (interactive mode)
vim/packs-cp/opt/vim-easy-align/README.md:The recommended method is to use `<Plug>(EasyAlign)` mapping in normal and
vim/packs-cp/opt/vim-easy-align/README.md:nmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/README.md:xmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/README.md:Interactive mode is started either with `<Plug>(EasyAlign)` mapping or with
vim/packs-cp/opt/vim-easy-align/README.md:Live interactive mode can be started with either `<Plug>(LiveEasyAlign)` map
vim/packs-cp/opt/incsearch.vim/autoload/vital/_incsearch/Over/Commandline/Modules/Execute.vim:	let map = printf("<Plug>(%s)", a:name)
vim/packs-cp/opt/incsearch.vim/autoload/vital/_incsearch/Over/Commandline/Modules/Execute.vim:	call feedkeys(printf("\<Plug>(%s)", a:name))
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:  silent! call repeat#set("\<Plug>(EasyAlignRepeat)")
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(EasyAlign) :set opfunc=<SID>easy_align_op<Enter>g@
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:vnoremap <silent> <Plug>(EasyAlign) :<C-U>call <SID>easy_align_op(visualmode(), 1)<Enter>
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(LiveEasyAlign) :set opfunc=<SID>live_easy_align_op<Enter>g@
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:vnoremap <silent> <Plug>(LiveEasyAlign) :<C-U>call <SID>live_easy_align_op(visualmode(), 1)<Enter>
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(EasyAlignRepeat) :call <SID>easy_align_repeat()<Enter>
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:vnoremap <silent> <Plug>(EasyAlignRepeat) :<C-U>call <SID>repeat_in_visual()<Enter>
vim/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(EasyAlignOperator) :set opfunc=<SID>easy_align_op<Enter>g@
vim/packs-cp/opt/vim-easy-align/EXAMPLES.md:xmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/EXAMPLES.md:nmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:        1. Using <Plug> mappings                            |easy-align-5-2-1|
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:                                                             *<Plug>(EasyAlign)*
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    vmap <Enter> <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    nmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:1. Using <Plug> mappings~
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:The recommended method is to use <Plug> mappings as described earlier.
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:                                                         *<Plug>(LiveEasyAlign)*
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(EasyAlign)     | normal | Start interactive mode for a motion/text object
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(EasyAlign)     | visual | Start interactive mode for the selection
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(LiveEasyAlign) | normal | Start live-interactive mode for a motion/text object
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(LiveEasyAlign) | visual | Start live-interactive mode for the selection
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:The following sections will assume that you have <Plug>(EasyAlign) mappings in
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    vmap <Enter> <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    nmap ga <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/doc/easy_align.txt:Live interactive mode can be started with either <Plug>(LiveEasyAlign) map or
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:"   :noremap <silent><expr> <Plug>(incsearch-forward)  incsearch#go({'command': '/'})
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:"" To handle recursive mapping, map command to <Plug>(_incsearch-dotrepeat)
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:  execute 'noremap' '<Plug>(_incsearch-dotrepeat)' a:cmd
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:  silent! call repeat#set("\<Plug>(_incsearch-dotrepeat)")
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-winrestview) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-winrestview) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent> <Plug>(_incsearch-winrestview) :<C-u>call winrestview(g:incsearch#_view)<CR>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent> <Plug>(_incsearch-winrestview) :<C-u>call winrestview(g:incsearch#_view)<CR>gv
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    call feedkeys("\<Plug>(_incsearch-winrestview)", 'm')
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:      call feedkeys("\<Plug>(_incsearch-searchforward)", 'm')
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   (s:U.is_visual(m) ? "\<Plug>(_incsearch-esc)" : ''),
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   "\<Plug>(_incsearch-hlsearch)",
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   "\<Plug>(_incsearch-searchforward)",
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   (s:U.is_visual(m) ? "\<Plug>(_incsearch-gv)" : '')
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-gv) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-gv) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent> <Plug>(_incsearch-gv) gv
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-esc) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-esc) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent> <Plug>(_incsearch-esc) <Esc>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-hlsearch) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-hlsearch) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent> <Plug>(_incsearch-hlsearch) :<C-u>let &hlsearch=&hlsearch<CR>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent> <Plug>(_incsearch-hlsearch) :<C-u>let &hlsearch=&hlsearch<CR>gv
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent>       <Plug>(_incsearch-searchforward) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent>       <Plug>(_incsearch-searchforward) <Nop>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent><expr> <Plug>(_incsearch-searchforward) <SID>_searchforward_cmd()
vim/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent><expr> <Plug>(_incsearch-searchforward) <SID>_searchforward_cmd()
vim/packs-cp/opt/incsearch.vim/test/error_warning_emulation.vim:  map /  <Plug>(incsearch-forward)
vim/packs-cp/opt/incsearch.vim/test/error_warning_emulation.vim:  map ?  <Plug>(incsearch-backward)
vim/packs-cp/opt/incsearch.vim/test/error_warning_emulation.vim:  map g/ <Plug>(incsearch-stay)
vim/packs-cp/opt/incsearch.vim/autoload/incsearch/util.vim:  let map = printf('<Plug>(%s)', name)
vim/packs-cp/opt/incsearch.vim/autoload/incsearch/util.vim:    call feedkeys(printf("\<Plug>(%s)", name))
vim/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:noremap  <silent><expr> <Plug>(_incsearch-nohlsearch) incsearch#autocmd#auto_nohlsearch(0)
vim/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:noremap! <silent><expr> <Plug>(_incsearch-nohlsearch) incsearch#autocmd#auto_nohlsearch(0)
vim/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:nnoremap <silent>       <Plug>(_incsearch-nohlsearch) :<C-u>nohlsearch<CR>
vim/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:xnoremap <silent>       <Plug>(_incsearch-nohlsearch) :<C-u>nohlsearch<CR>gv
vim/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:    \ , 'call feedkeys("\<Plug>(_incsearch-nohlsearch)", "m")'
vim/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
vim/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
vim/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
vim/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
vim/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <expr> <Plug>(fern-quit-or-close-preview) fern_preview#smart_preview("\<Plug>(fern-action-preview:close)", ":q\<CR>")
vim/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> q <Plug>(fern-quit-or-close-preview)
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:open)   :<C-u>call fern_preview#open()<CR>
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:close)  :<C-u>call fern_preview#close()<CR>
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:toggle) :<C-u>call fern_preview#toggle()<CR>
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:enable)  :<C-u>call fern_preview#enable_auto_preview()<CR>
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:disable) :<C-u>call fern_preview#disable_auto_preview()<CR>
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:toggle)  :<C-u>call fern_preview#toggle_auto_preview()<CR>
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:scroll:down:half) :<C-u>call fern_preview#half_down()<CR>
vim/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:scroll:up:half)   :<C-u>call fern_preview#half_up()<CR>
vim/packs-cp/opt/incsearch.vim/autoload/vital/_incsearch/Over/String.vim:	return s:_split_keystring(a:str, "\\%(\<Plug>\\|<Over>\\)(.\\{-})\\zs\\|")
vim/packs-unix/opt/vim-picker/README.md:vim-picker defines the following [`<Plug>`][plug-mappings] mappings:
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerEdit)`: Execute `:PickerEdit`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerSplit)`: Execute `:PickerSplit`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerTabedit)`: Execute `:PickerTabedit`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerTabdrop)`: Execute `:PickerTabdrop`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerVsplit)`: Execute `:PickerVsplit`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBuffer)`: Execute `:PickerBuffer`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBufferSplit)`: Execute `:PickerBufferSplit`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBufferVsplit)`: Execute `:PickerBufferVsplit`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerTag)`: Execute `:PickerTag`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerStag)`: Execute `:PickerStag`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBufferTag)`: Execute `:PickerBufferTag`.
vim/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerHelp)`: Execute `:PickerHelp`.
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pe <Plug>(PickerEdit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ps <Plug>(PickerSplit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pt <Plug>(PickerTabedit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pd <Plug>(PickerTabdrop)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pv <Plug>(PickerVsplit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pb <Plug>(PickerBuffer)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>p] <Plug>(PickerTag)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pw <Plug>(PickerStag)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>po <Plug>(PickerBufferTag)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ph <Plug>(PickerHelp)
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerEdit) :PickerEdit<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerSplit) :PickerSplit<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerTabedit) :PickerTabedit<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerTabdrop) :PickerTabdrop<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerVsplit) :PickerVsplit<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBuffer) :PickerBuffer<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBufferSplit) :PickerBufferSplit<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBufferVsplit) :PickerBufferVsplit<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerTag) :PickerTag<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerStag) :PickerStag<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBufferTag) :PickerBufferTag<CR>
vim/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerHelp) :PickerHelp<CR>
vim/packs-unix/opt/vim-picker/doc/picker.txt:vim-picker provides the following |<Plug>| mappings:
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerEdit)                  Execute :PickerEdit
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerSplit)                 Execute :PickerSplit
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerTabedit)               Execute :PickerTabedit
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerVsplit)                Execute :PickerVsplit
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBuffer)                Execute :PickerBuffer
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBufferSplit)           Execute :PickerBufferSplit
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBufferVsplit)          Execute :PickerBufferVsplit
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerTag)                   Execute :PickerTag
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerStag)                  Execute :PickerStag
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBufferTag)             Execute :PickerBufferTag
vim/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerHelp)                  Execute :PickerHelp
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillAlt         :call <SID>GotoBuffer('#', '')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangAlt     :call <SID>GotoBuffer('#', '!')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBack        :call <SID>GotoBuffer('bufback', '')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBack    :call <SID>GotoBuffer('bufback', '!')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillForward     :call <SID>GotoBuffer('bufforward', '')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangForward :call <SID>GotoBuffer('bufforward', '!')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBun         :call <SID>BufKill('bun', '')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBun     :call <SID>BufKill('bun', '!')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBd          :call <SID>BufKill('bd', '')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBd      :call <SID>BufKill('bd', '!')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBw          :call <SID>BufKill('bw', '')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBw      :call <SID>BufKill('bw', '!')<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillUndo        :call <SID>UndoKill()<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bb',   '<Plug>BufKillBack')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bf',   '<Plug>BufKillForward')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bun',  '<Plug>BufKillBun')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bun', '<Plug>BufKillBangBun')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bd',   '<Plug>BufKillBd')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bd',  '<Plug>BufKillBangBd')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bw',   '<Plug>BufKillBw')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bw',  '<Plug>BufKillBangBw')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bundo','<Plug>BufKillUndo')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>ba',   '<Plug>BufKillAlt')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:    call <SID>CreateUniqueMapping('<C-^>', '<Plug>BufKillAlt', 'AllowDuplicate')
vim/packs-unix/opt/Colorizer/Colorizer.vmb:nnoremap <Plug>Colorizer        :<C-U>ColorToggle<CR>
vim/packs-unix/opt/Colorizer/Colorizer.vmb:xnoremap <Plug>Colorizer        :ColorHighlight<CR>
vim/packs-unix/opt/Colorizer/Colorizer.vmb:nnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
vim/packs-unix/opt/Colorizer/Colorizer.vmb:xnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
vim/packs-unix/opt/Colorizer/Colorizer.vmb:nnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
vim/packs-unix/opt/Colorizer/Colorizer.vmb:xnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
vim/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
vim/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
vim/packs-cp/opt/vis/plugin/cecutil.vim:if !hasmapto('<Plug>SaveWinPosn')
vim/packs-cp/opt/vis/plugin/cecutil.vim: map <unique> <Leader>swp <Plug>SaveWinPosn
vim/packs-cp/opt/vis/plugin/cecutil.vim:if !hasmapto('<Plug>RestoreWinPosn')
vim/packs-cp/opt/vis/plugin/cecutil.vim: map <unique> <Leader>rwp <Plug>RestoreWinPosn
vim/packs-cp/opt/vis/plugin/cecutil.vim:nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>
vim/packs-cp/opt/vis/plugin/cecutil.vim:nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:nnoremap <Plug>Colorizer        :<C-U>ColorToggle<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:xnoremap <Plug>Colorizer        :ColorHighlight<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:nnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:xnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:nnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:xnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
vim/plugin/pluginsVim.vim:  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
vim/plugin/pluginsVim.vim:  nmap <silent> <buffer> <c-d> <Plug>(fern-action-preview:scroll:down:half)
vim/plugin/pluginsVim.vim:  nmap <silent> <buffer> <c-u> <Plug>(fern-action-preview:scroll:up:half)
vim/plugin/pluginsVim.vim:  nmap <unique> <leader>pe <Plug>(PickerEdit)
vim/plugin/pluginsVim.vim:  nmap <unique> <leader>pb <Plug>(PickerBuffer)
vim/plugin/plugins.vim:nnoremap <F6> :execute "normal \<Plug>(openbrowser-smart-search)"<bar>silent !nsBt<CR>
vim/plugin/plugins.vim:vmap <F6> <Plug>(openbrowser-smart-search)
vim/plugin/plugins.vim:nmap gA <Plug>(EasyAlign)
vim/plugin/plugins.vim:xmap gA <Plug>(EasyAlign)
vim/plugin/plugins.vim:xmap <c-down> <Plug>(textmanip-move-down)
vim/plugin/plugins.vim:xmap <c-up> <Plug>(textmanip-move-up)
vim/plugin/plugins.vim:xmap <c-left> <Plug>(textmanip-move-left)
vim/plugin/plugins.vim:xmap <c-right> <Plug>(textmanip-move-right)
vim/plugin/plugins.vim:map g/ <Plug>(incsearch-stay)
vim/plugin/plugins.vim:map z/ <Plug>(incsearch-fuzzy-stay)
vim/plugin/plugins.vim:map *  <Plug>(asterisk-*)
vim/plugin/plugins.vim:map #  <Plug>(asterisk-#)
vim/plugin/plugins.vim:map g* <Plug>(asterisk-g*)  " rg --no-ignore ' g\* '
vim/plugin/plugins.vim:map g# <Plug>(asterisk-g#)  " rg --no-ignore ' g# '
vim/plugin/plugins.vim:map z* <Plug>(asterisk-z*)  " rg --no-ignore ' z\* '
vim/plugin/plugins.vim:map z# <Plug>(asterisk-z#)  " rg --no-ignore ' z# '
vim/plugin/plugins.vim:map  <Leader><Leader>f <Plug>(easymotion-bd-f)
vim/plugin/plugins.vim:nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)
vim/plugin/plugins.vim:map  <Leader><Leader>w <Plug>(easymotion-bd-w)
vim/plugin/plugins.vim:nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
vim/plugin/plugins.vim:autocmd VimEnter * nmap s <Plug>(easymotion-overwin-f2)
vim/plugin/plugins.vim:        map / <Plug>(easymotion-sn)
vim/plugin/plugins.vim:        map n <Plug>(easymotion-next)
vim/plugin/plugins.vim:        map N <Plug>(easymotion-prev)
vim/plugin/plugins.vim:nmap <leader><leader>m <Plug>MarkSet
vim/plugin/plugins.vim:nmap <leader><leader>n <Plug>MarkClear
vim/plugin/plugins.vim:nmap S <plug>(SubversiveSubstituteRange)
vim/plugin/plugins.vim:nmap <leader>s <plug>(SubversiveSubstituteRangeConfirm)
vim/plugin/plugins.vim:  silent! exe 'g/<Plug>/d'
vim/packs-cp/opt/vim-peekaboo/autoload/peekaboo.vim:  return "\<Plug>(peekaboo)"
vim/packs-cp/opt/vim-peekaboo/plugin/peekaboo.vim:nnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
vim/packs-cp/opt/vim-peekaboo/plugin/peekaboo.vim:xnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
vim/packs-cp/opt/vim-peekaboo/plugin/peekaboo.vim:inoremap <silent> <Plug>(peekaboo) <c-\><c-o>:<c-u>call peekaboo#aboo()<cr>
vim/packs-cp/opt/vim-characterize/plugin/characterize.vim:nnoremap <silent><script> <Plug>(characterize) :<C-U>Characterize<CR>
vim/packs-cp/opt/vim-characterize/plugin/characterize.vim:if !hasmapto('<Plug>(characterize)', 'n') && mapcheck('ga', 'n') ==# ''
vim/packs-cp/opt/vim-characterize/plugin/characterize.vim:  nmap ga <Plug>(characterize)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:  |vimtex#syntax#in_mathzone| and text objects like |<plug>(vimtex-i$)|. This
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   |:VimtexReload| and |<plug>(vimtex-reload)| (by default mapped to
vim/packs-cp/opt/vimtex/doc/vimtex.txt:The right-hand sides are provided as <plug>-mappings, see |using-<plug>|. For
vim/packs-cp/opt/vimtex/doc/vimtex.txt:any given <plug> map, the default mapping will only be created if it does not
vim/packs-cp/opt/vimtex/doc/vimtex.txt:  nmap <space>li <plug>(vimtex-info)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:then be defined through the listed RHS <plug>-maps or by mapping the available
vim/packs-cp/opt/vimtex/doc/vimtex.txt:corresponding <plug>-maps, and MODE indicates in which vim mode the mappings
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>li  |<plug>(vimtex-info)|                           `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lI  |<plug>(vimtex-info-full)|                      `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lt  |<plug>(vimtex-toc-open)|                       `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lT  |<plug>(vimtex-toc-toggle)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lq  |<plug>(vimtex-log)|                            `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lv  |<plug>(vimtex-view)|                           `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lr  |<plug>(vimtex-reverse-search)|                 `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>ll  |<plug>(vimtex-compile)|                        `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lL  |<plug>(vimtex-compile-selected)|               `nx`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lk  |<plug>(vimtex-stop)|                           `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lK  |<plug>(vimtex-stop-all)|                       `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>le  |<plug>(vimtex-errors)|                         `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lo  |<plug>(vimtex-compile-output)|                 `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lg  |<plug>(vimtex-status)|                         `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lG  |<plug>(vimtex-status-all)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lc  |<plug>(vimtex-clean)|                          `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lC  |<plug>(vimtex-clean-full)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lm  |<plug>(vimtex-imaps-list)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lx  |<plug>(vimtex-reload)|                         `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>lX  |<plug>(vimtex-reload-state)|                   `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>ls  |<plug>(vimtex-toggle-main)|                    `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <localleader>la  |<plug>(vimtex-context-menu)|                   `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   dse              |<plug>(vimtex-env-delete)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   dsc              |<plug>(vimtex-cmd-delete)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ds$              |<plug>(vimtex-env-delete-math)|                `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   dsd              |<plug>(vimtex-delim-delete)|                   `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   cse              |<plug>(vimtex-env-change)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   csc              |<plug>(vimtex-cmd-change)|                     `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   cs$              |<plug>(vimtex-env-change-math)|                `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   csd              |<plug>(vimtex-delim-change-math)|              `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   tsf              |<plug>(vimtex-cmd-toggle-frac)|                `nx`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   tsc              |<plug>(vimtex-cmd-toggle-star)|                `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   tse              |<plug>(vimtex-env-toggle-star)|                `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ts$              |<plug>(vimtex-env-toggle-math)|                `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F6>             |<plug>(vimtex-env-surround-line)|              `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                    |<plug>(vimtex-env-surround-operator)|          `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F6>             |<plug>(vimtex-env-surround-visual)|            `x`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   tsd              |<plug>(vimtex-delim-toggle-modifier)|          `nx`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   tsD              |<plug>(vimtex-delim-toggle-modifier-reverse)|  `nx`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F7>             |<plug>(vimtex-cmd-create)|                     `nxi`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]]               |<plug>(vimtex-delim-close)|                    `i`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   <F8>             |<plug>(vimtex-delim-add-modifiers)|            `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ac               |<plug>(vimtex-ac)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ic               |<plug>(vimtex-ic)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ad               |<plug>(vimtex-ad)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   id               |<plug>(vimtex-id)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ae               |<plug>(vimtex-ae)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ie               |<plug>(vimtex-ie)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   a$               |<plug>(vimtex-a$)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   i$               |<plug>(vimtex-i$)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   aP               |<plug>(vimtex-aP)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   iP               |<plug>(vimtex-iP)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   am               |<plug>(vimtex-am)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   im               |<plug>(vimtex-im)|                             `xo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   %                |<plug>(vimtex-%)|                              `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]]               |<plug>(vimtex-]])|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ][               |<plug>(vimtex-][)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   []               |<plug>(vimtex-[])|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [[               |<plug>(vimtex-[[)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]m               |<plug>(vimtex-]m)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]M               |<plug>(vimtex-]M)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [m               |<plug>(vimtex-[m)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [M               |<plug>(vimtex-[M)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]n               |<plug>(vimtex-]n)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]N               |<plug>(vimtex-]N)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [n               |<plug>(vimtex-[n)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [N               |<plug>(vimtex-[N)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]r               |<plug>(vimtex-]r)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]R               |<plug>(vimtex-]R)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [r               |<plug>(vimtex-[r)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [R               |<plug>(vimtex-[R)|                             `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]/               |<plug>(vimtex-]/|                              `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   ]*               |<plug>(vimtex-]star|                           `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [/               |<plug>(vimtex-[/|                              `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   [*               |<plug>(vimtex-[star|                           `nxo`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   K                |<plug>(vimtex-doc-package)|                    `n`
vim/packs-cp/opt/vimtex/doc/vimtex.txt:      specify to keep these files, |:VimtexClean| and |<plug>(vimtex-clean)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:        |<plug>(vimtex-ac)| text object (|vimtex-text-objects|).
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    |<plug>(vimtex-delim-toggle-modifier)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    |<plug>(vimtex-delim-toggle-modifier-reverse)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    |<plug>(vimtex-env-change)|        (default map: `cse`)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    |<plug>(vimtex-env-change-math)|   (default map: `cs$`)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    |<plug>(vimtex-cmd-change)|        (default map: `csc`)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    |<plug>(vimtex-delim-change-math)| (default map: `csd`)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:  |<plug>(vimtex-env-change)| and |<plug>(vimtex-env-change-math)|. Some users
vim/packs-cp/opt/vimtex/doc/vimtex.txt:  Specify toggle map for |<plug>(vimtex-env-toggle-math)|. You can use this to
vim/packs-cp/opt/vimtex/doc/vimtex.txt:  Specify rules for toggling fractions with |<plug>(vimtex-cmd-toggle-frac)|,
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    input:    Input dialogues (e.g. for |<plug>(vimtex-cmd-change)|)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-context-menu)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-info)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-info-full)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-doc-package)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-toc-open)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-toc-toggle)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-log)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-compile)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-compile-ss)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-compile-selected)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-compile-output)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-stop)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-stop-all)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-status)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-status-all)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-clean)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-clean-full)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-errors)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-view)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-reload)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-reload-state)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-imaps-list)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:                                             *<plug>(vimtex-toggle-main)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-delete)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-delete-math)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-change)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-change-math)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-cmd-delete)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-cmd-delete-math)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-cmd-change)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-delim-delete)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-delim-change-math)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-cmd-toggle-frac)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-cmd-toggle-star)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-toggle-star)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-toggle-math)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-surround-line)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-surround-operator)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-env-surround-visual)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-delim-toggle-modifier)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-delim-toggle-modifier-reverse)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-cmd-create)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:      imap <buffer> <f7> <plug>(vimtex-cmd-create)}<left>
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-delim-close)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-delim-add-modifiers)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-reverse-search)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-ac)*   Commands
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-ic)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-ad)*   Delimiters
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-id)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-ae)*   Environments (except top-level `document`)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-ie)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-a$)*   Math environments
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-i$)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-aP)*   Sections
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-iP)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-am)*   Items
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-im)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-%)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]])*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-][)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[])*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[[)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]m)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]M)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[m)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[M)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]n)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]N)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[n)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[N)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]r)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]R)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[r)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[R)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]/)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-]star)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[/)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:*<plug>(vimtex-[star)*
vim/packs-cp/opt/vimtex/doc/vimtex.txt:      |<plug>(vimtex-a$)| and |<plug>(vimtex-i$)|).
vim/packs-cp/opt/vimtex/doc/vimtex.txt:    map <buffer> K <Plug>(vimtex-doc-package)
vim/packs-cp/opt/vimtex/doc/vimtex.txt:either use the mapping, |<plug>(vimtex-compile-selected)|, or the command
vim/packs-cp/opt/vimtex/doc/vimtex.txt:gives us synctex support. Therefore, by default, |<plug>(vimtex-clean)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:|<plug>(vimtex-reverse-search)| (default mapping: `'<localleader>lr'`).
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   to work. Examples include the math text objects (e.g. |<plug>(vimtex-a$)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:   and |<plug>(vimtex-i$)|) as these text objects check the syntax groups to
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-delete-env)*   ---> |<plug>(vimtex-env-delete)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-delete-cmd)*   ---> |<plug>(vimtex-cmd-delete)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-change-env)*   ---> |<plug>(vimtex-env-change)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-change-cmd)*   ---> |<plug>(vimtex-cmd-change)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-toggle-star)*  ---> |<plug>(vimtex-env-toggle-star)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-toggle-delim)* ---> |<plug>(vimtex-delim-toggle-modifier)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-create-cmd)*   ---> |<plug>(vimtex-cmd-create)|
vim/packs-cp/opt/vimtex/doc/vimtex.txt:* *<plug>(vimtex-close-env)*    ---> |<plug>(vimtex-delim-close)|
vim/packs-cp/opt/open-browser.vim/autoload/openbrowser.vim:" <Plug>(openbrowser-open)
vim/packs-cp/opt/open-browser.vim/autoload/openbrowser.vim:" <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/autoload/openbrowser.vim:" <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogHelp)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> g? <Plug>(FlogHelp)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogHelp) :help flog-mappings<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVSplitCommitRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <CR> <Plug>(FlogVSplitCommitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVSplitCommitRight) :vertical belowright Flogsplitcommit<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVSplitCommitPathsRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <Tab> <Plug>(FlogVSplitCommitPathsRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVSplitCommitPathsRight) :<C-U>exec flog#Format('vertical belowright Floggit -s -t show %h -- %p')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> git <Plug>(FlogGit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> git <Plug>(FlogGit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGit) :Floggit
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGit) :Floggit
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogStartCommand)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> . <Plug>(FlogStartCommand)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogStartCommand) :<C-U> <C-R>=flog#Format('%H')<CR><Home>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogYank)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> y<C-G> <Plug>(FlogYank)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> y<C-G> <Plug>(FlogYank)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogYank) :<C-U>call flog#floggraph#reg#YankHash(v:register, '.', max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogYank) :<C-U>call flog#floggraph#reg#YankHashRange(v:register, "'<", "'>")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogUpdate)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> u <Plug>(FlogUpdate)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogUpdate) :<C-U>call flog#floggraph#buf#Update()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVSplitStaged)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gs <Plug>(FlogVSplitStaged)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVSplitUntracked)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gu <Plug>(FlogVSplitUntracked)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVSplitUnstaged)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gU <Plug>(FlogVSplitUnstaged)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVSplitStaged) :<C-U>vertical belowright Floggit -s -t diff --cached<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVSplitUntracked) :<C-U>exec flog#Format('silent Git add -N . \| vertical belowright Floggit -s -t diff \| silent Git read-tree %t')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVSplitUnstaged) :<C-U>vertical belowright Floggit -s -t diff<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCloseTmpWin)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> dq <Plug>(FlogCloseTmpWin)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCloseTmpWin) :<C-U>call flog#floggraph#side_win#CloseTmp()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogQuit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ZZ <Plug>(FlogQuit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gq <Plug>(FlogQuit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogQuit) :<C-U>call flog#floggraph#buf#Close()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogJumpToCommitStart)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ^ <Plug>(FlogJumpToCommitStart)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> ^ <Plug>(FlogJumpToCommitStart)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogJumpToCommitStart) :<C-U>call flog#floggraph#nav#JumpToCommitStart()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogJumpToCommitStart) :<C-U>call flog#floggraph#nav#JumpToCommitStart()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogNextCommit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ) <Plug>(FlogNextCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogPrevCommit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ( <Plug>(FlogPrevCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogNextCommit) :<C-U>call flog#floggraph#nav#NextCommit(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogPrevCommit) :<C-U>call flog#floggraph#nav#PrevCommit(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVNextCommitRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <C-N> <Plug>(FlogVNextCommitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVPrevCommitRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <C-P> <Plug>(FlogVPrevCommitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVNextCommitRight) :<C-U>call flog#floggraph#nav#NextCommit(max([1, v:count])) \| vertical belowright Flogsplitcommit<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVPrevCommitRight) :<C-U>call flog#floggraph#nav#PrevCommit(max([1, v:count])) \| vertical belowright Flogsplitcommit<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVNextRefRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ]r <Plug>(FlogVNextRefRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVPrevRefRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> [r <Plug>(FlogVPrevRefRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVNextRefRight) :<C-U>call flog#floggraph#nav#NextRefCommit(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVPrevRefRight) :<C-U>call flog#floggraph#nav#PrevRefCommit(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogJumpToParent)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> } <Plug>(FlogJumpToParent)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogJumpToChild)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> { <Plug>(FlogJumpToChild)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogJumpToParent) :<C-U>call flog#floggraph#nav#JumpToParent(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogJumpToChild) :<C-U>call flog#floggraph#nav#JumpToChild(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogJumpToNewer)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <C-I> <Plug>(FlogJumpToNewer)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogJumpToOlder)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <C-O> <Plug>(FlogJumpToOlder)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogJumpToNewer) :<C-U>call flog#floggraph#nav#JumpToNewer(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogJumpToOlder) :<C-U>call flog#floggraph#nav#JumpToOlder(max([1, v:count]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSkipAhead)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ]] <Plug>(FlogSkipAhead)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSkipAhead) :<C-U>call flog#floggraph#nav#SkipAhead(max([v:count, 1]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSkipBack)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> [[ <Plug>(FlogSkipBack)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSkipBack) :<C-U>call flog#floggraph#nav#SkipBack(max([v:count, 1]))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSetSkip)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gcg <Plug>(FlogSetSkip)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSetSkip) :<C-U>call flog#floggraph#nav#SkipTo(v:count)<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSetRev)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gct <Plug>(FlogSetRev)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSetRev) :<C-U>call flog#floggraph#nav#SetRevToCommitAtLine('.')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogClearRev)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gcc <Plug>(FlogClearRev)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogClearRev) :<C-U>call flog#floggraph#nav#ClearRev()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSetCommitMark)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> m <Plug>(FlogSetCommitMark)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> m <Plug>(FlogSetCommitMark)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSetCommitMark) :<C-U>call flog#floggraph#mark#Set(nr2char(getchar()), '.')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogSetCommitMark) :<C-U>call flog#floggraph#mark#Set(nr2char(getchar()), '.')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogJumpToCommitMark)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ' <Plug>(FlogJumpToCommitMark)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> ' <Plug>(FlogJumpToCommitMark)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogJumpToCommitMark) :<C-U>call flog#floggraph#nav#JumpToMark(nr2char(getchar()))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogJumpToCommitMark) :<C-U>call flog#floggraph#nav#JumpToMark(nr2char(getchar()))<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCollapseCommit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <nowait> < <Plug>(FlogCollapseCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> < <Plug>(FlogCollapseCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <nowait> <silent> <Plug>(FlogCollapseCommit) :<C-U>call flog#floggraph#collapse#AtLine('.')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogCollapseCommit) :<C-U>call flog#floggraph#collapse#Range("'<", "'>")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogExpandCommit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <nowait> > <Plug>(FlogExpandCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> > <Plug>(FlogExpandCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogExpandCommit) :<C-U>call flog#floggraph#collapse#ExpandAtLine('.')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogExpandCommit) :<C-U>call flog#floggraph#collapse#ExpandRange("'<", "'>")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleCollapseCommit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <nowait> = <Plug>(FlogToggleCollapseCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> = <Plug>(FlogToggleCollapseCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <nowait> <silent> <Plug>(FlogToggleCollapseCommit) :<C-U>call flog#floggraph#collapse#ToggleAtLine('.')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogToggleCollapseCommit) :<C-U>call flog#floggraph#collapse#ToggleRange("'<", "'>")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleAll)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> a <Plug>(FlogToggleAll)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleAll) :<C-U>call flog#floggraph#opts#ToggleAll()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleBisect)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gb <Plug>(FlogToggleBisect)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleBisect) :<C-U>call flog#floggraph#opts#ToggleBisect()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleFirstParent)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gP <Plug>(FlogToggleFirstParent)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleFirstParent) :<C-U>call flog#floggraph#opts#ToggleFirstParent()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleMerges)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gm <Plug>(FlogToggleMerges)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleMerges) :<C-U>call flog#floggraph#opts#ToggleMerges()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleReflog)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gr <Plug>(FlogToggleReflog)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleReflog) :<C-U>call flog#floggraph#opts#ToggleReflog()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleGraph)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gx <Plug>(FlogToggleGraph)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleGraph) :<C-U>call flog#floggraph#opts#ToggleGraph()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogTogglePatch)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gp <Plug>(FlogTogglePatch)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogTogglePatch) :<C-U>call flog#floggraph#opts#TogglePatch()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSearch)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> g/ <Plug>(FlogSearch)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogSearch) :<C-U>Flogsetargs -search=
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogPatchSearch)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> g\ <Plug>(FlogPatchSearch)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogPatchSearch) :<C-U>Flogsetargs -patch-search=
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCycleOrder)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> goo <Plug>(FlogCycleOrder)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCycleOrder) :<C-U>call flog#floggraph#opts#CycleOrder()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogOrderDate)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> god <Plug>(FlogOrderDate)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogOrderDate) :<C-U>Flogsetargs -order=date<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogOrderAuthor)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> goa <Plug>(FlogOrderAuthor)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogOrderAuthor) :<C-U>Flogsetargs -order=author<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogOrderTopo)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> got <Plug>(FlogOrderTopo)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogOrderTopo) :<C-U>Flogsetargs -order=topo<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleReverse)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gor <Plug>(FlogToggleReverse)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleReverse) :<C-U>call flog#floggraph#opts#ToggleReverse()<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> dd <Plug>(FlogVDiffSplitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> dd <Plug>(FlogVDiffSplitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> dv <Plug>(FlogVDiffSplitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> dv <Plug>(FlogVDiffSplitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitPathsRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> DD <Plug>(FlogVDiffSplitPathsRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> DD <Plug>(FlogVDiffSplitPathsRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> DV <Plug>(FlogVDiffSplitPathsRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> DV <Plug>(FlogVDiffSplitPathsRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitRight) :<C-U>exec flog#Format('vertical belowright Floggit -s -t diff HEAD %h')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogVDiffSplitRight) :<C-U>exec flog#Format("vertical belowright Floggit -s -t diff %(h'>) %(h'<)")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitPathsRight) :<C-U>exec flog#Format('vertical belowright Floggit -s -t diff HEAD %h -- %p')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogVDiffSplitPathsRight) :<C-U>exec flog#Format("vertical belowright Floggit -s -t diff HEAD %(h'<) %(h'>) -- %p")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitLastCommitRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> d! <Plug>(FlogVDiffSplitLastCommitRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitLastCommitPathsRight)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> D! <Plug>(FlogVDiffSplitLastCommitPathsRight)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitLastCommitRight) :<C-U>exec flog#Format("vertical belowright Floggit -s -t diff %(h'!) %H")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitLastCommitPathsRight) :<C-U>exec flog#Format("vertical belowright Floggit -s -t diff %(h'!) %H -- %p")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogDiffHelp)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> d? <Plug>(FlogDiffHelp)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogDiffHelp) :help flog-diff-mappings<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCommit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cc <Plug>(FlogCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCommit) :<C-U>Floggit -f commit<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogAmend)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ca <Plug>(FlogAmend)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogAmend) :<C-U>Floggit -f commit --amend<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogAmendNoEdit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ce <Plug>(FlogAmendNoEdit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogAmendNoEdit) :<C-U>Floggit -f commit --amend --no-edit<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogFixup)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cf <Plug>(FlogFixup)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogFixupRebase)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cF <Plug>(FlogFixupRebase)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogFixup) :<C-U>exec flog#Format('Floggit -f commit --fixup=%H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogFixupRebase) :<C-U>exec flog#Format('Git commit --fixup=%H \| Floggit -f -c sequence.editor=true rebase --interactive --autosquash %H^')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSquash)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cs <Plug>(FlogSquash)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSquashRebase)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cS <Plug>(FlogSquashRebase)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSquashEdit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cA <Plug>(FlogSquashEdit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSquash) :<C-U>exec flog#Format('Floggit -f commit --no-edit --squash=%H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSquashRebase) :<C-U>exec flog#Format('Git commit --no-edit --squash=%H \| Floggit -f -c sequence.editor=true rebase --interactive --autosquash %H^')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSquashEdit) :<C-U>exec flog#Format('Floggit -f commit --edit --squash=%H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRevert)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> crc <Plug>(FlogRevert)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> crc <Plug>(FlogRevert)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRevertNoEdit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> crn <Plug>(FlogRevertNoEdit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> crn <Plug>(FlogRevertNoEdit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRevert) :<C-U>exec flog#Format('Floggit -f revert %H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogRevert) :<C-U>exec flog#Format("Floggit -f revert %(h'<)^..%(h'>)")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRevertNoEdit) :<C-U>exec flog#Format('Floggit -f revert --no-edit %H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogRevertNoEdit) :<C-U>exec flog#Format("Floggit -f revert --no-edit %(h'<)^..%(h'>)")<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCheckout)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> coo <Plug>(FlogCheckout)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCheckout) :<C-U>exec flog#Format('Floggit checkout %H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCheckoutBranch)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cob <Plug>(FlogCheckoutBranch)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCheckoutBranch) :<C-U>exec flog#Format('Floggit checkout %b')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCheckoutLocalBranch)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> col <Plug>(FlogCheckoutLocalBranch)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCheckoutLocalBranch) :<C-U>exec flog#Format('Floggit checkout %l')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitCommit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> c<Space> <Plug>(FlogGitCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> c<Space> <Plug>(FlogGitCommit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitCommit) :Floggit commit<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitCommit) :Floggit commit<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitRevert)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cr<Space> <Plug>(FlogGitRevert)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> cr<Space> <Plug>(FlogGitRevert)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitRevert) :Floggit revert<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitRevert) :Floggit revert<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitMerge)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cm<Space> <Plug>(FlogGitMerge)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> cm<Space> <Plug>(FlogGitMerge)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitMerge) :Floggit merge<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitMerge) :Floggit merge<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitCheckout)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> co<Space> <Plug>(FlogGitCheckout)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> co<Space> <Plug>(FlogGitCheckout)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitCheckout) :Floggit checkout<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitCheckout) :Floggit checkout<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitBranch)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cb<Space> <Plug>(FlogGitBranch)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> cb<Space> <Plug>(FlogGitBranch)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitBranch) :Floggit branch<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitBranch) :Floggit branch<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCommitHelp)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> c? <Plug>(FlogCommitHelp)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCommitHelp) :help flog-commit-mappings<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractive)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ri <Plug>(FlogRebaseInteractive)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractive) :<C-U>exec flog#Format('Floggit -f rebase --interactive %H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveAutosquash)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rf <Plug>(FlogRebaseInteractiveAutosquash)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveAutosquash) :<C-U>exec flog#Format('Floggit -f -c sequence.editor=true rebase --interactive --autosquash %H')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveUpstream)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ru <Plug>(FlogRebaseInteractiveUpstream)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveUpstream) :<C-U>Floggit -f rebase --interactive @{upstream}<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractivePush)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rp <Plug>(FlogRebaseInteractivePush)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractivePush) :<C-U>Floggit -f rebase --interactive @{push}<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseContinue)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rr <Plug>(FlogRebaseContinue)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseContinue) :<C-U>Floggit -f rebase --continue<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseSkip)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rs <Plug>(FlogRebaseSkip)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseSkip) :<C-U>Floggit -f rebase --skip<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseAbort)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ra <Plug>(FlogRebaseAbort)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseAbort) :<C-U>Floggit -f rebase --abort<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseEditTodo)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> re <Plug>(FlogRebaseEditTodo)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseEditTodo) :<C-U>Floggit -f rebase --edit-todo<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveReword)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rw <Plug>(FlogRebaseInteractiveReword)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveReword) :<C-U>exec flog#Format('Floggit -f rebase --interactive %H^ \| s/^pick/reword/e')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveEdit)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rm <Plug>(FlogRebaseInteractiveEdit)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveEdit) :<C-U>exec flog#Format('Floggit -f rebase --interactive %H^ \| s/^pick/edit/e')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveDrop)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rd <Plug>(FlogRebaseInteractiveDrop)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveDrop) :<C-U>exec flog#Format('Floggit -f rebase --interactive %H^ \| s/^pick/drop/e')<CR>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitRebase)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> r<Space> <Plug>(FlogGitRebase)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> r<Space> <Plug>(FlogGitRebase)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitRebase) :Floggit rebase<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitRebase) :Floggit rebase<Space>
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseHelp)')
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> r? <Plug>(FlogRebaseHelp)
vim/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseHelp) :help flog-rebase-mappings<CR>
vim/packs-cp/opt/vimtex/VISUALS.md:documentation at `:help <Plug>(vimtex-][)` and `:help <Plug>(vimtex-[])`.
vim/packs-cp/opt/vimtex/VISUALS.md:described in `:help <Plug>(vimtex-]M)` and `:help <Plug>(vimtex-[M)`.
vim/packs-cp/opt/vimtex/VISUALS.md:described in `:help <Plug>(vimtex-]N)` and `:help <Plug>(vimtex-[N)`.
vim/packs-cp/opt/vimtex/VISUALS.md:`]R` and `[R`, described in `:help <Plug>(vimtex-]R)` and `:help
vim/packs-cp/opt/vimtex/VISUALS.md:<Plug>(vimtex-[R)`.
vim/packs-cp/opt/open-browser.vim/autoload/vital/__openbrowser__/OpenBrowser.vim:" <Plug>(openbrowser-open)
vim/packs-cp/opt/open-browser.vim/autoload/vital/__openbrowser__/OpenBrowser.vim:" <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/autoload/vital/__openbrowser__/OpenBrowser.vim:" <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/vim-gitgutter/README.mkd:nmap ]h <Plug>(GitGutterNextHunk)
vim/packs-cp/opt/vim-gitgutter/README.mkd:nmap [h <Plug>(GitGutterPrevHunk)
vim/packs-cp/opt/vim-gitgutter/README.mkd:nmap ghs <Plug>(GitGutterStageHunk)
vim/packs-cp/opt/vim-gitgutter/README.mkd:nmap ghu <Plug>(GitGutterUndoHunk)
vim/packs-cp/opt/vim-gitgutter/README.mkd:nmap ghp <Plug>(GitGutterPreviewHunk)
vim/packs-cp/opt/vim-gitgutter/README.mkd:omap ih <Plug>(GitGutterTextObjectInnerPending)
vim/packs-cp/opt/vim-gitgutter/README.mkd:omap ah <Plug>(GitGutterTextObjectOuterPending)
vim/packs-cp/opt/vim-gitgutter/README.mkd:xmap ih <Plug>(GitGutterTextObjectInnerVisual)
vim/packs-cp/opt/vim-gitgutter/README.mkd:xmap ah <Plug>(GitGutterTextObjectOuterVisual)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterPrevHunk)') && maparg('[c', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> [c <Plug>(GitGutterPrevHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterNextHunk)') && maparg(']c', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> ]c <Plug>(GitGutterNextHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'v') && maparg('<Leader>hs', 'x') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'n') && maparg('<Leader>hs', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterUndoHunk)') && maparg('<Leader>hu', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hu <Plug>(GitGutterUndoHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterPreviewHunk)') && maparg('<Leader>hp', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hp <Plug>(GitGutterPreviewHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectInnerPending)') && maparg('ic', 'o') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    omap <buffer> ic <Plug>(GitGutterTextObjectInnerPending)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectOuterPending)') && maparg('ac', 'o') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    omap <buffer> ac <Plug>(GitGutterTextObjectOuterPending)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectInnerVisual)') && maparg('ic', 'x') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> ic <Plug>(GitGutterTextObjectInnerVisual)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectOuterVisual)') && maparg('ac', 'x') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> ac <Plug>(GitGutterTextObjectOuterVisual)
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-open) :<C-u>call openbrowser#_keymap_open('n')<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-open) :<C-u>call openbrowser#_keymap_open('v')<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-open-incognito) :<C-u>call openbrowser#_keymap_open('n', 0, ['--incognito'])<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-open-incognito) :<C-u>call openbrowser#_keymap_open('v', 0, ['--incognito'])<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-search) :<C-u>call openbrowser#_keymap_search('n')<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-search) :<C-u>call openbrowser#_keymap_search('v')<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-smart-search) :<C-u>call openbrowser#_keymap_smart_search('n')<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-smart-search) :<C-u>call openbrowser#_keymap_smart_search('v')<CR>
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    nmenu <silent> PopUp.Open\ URL <Plug>(openbrowser-open)
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    xmenu <silent> PopUp.Open\ URL <Plug>(openbrowser-open)
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    nmenu <silent> PopUp.Open\ Word(s) <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    xmenu <silent> PopUp.Open\ Word(s) <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    nmenu <silent> PopUp.Open\ URL\ or\ Word(s) <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    xmenu <silent> PopUp.Open\ URL\ or\ Word(s) <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ghp <Plug>(GitGutterPreviewHunk)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ghs <Plug>(GitGutterStageHunk)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ghu <Plug>(GitGutterUndoHunk)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap [c <Plug>(GitGutterPrevHunk)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ]c <Plug>(GitGutterNextHunk)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    omap ic <Plug>(GitGutterTextObjectInnerPending)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    omap ac <Plug>(GitGutterTextObjectOuterPending)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    xmap ic <Plug>(GitGutterTextObjectInnerVisual)
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    xmap ac <Plug>(GitGutterTextObjectOuterVisual)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter/hunk.vim:  silent! call repeat#set("\<Plug>(GitGutterStageHunk)", -1)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter/hunk.vim:  silent! call repeat#set("\<Plug>(GitGutterUndoHunk)", -1)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter/hunk.vim:  silent! call repeat#set("\<Plug>(GitGutterPreviewHunk)", -1)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap gx <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	vmap gx <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap map-you-like <Plug>(openbrowser-open)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	vmap map-you-like <Plug>(openbrowser-open)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap map-you-like <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	" Search selected word. vmap map-you-like <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap map-you-like <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	vmap map-you-like <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-open)				*<Plug>(openbrowser-open)*
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-open)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-open-incognito)	*<Plug>(openbrowser-open-incognito)*
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-open-incognito)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	Same as |<Plug>(openbrowser-open)|, but with "--incognito" command
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-search)				*<Plug>(openbrowser-search)*
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-smart-search)		*<Plug>(openbrowser-smart-search)*
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	Call |<Plug>(openbrowser-open)| and if it fails,
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	Call |<Plug>(openbrowser-open)| and if it fails,
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	If you execute |<Plug>(openbrowser-smart-search)| on code like: >
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	If you execute |<Plug>(openbrowser-open)| on URI like: >
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	If you execute |<Plug>(openbrowser-open)| on URI like: >
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	If you execute |<Plug>(openbrowser-open)| on URI like: >
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	This is same as |<Plug>(openbrowser-open)|.
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	This is same as |<Plug>(openbrowser-search)|.
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	This is same as |<Plug>(openbrowser-smart-search)|.
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:- Add <Plug>(openbrowser-search)
vim/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:- Add <Plug>(openbrowser-smart-search)
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                            *<Plug>(FlogHelp)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                               *<Plug>(FlogVSplitCommitRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogVSplitCommitRightPath)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                             *<Plug>(FlogGit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogStartCommand)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                            *<Plug>(FlogYank)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogUpdate)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogVSplitStaged)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                 *<Plug>(FlogVSplitUntracked)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogVSplitUnstaged)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogCloseTmpWin)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                            *<Plug>(FlogQuit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                               *<Plug>(FlogJumpToCommitStart)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogNextCommit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogPrevCommit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                *<Plug>(FlogVNextCommitRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                *<Plug>(FlogVPrevCommitRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogVNextRefRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogVPrevRefRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogJumpToParent)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogJumpToChild)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogJumpToOlder)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogJumpToNewer)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogSkipAhead)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogSkipBack)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                         *<Plug>(FlogSetSkip)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogSetRev)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogClearRev)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogSetCommitMark)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                *<Plug>(FlogJumpToCommitMark)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogCollapseCommit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogExpandCommit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                            *<Plug>(FlogToggleCollapseCommit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogToggleAll)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogToggleBisect)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                             *<Plug>(FlogToggleNoFirstParent)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogToggleNoMerges)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogToggleReflog)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogToggleNoGraph)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogToggleNoPatch)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogSearch)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogPatchSearch)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogCycleOrder)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogOrderDate)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogOrderAuthor)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<plug>(FlogOrderTopo)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogToggleReverse)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                 *<Plug>(FlogVDiffSplitRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                            *<Plug>(FlogVDiffSplitPathsRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                       *<Plug>(FlogVDiffSplitLastCommitRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                  *<Plug>(FlogVDiffSplitLastCommitPathsRight)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogDiffHelp)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogCommit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                           *<Plug>(FlogAmend)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogAmendNoEdit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                           *<Plug>(FlogFixup)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogFixupRebase)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogSquash)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogSquashRebase)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogSquashEdit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogRevert)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogRevertNoEdit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogCheckout)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogCheckoutBranch)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                             *<Plug>(FlogCheckoutLocalBranch)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitCommit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitRevert)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogGitMerge)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogGitCheckout)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitBranch)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogCommitHelp)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                               *<Plug>(FlogRebaseInteractive)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                     *<Plug>(FlogRebaseInteractiveAutosquash)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                       *<Plug>(FlogRebaseInteractiveUpstream)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogRebaseInteractivePush)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogRebaseContinue)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogRebaseSkip)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogRebaseAbort)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogRebaseEditTodo)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                         *<Plug>(FlogRebaseInteractiveReword)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogRebaseInteractiveEdit)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogRebaseInteractiveDrop)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitRebase)*
vim/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogRebaseHelp)*
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>(GitGutterTextObjectInnerVisual)  :<C-U>call gitgutter#hunk#text_object(1)<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>(GitGutterTextObjectOuterVisual)  :<C-U>call gitgutter#hunk#text_object(0)<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\<C-U>execute v:count1 . 'GitGutterNextHunk'\<CR>"
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterNextHunk to \<lt>Plug>(GitGutterNextHunk)')\<CR>"
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\<C-U>execute v:count1 . 'GitGutterPrevHunk'\<CR>"
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterPrevHunk to \<lt>Plug>(GitGutterPrevHunk)')\<CR>"
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>
vim/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>
vim/packs-cp/opt/vim-easymotion/autoload/EasyMotion.vim:        " Perform <Plug>(easymotion-w)
vim/packs-cp/opt/vim-easymotion/autoload/EasyMotion.vim:            silent! call repeat#set("\<Plug>(easymotion-dotrepeat)")
vim/packs-cp/opt/vim-easymotion/autoload/EasyMotion/helper.vim:    let map = printf("<Plug>(%s)", name)
vim/packs-cp/opt/vim-easymotion/autoload/EasyMotion/helper.vim:        call feedkeys(printf("\<Plug>(%s)", name))
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader> <Plug>(easymotion-prefix)
vim/packs-cp/opt/vim-easymotion/README.md:Type `<Leader><Leader>w`(`<Plug>(easymotion-w)`) to trigger the word motion `w`.
vim/packs-cp/opt/vim-easymotion/README.md:map  <Leader>f <Plug>(easymotion-bd-f)
vim/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>f <Plug>(easymotion-overwin-f)
vim/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-overwin-f2)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>L <Plug>(easymotion-bd-jk)
vim/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>L <Plug>(easymotion-overwin-line)
vim/packs-cp/opt/vim-easymotion/README.md:map  <Leader>w <Plug>(easymotion-bd-w)
vim/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>w <Plug>(easymotion-overwin-w)
vim/packs-cp/opt/vim-easymotion/README.md:All motions now come in bidirectional variants (e.g. `<Plug>(easymotion-s)`,
vim/packs-cp/opt/vim-easymotion/README.md:`<Plug>(easymotion-bd-w)` and so forth).
vim/packs-cp/opt/vim-easymotion/README.md:trick is to map `nmap s <Plug>(easymotion-s)` to use `s` instead and save one
vim/packs-cp/opt/vim-easymotion/README.md:You can now also perform a 2-character search, similar to [vim-seek](https://github.com/goldfeld/vim-seek)/[vim-sneak](https://github.com/justinmk/vim-sneak) with `<Plug>(easymotion-s2)`. For example, you can highlight all words that start with `fu`.
vim/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-s2)
vim/packs-cp/opt/vim-easymotion/README.md:nmap t <Plug>(easymotion-t2)
vim/packs-cp/opt/vim-easymotion/README.md:map  / <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/README.md:omap / <Plug>(easymotion-tn)
vim/packs-cp/opt/vim-easymotion/README.md:map  n <Plug>(easymotion-next)
vim/packs-cp/opt/vim-easymotion/README.md:map  N <Plug>(easymotion-prev)
vim/packs-cp/opt/vim-easymotion/README.md:(e.g. `<Plug>(easymotion-sl)`, `<Plug>(easymotion-bd-wl)`, etc...). This can be
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>l <Plug>(easymotion-lineforward)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>h <Plug>(easymotion-linebackward)
vim/packs-cp/opt/vim-easymotion/README.md:`<Plug>(easymotion-repeat)`
vim/packs-cp/opt/vim-easymotion/README.md:In a find motion (e.g. `<Plug>(easymotion-s)`), type `<CR>` without
vim/packs-cp/opt/vim-easymotion/README.md:* `<Plug>(easymotion-next)`
vim/packs-cp/opt/vim-easymotion/README.md:* `<Plug>(easymotion-prev)`
vim/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/README.md:omap t <Plug>(easymotion-bd-tl)
vim/packs-cp/opt/vim-easymotion/README.md:You should at least change the prefix key like this `map <Leader> <Plug>(easymotion-prefix)`
vim/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-overwin-f)
vim/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-overwin-f2)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
vim/packs-cp/opt/vim-easymotion/autoload/vital/_easymotion/Over/String.vim:	return s:_split_keystring(a:str, "\\%(\<Plug>\\|<Over>\\)(.\\{-})\\zs\\|")
vim/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:        omap f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:        omap w <Plug>(easymotion-w)
vim/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:        omap b <Plug>(easymotion-b)
vim/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:    it '<Plug>(easymotion-w)'
vim/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:    it '<Plug>(easymotion-b)'
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>w <Plug>(easymotion-iskeyword-w)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>b <Plug>(easymotion-iskeyword-b)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>e <Plug>(easymotion-iskeyword-e)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>ge <Plug>(easymotion-iskeyword-ge)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>W <Plug>(easymotion-W)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>B <Plug>(easymotion-B)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>E <Plug>(easymotion-E)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>gE <Plug>(easymotion-gE)
vim/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map s <Plug>(easymotion-s2)
vim/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map s <Plug>(easymotion-s2)
vim/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map / <Plug>(easymotion-sn)
vim/packs-cp/opt/vimtex/autoload/vimtex/view.vim:  nnoremap <buffer> <plug>(vimtex-view) :VimtexView<cr>
vim/packs-cp/opt/vimtex/test/test-env/test-surround.vim:execute "normal 13G\<plug>(vimtex-env-surround-operator)3jnumbers\<cr>"
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-%) :call vimtex#motion#find_matching_pair()<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-%) <sid>(vimtex-%)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-%) :execute "normal \<sid>(v)\<sid>(vimtex-%)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]]) :<c-u>call vimtex#motion#section(0,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-][) :<c-u>call vimtex#motion#section(1,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[]) :<c-u>call vimtex#motion#section(1,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[[) :<c-u>call vimtex#motion#section(0,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]]) <sid>(vimtex-]])
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-][) <sid>(vimtex-][)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[]) <sid>(vimtex-[])
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[[) <sid>(vimtex-[[)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]]) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]])"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-][) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-][)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[]) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[])"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[[) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[[)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]n) :<c-u>call vimtex#motion#math(1,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]N) :<c-u>call vimtex#motion#math(0,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[n) :<c-u>call vimtex#motion#math(1,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[N) :<c-u>call vimtex#motion#math(0,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]n) <sid>(vimtex-]n)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]N) <sid>(vimtex-]N)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[n) <sid>(vimtex-]n)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[N) <sid>(vimtex-]N)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]n) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]n)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]N) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]N)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[n) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[n)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[N) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[N)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]m) :<c-u>call vimtex#motion#environment(1,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]M) :<c-u>call vimtex#motion#environment(0,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[m) :<c-u>call vimtex#motion#environment(1,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[M) :<c-u>call vimtex#motion#environment(0,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]m) <sid>(vimtex-]m)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]M) <sid>(vimtex-]M)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[m) <sid>(vimtex-[m)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[M) <sid>(vimtex-[M)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]m) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]m)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]M) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]M)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[m) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[m)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[M) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[M)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]r) :<c-u>call vimtex#motion#frame(1,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]R) :<c-u>call vimtex#motion#frame(0,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[r) :<c-u>call vimtex#motion#frame(1,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[R) :<c-u>call vimtex#motion#frame(0,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]r) <sid>(vimtex-]r)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]R) <sid>(vimtex-]R)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[r) <sid>(vimtex-[r)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[R) <sid>(vimtex-[R)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]r) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]r)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]R) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]R)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[r) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[r)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[R) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[R)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]/) :<c-u>call vimtex#motion#comment(1,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-]*) :<c-u>call vimtex#motion#comment(0,0,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[/) :<c-u>call vimtex#motion#comment(1,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  nnoremap <silent><buffer> <plug>(vimtex-[*) :<c-u>call vimtex#motion#comment(0,1,0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]/) <sid>(vimtex-]/)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-]*) <sid>(vimtex-]*)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[/) <sid>(vimtex-[/)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  xmap     <silent><buffer> <plug>(vimtex-[*) <sid>(vimtex-[*)
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]/) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]/)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-]*) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]*)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[/) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[/)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/motion.vim:  onoremap <silent><buffer> <plug>(vimtex-[*) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[*)"<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/info.vim:  nnoremap <buffer> <plug>(vimtex-info)      :VimtexInfo<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/info.vim:  nnoremap <buffer> <plug>(vimtex-info-full) :VimtexInfo!<cr>
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:    it 'provide default <Plug> mappings for find motion'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s)', 'n') ==# ':<C-U>call EasyMotion#S(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s)', 'o') ==# ':<C-U>call EasyMotion#S(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f)', 'n') ==# ':<C-U>call EasyMotion#S(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f)', 'o') ==# ':<C-U>call EasyMotion#S(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F)', 'n') ==# ':<C-U>call EasyMotion#S(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F)', 'o') ==# ':<C-U>call EasyMotion#S(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f)', 'n') ==# maparg('<Plug>(easymotion-s)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f)', 'o') ==# maparg('<Plug>(easymotion-s)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f)', 'v') ==# maparg('<Plug>(easymotion-s)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t)', 'n') ==# ':<C-U>call EasyMotion#T(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t)', 'o') ==# ':<C-U>call EasyMotion#T(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T)', 'n') ==# ':<C-U>call EasyMotion#T(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T)', 'o') ==# ':<C-U>call EasyMotion#T(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t)', 'n') ==# ':<C-U>call EasyMotion#T(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t)', 'o') ==# ':<C-U>call EasyMotion#T(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl)', 'n') ==# ':<C-U>call EasyMotion#SL(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl)', 'o') ==# ':<C-U>call EasyMotion#SL(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl)', 'n') ==# ':<C-U>call EasyMotion#SL(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl)', 'o') ==# ':<C-U>call EasyMotion#SL(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl)', 'n') ==# ':<C-U>call EasyMotion#SL(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl)', 'o') ==# ':<C-U>call EasyMotion#SL(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl)', 'n') ==# maparg('<Plug>(easymotion-sl)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl)', 'o') ==# maparg('<Plug>(easymotion-sl)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl)', 'v') ==# maparg('<Plug>(easymotion-sl)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl)', 'n') ==# ':<C-U>call EasyMotion#TL(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl)', 'o') ==# ':<C-U>call EasyMotion#TL(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl)', 'n') ==# ':<C-U>call EasyMotion#TL(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl)', 'o') ==# ':<C-U>call EasyMotion#TL(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl)', 'n') ==# ':<C-U>call EasyMotion#TL(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl)', 'o') ==# ':<C-U>call EasyMotion#TL(1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s2)', 'n') ==# ':<C-U>call EasyMotion#S(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s2)', 'o') ==# ':<C-U>call EasyMotion#S(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(2,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f2)', 'n') ==# ':<C-U>call EasyMotion#S(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f2)', 'o') ==# ':<C-U>call EasyMotion#S(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(2,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F2)', 'n') ==# ':<C-U>call EasyMotion#S(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F2)', 'o') ==# ':<C-U>call EasyMotion#S(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(2,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f2)', 'n') ==# maparg('<Plug>(easymotion-s2)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f2)', 'o') ==# maparg('<Plug>(easymotion-s2)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f2)', 'v') ==# maparg('<Plug>(easymotion-s2)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t2)', 'n') ==# ':<C-U>call EasyMotion#T(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t2)', 'o') ==# ':<C-U>call EasyMotion#T(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(2,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T2)', 'n') ==# ':<C-U>call EasyMotion#T(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T2)', 'o') ==# ':<C-U>call EasyMotion#T(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(2,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl2)', 'n') ==# ':<C-U>call EasyMotion#SL(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl2)', 'o') ==# ':<C-U>call EasyMotion#SL(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(2,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t2)', 'n') ==# ':<C-U>call EasyMotion#T(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t2)', 'o') ==# ':<C-U>call EasyMotion#T(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(2,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl2)', 'n') ==# ':<C-U>call EasyMotion#SL(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl2)', 'o') ==# ':<C-U>call EasyMotion#SL(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(2,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl2)', 'n') ==# ':<C-U>call EasyMotion#SL(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl2)', 'o') ==# ':<C-U>call EasyMotion#SL(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(2,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl2)', 'n') ==# maparg('<Plug>(easymotion-sl2)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl2)', 'o') ==# maparg('<Plug>(easymotion-sl2)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl2)', 'v') ==# maparg('<Plug>(easymotion-sl2)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl2)', 'n') ==# ':<C-U>call EasyMotion#TL(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl2)', 'o') ==# ':<C-U>call EasyMotion#TL(2,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(2,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl2)', 'n') ==# ':<C-U>call EasyMotion#TL(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl2)', 'o') ==# ':<C-U>call EasyMotion#TL(2,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(2,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl2)', 'n') ==# ':<C-U>call EasyMotion#TL(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl2)', 'o') ==# ':<C-U>call EasyMotion#TL(2,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(2,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sn)', 'n') ==# ':<C-U>call EasyMotion#S(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sn)', 'o') ==# ':<C-U>call EasyMotion#S(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(-1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fn)', 'n') ==# ':<C-U>call EasyMotion#S(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fn)', 'o') ==# ':<C-U>call EasyMotion#S(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(-1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fn)', 'n') ==# ':<C-U>call EasyMotion#S(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fn)', 'o') ==# ':<C-U>call EasyMotion#S(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(-1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fn)', 'n') ==# maparg('<Plug>(easymotion-sn)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fn)', 'o') ==# maparg('<Plug>(easymotion-sn)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fn)', 'v') ==# maparg('<Plug>(easymotion-sn)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tn)', 'n') ==# ':<C-U>call EasyMotion#T(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tn)', 'o') ==# ':<C-U>call EasyMotion#T(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(-1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tn)', 'n') ==# ':<C-U>call EasyMotion#T(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tn)', 'o') ==# ':<C-U>call EasyMotion#T(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(-1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tn)', 'n') ==# ':<C-U>call EasyMotion#T(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tn)', 'o') ==# ':<C-U>call EasyMotion#T(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(-1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sln)', 'n') ==# ':<C-U>call EasyMotion#SL(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sln)', 'o') ==# ':<C-U>call EasyMotion#SL(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(-1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fln)', 'n') ==# ':<C-U>call EasyMotion#SL(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fln)', 'o') ==# ':<C-U>call EasyMotion#SL(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(-1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fln)', 'n') ==# ':<C-U>call EasyMotion#SL(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fln)', 'o') ==# ':<C-U>call EasyMotion#SL(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(-1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fln)', 'n') ==# maparg('<Plug>(easymotion-sln)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fln)', 'o') ==# maparg('<Plug>(easymotion-sln)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fln)', 'v') ==# maparg('<Plug>(easymotion-sln)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tln)', 'n') ==# ':<C-U>call EasyMotion#TL(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tln)', 'o') ==# ':<C-U>call EasyMotion#TL(-1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(-1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tln)', 'n') ==# ':<C-U>call EasyMotion#TL(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tln)', 'o') ==# ':<C-U>call EasyMotion#TL(-1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(-1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tln)', 'n') ==# ':<C-U>call EasyMotion#TL(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tln)', 'o') ==# ':<C-U>call EasyMotion#TL(-1,0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(-1,1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:    it 'provide default <Plug> mappings for regex motion'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-w)', 'n') ==# ':<C-U>call EasyMotion#WB(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-w)', 'o') ==# ':<C-U>call EasyMotion#WB(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WB(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-b)', 'n') ==# ':<C-U>call EasyMotion#WB(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-b)', 'o') ==# ':<C-U>call EasyMotion#WB(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-b)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WB(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-w)', 'n') ==# ':<C-U>call EasyMotion#WB(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-w)', 'o') ==# ':<C-U>call EasyMotion#WB(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WB(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-W)', 'n') ==# ':<C-U>call EasyMotion#WBW(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-W)', 'o') ==# ':<C-U>call EasyMotion#WBW(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-W)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBW(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-B)', 'n') ==# ':<C-U>call EasyMotion#WBW(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-B)', 'o') ==# ':<C-U>call EasyMotion#WBW(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-B)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBW(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-W)', 'n') ==# ':<C-U>call EasyMotion#WBW(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-W)', 'o') ==# ':<C-U>call EasyMotion#WBW(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-W)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBW(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-w)', 'n') ==# ':<C-U>call EasyMotion#WBK(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-w)', 'o') ==# ':<C-U>call EasyMotion#WBK(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBK(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-b)', 'n') ==# ':<C-U>call EasyMotion#WBK(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-b)', 'o') ==# ':<C-U>call EasyMotion#WBK(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-b)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBK(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-w)', 'n') ==# ':<C-U>call EasyMotion#WBK(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-w)', 'o') ==# ':<C-U>call EasyMotion#WBK(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBK(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-e)', 'n')    ==# ':<C-U>call EasyMotion#E(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-e)', 'o')    ==# ':<C-U>call EasyMotion#E(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-e)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#E(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-ge)', 'n')   ==# ':<C-U>call EasyMotion#E(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-ge)', 'o')   ==# ':<C-U>call EasyMotion#E(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-ge)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#E(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-e)', 'n') ==# ':<C-U>call EasyMotion#E(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-e)', 'o') ==# ':<C-U>call EasyMotion#E(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-e)', 'v') ==# '<Esc>:<C-U>call EasyMotion#E(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-E)', 'n')    ==# ':<C-U>call EasyMotion#EW(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-E)', 'o')    ==# ':<C-U>call EasyMotion#EW(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-E)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#EW(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gE)', 'n')   ==# ':<C-U>call EasyMotion#EW(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gE)', 'o')   ==# ':<C-U>call EasyMotion#EW(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gE)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#EW(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-E)', 'n') ==# ':<C-U>call EasyMotion#EW(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-E)', 'o') ==# ':<C-U>call EasyMotion#EW(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-E)', 'v') ==# '<Esc>:<C-U>call EasyMotion#EW(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-e)', 'n')    ==# ':<C-U>call EasyMotion#EK(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-e)', 'o')    ==# ':<C-U>call EasyMotion#EK(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-e)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#EK(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-ge)', 'n')   ==# ':<C-U>call EasyMotion#EK(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-ge)', 'o')   ==# ':<C-U>call EasyMotion#EK(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-ge)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#EK(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-e)', 'n') ==# ':<C-U>call EasyMotion#EK(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-e)', 'o') ==# ':<C-U>call EasyMotion#EK(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-e)', 'v') ==# '<Esc>:<C-U>call EasyMotion#EK(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-j)', 'n') ==# ':<C-U>call EasyMotion#JK(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-j)', 'o') ==# ':<C-U>call EasyMotion#JK(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-j)', 'v') ==# '<Esc>:<C-U>call EasyMotion#JK(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-k)', 'n') ==# ':<C-U>call EasyMotion#JK(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-k)', 'o') ==# ':<C-U>call EasyMotion#JK(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-k)', 'v') ==# '<Esc>:<C-U>call EasyMotion#JK(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-jk)', 'n') ==# ':<C-U>call EasyMotion#JK(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-jk)', 'o') ==# ':<C-U>call EasyMotion#JK(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-jk)', 'v') ==# '<Esc>:<C-U>call EasyMotion#JK(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-j)', 'n') ==# ':<C-U>call EasyMotion#Sol(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-j)', 'o') ==# ':<C-U>call EasyMotion#Sol(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-j)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Sol(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-k)', 'n') ==# ':<C-U>call EasyMotion#Sol(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-k)', 'o') ==# ':<C-U>call EasyMotion#Sol(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-k)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Sol(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-bd-jk)', 'n') ==# ':<C-U>call EasyMotion#Sol(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-bd-jk)', 'o') ==# ':<C-U>call EasyMotion#Sol(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-bd-jk)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Sol(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-j)', 'n') ==# ':<C-U>call EasyMotion#Eol(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-j)', 'o') ==# ':<C-U>call EasyMotion#Eol(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-j)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Eol(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-k)', 'n') ==# ':<C-U>call EasyMotion#Eol(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-k)', 'o') ==# ':<C-U>call EasyMotion#Eol(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-k)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Eol(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-bd-jk)', 'n') ==# ':<C-U>call EasyMotion#Eol(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-bd-jk)', 'o') ==# ':<C-U>call EasyMotion#Eol(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-bd-jk)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Eol(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-n)', 'n') ==# ':<C-U>call EasyMotion#Search(0,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-n)', 'o') ==# ':<C-U>call EasyMotion#Search(0,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-n)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-N)', 'n') ==# ':<C-U>call EasyMotion#Search(0,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-N)', 'o') ==# ':<C-U>call EasyMotion#Search(0,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-N)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-n)', 'n') ==# ':<C-U>call EasyMotion#Search(0,2,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-n)', 'o') ==# ':<C-U>call EasyMotion#Search(0,2,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-n)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,2,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-n)', 'n') ==# ':<C-U>call EasyMotion#Search(0,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-n)', 'o') ==# ':<C-U>call EasyMotion#Search(0,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-n)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-N)', 'n') ==# ':<C-U>call EasyMotion#Search(0,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-N)', 'o') ==# ':<C-U>call EasyMotion#Search(0,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-N)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-jumptoanywhere)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-jumptoanywhere)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-jumptoanywhere)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-repeat)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-repeat)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-repeat)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-dotrepeat)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-dotrepeat)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-dotrepeat)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-next)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-next)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-next)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-prev)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-prev)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-prev)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-wl)', 'n') ==# ':<C-U>call EasyMotion#WBL(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-wl)', 'o') ==# ':<C-U>call EasyMotion#WBL(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-wl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBL(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bl)', 'n') ==# ':<C-U>call EasyMotion#WBL(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bl)', 'o') ==# ':<C-U>call EasyMotion#WBL(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBL(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-wl)', 'n') ==# ':<C-U>call EasyMotion#WBL(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-wl)', 'o') ==# ':<C-U>call EasyMotion#WBL(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-wl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBL(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-el)', 'n')    ==# ':<C-U>call EasyMotion#EL(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-el)', 'o')    ==# ':<C-U>call EasyMotion#EL(0,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-el)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#EL(1,0)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gel)', 'n')   ==# ':<C-U>call EasyMotion#EL(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gel)', 'o')   ==# ':<C-U>call EasyMotion#EL(0,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gel)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#EL(1,1)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-el)', 'n') ==# ':<C-U>call EasyMotion#EL(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-el)', 'o') ==# ':<C-U>call EasyMotion#EL(0,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-el)', 'v') ==# '<Esc>:<C-U>call EasyMotion#EL(1,2)<CR>'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineforward)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineforward)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineforward)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-linebackward)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-linebackward)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-linebackward)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineanywhere)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineanywhere)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineanywhere)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-activate)', 'n')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-activate)', 'o')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-activate)', 'v')
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:describe '<Plug>(easymotion-next) & <Plug>(easymotion-prev)'
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map ; <Plug>(easymotion-next)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map , <Plug>(easymotion-prev)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-bd-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s/ <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f/ <Plug>(easymotion-fn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F/ <Plug>(easymotion-Fn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t/ <Plug>(easymotion-tn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T/ <Plug>(easymotion-Tn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s/ <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map / <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map w <Plug>(easymotion-w)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map b <Plug>(easymotion-b)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>w <Plug>(easymotion-iskeyword-w)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>b <Plug>(easymotion-iskeyword-b)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
vim/packs-cp/opt/vimtex/autoload/vimtex/imaps.vim:  nnoremap <buffer> <plug>(vimtex-imaps-list) :call vimtex#imaps#list()<cr>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:" == <Plug> Mapping {{{
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        silent exec 'noremap  <silent><Plug>(easymotion-'.name.')' .
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        silent exec 'xnoremap <silent><Plug>(easymotion-'.name.')' .
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:    " noremap  <silent><Plug>(easymotion-f2) :<C-u>call EasyMotion#S(2,1,0)<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:    " xnoremap <silent><Plug>(easymotion-f2) <Esc>:<C-u>call EasyMotion#S(2,1,0)<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-f) :<C-u>call EasyMotion#OverwinF(1)<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-f2) :<C-u>call EasyMotion#OverwinF(2)<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-line) :<C-u>call EasyMotion#overwin#line()<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-w) :<C-u>call EasyMotion#overwin#w()<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-next)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-next)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-prev)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-prev)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-repeat)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-repeat)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-dotrepeat)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(0)<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(1)<CR>
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        exec 'map ' . g:EasyMotion_leader_key . ' <Plug>(easymotion-prefix)'
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        if !hasmapto('<Plug>(easymotion-prefix)')
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:            map <Leader><Leader> <Plug>(easymotion-prefix)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \ eval('g:EasyMotion_mapping_' . motion) . ' <Plug>(easymotion-' . motion . ')'
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \ && !hasmapto('<Plug>(easymotion-' . motion . ')')
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \ && empty(maparg('<Plug>(easymotion-prefix)' . motion, 'nov'))
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \'<Plug>(easymotion-prefix)' . motion . ' <Plug>(easymotion-' . motion . ')'
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:EasyMotion <Plug> table                                *easymotion-plug-table*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug> Mapping Table | Default
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-f) | <Leader>f{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-F) | <Leader>F{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-t) | <Leader>t{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-T) | <Leader>T{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-w) | <Leader>w
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-W) | <Leader>W
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-b) | <Leader>b
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-B) | <Leader>B
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-e) | <Leader>e
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-E) | <Leader>E
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-ge)| <Leader>ge
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-gE)| <Leader>gE
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-j) | <Leader>j
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-k) | <Leader>k
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-n) | <Leader>n
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-N) | <Leader>N
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-s) | <Leader>s
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    More <Plug> Mapping Table         | (No assignment by default)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-f)           | See |<Plug>(easymotion-s)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-t)           | See |<Plug>(easymotion-bd-t)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-w)           | See |<Plug>(easymotion-bd-w)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-W)           | See |<Plug>(easymotion-bd-W)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-e)           | See |<Plug>(easymotion-bd-e)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-E)           | See |<Plug>(easymotion-bd-E)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-jk)          | See |<Plug>(easymotion-bd-jk)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-n)           | See |<Plug>(easymotion-bd-n)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-jumptoanywhere) | See |<Plug>(easymotion-jumptoanywhere)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-repeat)         | See |<Plug>(easymotion-repeat)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-next)           | See |<Plug>(easymotion-next)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-prev)           | See |<Plug>(easymotion-prev)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sol-j)          | See |<Plug>(easymotion-sol-j)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sol-k)          | See |<Plug>(easymotion-sol-k)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-eol-j)          | See |<Plug>(easymotion-eol-j)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-eol-k)          | See |<Plug>(easymotion-eol-k)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-w)    | See |<Plug>(easymotion-iskeyword-w)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-b)    | See |<Plug>(easymotion-iskeyword-b)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-bd-w) | See |<Plug>(easymotion-iskeyword-bd-w)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-e)    | See |<Plug>(easymotion-iskeyword-e)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-ge)   | See |<Plug>(easymotion-iskeyword-ge)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-bd-e) | See |<Plug>(easymotion-iskeyword-bd-e)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-n)          | See |<Plug>(easymotion-vim-n)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-N)          | See |<Plug>(easymotion-vim-N)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sl)             | See |<Plug>(easymotion-sl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fl)             | See |<Plug>(easymotion-fl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fl)             | See |<Plug>(easymotion-Fl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-fl)          | See |<Plug>(easymotion-sl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tl)             | See |<Plug>(easymotion-tl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tl)             | See |<Plug>(easymotion-Tl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-tl)          | See |<Plug>(easymotion-bd-tl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-wl)             | See |<Plug>(easymotion-wl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bl)             | See |<Plug>(easymotion-bl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-wl)          | See |<Plug>(easymotion-bd-wl)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-el)             | See |<Plug>(easymotion-el)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-gel)            | See |<Plug>(easymotion-gel)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-el)          | See |<Plug>(easymotion-bd-el)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-lineforward)    | See |<Plug>(easymotion-lineforward)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-linebackward)   | See |<Plug>(easymotion-linebackward)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-lineanywhere)   | See |<Plug>(easymotion-lineanywhere)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-s2)             | See |<Plug>(easymotion-s2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-f2)             | See |<Plug>(easymotion-f2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-F2)             | See |<Plug>(easymotion-F2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-f2)          | See |<Plug>(easymotion-s2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-t2)             | See |<Plug>(easymotion-t2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-T2)             | See |<Plug>(easymotion-T2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-t2)          | See |<Plug>(easymotion-bd-t2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sl2)            | See |<Plug>(easymotion-sl2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fl2)            | See |<Plug>(easymotion-fl2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fl2)            | See |<Plug>(easymotion-Fl2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tl2)            | See |<Plug>(easymotion-tl2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tl2)            | See |<Plug>(easymotion-Tl2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sn)             | See |<Plug>(easymotion-sn)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fn)             | See |<Plug>(easymotion-fn)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fn)             | See |<Plug>(easymotion-Fn)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-fn)          | See |<Plug>(easymotion-sn)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tn)             | See |<Plug>(easymotion-tn)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tn)             | See |<Plug>(easymotion-Tn)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-tn)          | See |<Plug>(easymotion-bd-tn)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sln)            | See |<Plug>(easymotion-sln)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fln)            | See |<Plug>(easymotion-fln)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fln)            | See |<Plug>(easymotion-Fln)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-fln)         | See |<Plug>(easymotion-sln)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tln)            | See |<Plug>(easymotion-tln)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tln)            | See |<Plug>(easymotion-Tln)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-tln)         | See |<Plug>(easymotion-bd-tln)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-f)      | See |<Plug>(easymotion-overwin-f)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-f2)     | See |<Plug>(easymotion-overwin-f2)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-line)   | See |<Plug>(easymotion-overwin-line)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-w)      | See |<Plug>(easymotion-overwin-w)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-s)                                    *<Plug>(easymotion-s)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                     *<Plug>(easymotion-bd-f)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-t)                               *<Plug>(easymotion-bd-t)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-w)                               *<Plug>(easymotion-bd-w)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-W)                               *<Plug>(easymotion-bd-W)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-e)                               *<Plug>(easymotion-bd-e)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-E)                               *<Plug>(easymotion-bd-E)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-jk)                             *<Plug>(easymotion-bd-jk)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-n)                               *<Plug>(easymotion-bd-n)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-f){char}          *n_<Plug>(easymotion-overwin-f)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-s)| or |<Plug>(easymotion-bd-f)|, but
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>f <Plug>(easymotion-overwin-f)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>f <Plug>(easymotion-bd-f)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>f <Plug>(easymotion-bd-f)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-f2){char}{char}   *n_<Plug>(easymotion-overwin-f2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-s2)| or |<Plug>(easymotion-bd-f2)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>s <Plug>(easymotion-overwin-f2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>s <Plug>(easymotion-bd-f2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>s <Plug>(easymotion-bd-f2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-line)           *n_<Plug>(easymotion-overwin-line)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-bd-jk)| but supports moving cursor to
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>L <Plug>(easymotion-overwin-line)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>L <Plug>(easymotion-bd-jk)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>L <Plug>(easymotion-bd-jk)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-w)              *n_<Plug>(easymotion-overwin-w)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-bd-w)| but supports moving cursor to
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>w <Plug>(easymotion-overwin-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>w <Plug>(easymotion-bd-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>w <Plug>(easymotion-bd-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                *<Plug>(easymotion-overwin-sn)* (doesn't exist. It's like
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                |<Plug>(easymotion-sn)| but supports moving cursor to other
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-jumptoanywhere)           *<Plug>(easymotion-jumptoanywhere)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-repeat)                           *<Plug>(easymotion-repeat)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            With a Find motion (e.g. |<Plug>(easymotion-s)| ), type `<CR>`
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            <Plug>(easymotion-j) etc...) only input characters.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-next)                               *<Plug>(easymotion-next)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-prev)                               *<Plug>(easymotion-prev)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>; <Plug>(easymotion-next)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>, <Plug>(easymotion-prev)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        omap z <Plug>(easymotion-t)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:JK motion option                    *<Plug>(easymotion-j)* *<Plug>(easymotion-k)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-sol-j)| & |<Plug>(easymotion-sol-k)| to the start
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Start of Line JK motion     *<Plug>(easymotion-sol-j)* *<Plug>(easymotion-sol-k)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                 *<Plug>(easymotion-sol-bd-jk)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:End of Line JK motion       *<Plug>(easymotion-eol-j)* *<Plug>(easymotion-eol-k)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                 *<Plug>(easymotion-eol-bd-jk)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-eol-j)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-eol-K)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:iskeyword compatible word motions           *<Plug>(easymotion-iskeyword-w)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-b)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-bd-w)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-e)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-ge)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-bd-e)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        motions with another |<Plug>| mappings.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>w <Plug>(easymotion-iskeyword-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>b <Plug>(easymotion-iskeyword-b)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-n)                         *<Plug>(easymotion-vim-n)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-N)                         *<Plug>(easymotion-vim-N)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    This is vim compatible |n| & |N| easymotion. Unlike |<Plug>(easymotion-n)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    and |<Plug>(easymotion-N)| 's direction is always forward or backward,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-sl)                                   *<Plug>(easymotion-sl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                     *<Plug>(easymotion-bd-fl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-s)|, except the range
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-fl)                                   *<Plug>(easymotion-fl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-f)|, except the range
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-Fl)                                   *<Plug>(easymotion-Fl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-F)|, except the range
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-tl)                                   *<Plug>(easymotion-tl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-t)|, except the
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-Tl)                                   *<Plug>(easymotion-Tl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-T)|, except the
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-tl)                             *<Plug>(easymotion-bd-tl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-bd-t)|, except the
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-wl)                                   *<Plug>(easymotion-wl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-w)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bl)                                   *<Plug>(easymotion-bl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-b)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-wl)                             *<Plug>(easymotion-bd-wl)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-bd-w)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-el)                                   *<Plug>(easymotion-el)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-e)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-gel)                                 *<Plug>(easymotion-gel)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-ge)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-el)                             *<Plug>(easymotion-bd-el)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-bd-e)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-lineforward)                 *<Plug>(easymotion-lineforward)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                |<Plug>(easymotion-jumptoanywhere)|, except the range is
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-linebackward)               *<Plug>(easymotion-linebackward)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                |<Plug>(easymotion-jumptoanywhere)|, except the range is
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-lineanywhere)               *<Plug>(easymotion-lineanywhere)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-jumptoanywhere)|,
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-{find}n)* *<Plug>(easymotion-{find}2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-s2)* *<Plug>(easymotion-f2)* *<Plug>(easymotion-F2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-t2)* *<Plug>(easymotion-T2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-bd-f2)* *<Plug>(easymotion-bd-t2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-sl2)* *<Plug>(easymotion-fl2)* *<Plug>(easymotion-Fl2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-tl2)* *<Plug>(easymotion-Tl2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-bd-fl2)* *<Plug>(easymotion-bd-tl2)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-sn)* *<Plug>(easymotion-fn)* *<Plug>(easymotion-Fn)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-tn)* *<Plug>(easymotion-Tn)* *<Plug>(easymotion-bd-tn)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-sln)* *<Plug>(easymotion-fln)* *<Plug>(easymotion-Fln)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-tln)* *<Plug>(easymotion-Tln)* *<Plug>(easymotion-bd-tln)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    nmap s         <Plug>(easymotion-s2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    xmap s         <Plug>(easymotion-s2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    omap z         <Plug>(easymotion-s2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    nmap <Leader>s <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    xmap <Leader>s <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    omap <Leader>z <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    keymappings works after this motion(|<Plug>(easymotion-sn)|) to move next or
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    'n' key motion(e.g. |<Plug>(easymotion-sn)|). This command is inspired
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-s)|  -> 'Search for 1 character: '
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-s2)| -> 'Search for 2 characters: '
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-sn)| -> 'Search for characters: '
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    Using the 'n' key find motion (e.g. |<Plug>(easymotion-sn)|), EasyMotion
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    By default, when using |<Plug>(easymotion-next)| and/or
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    |<Plug>(easymotion-prev)|, EasyMotion highlights matched text until the
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                    *<Plug>(easymotion-prefix)*
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:The default leader key can be changed with the |<Plug>(easymotion-prefix)|
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map <Leader> <Plug>(easymotion-prefix)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-{motion})
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map s <Plug>(easymotion-s)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map _f <Plug>(easymotion-f)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map <C-T> <Plug>(easymotion-T)
vim/packs-cp/opt/ale/plugin/ale.vim:" <Plug> mappings for commands
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next) :ALENext<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_error) :ALENext -error<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_last) :ALELast<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinition -vsplit<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_implementation) :ALEGoToImplementation<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_implementation_in_tab) :ALEGoToImplementation -tab<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_implementation_in_split) :ALEGoToImplementation -split<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_implementation_in_vsplit) :ALEGoToImplementation -vsplit<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:inoremap <silent> <Plug>(ale_complete) <C-\><C-O>:ALEComplete<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_import) :ALEImport<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_rename) :ALERename<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_filerename) :ALEFileRename<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_code_action) :ALECodeAction<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_info) :ALEInfo<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_info_echo) :ALEInfo -echo<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_info_clipboard) :ALEInfo -clipboard<Return>
vim/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_info_preview) :ALEInfo -preview<Return>
vim/packs-cp/opt/supertab/plugin/supertab.vim:  if map =~ '<Plug>'
vim/packs-cp/opt/supertab/plugin/supertab.vim:    let plug = substitute(map, '.\{-}\(<Plug>\w\+\).*', '\1', '')
vim/packs-cp/opt/supertab/plugin/supertab.vim:    let map = substitute(map, '.\{-}\(<Plug>\w\+\).*', plug_map, '')
vim/packs-cp/opt/supertab/plugin/supertab.vim:  imap <script> <Plug>SuperTabForward <c-r>=SuperTab('n')<cr>
vim/packs-cp/opt/supertab/plugin/supertab.vim:  imap <script> <Plug>SuperTabBackward <c-r>=SuperTab('p')<cr>
vim/packs-cp/opt/supertab/plugin/supertab.vim:  exec 'imap ' . g:SuperTabMappingForward . ' <Plug>SuperTabForward'
vim/packs-cp/opt/supertab/plugin/supertab.vim:  exec 'imap ' . g:SuperTabMappingBackward . ' <Plug>SuperTabBackward'
vim/packs-cp/opt/supertab/plugin/supertab.vim:    elseif maparg('<CR>', 'i') =~ '<Plug>delimitMateCR'
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Up>     <Plug>(textmanip-move-up-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Down>   <Plug>(textmanip-move-down-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Left>   <Plug>(textmanip-move-left-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Right>  <Plug>(textmanip-move-right-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <M-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <M-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <M-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <M-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Up>     <Plug>(textmanip-move-up-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Down>   <Plug>(textmanip-move-down-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Left>   <Plug>(textmanip-move-left-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Right>  <Plug>(textmanip-move-right-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <Space>d <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <Space>d <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <Space>D <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <Space>D <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <CR>   <Plug>(textmanip-blank-below)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <S-CR> <Plug>(textmanip-blank-above)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <CR>   <Plug>(textmanip-blank-below)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <S-CR> <Plug>(textmanip-blank-above)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-K> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-J> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-H> <Plug>(textmanip-duplicate-left)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <D-L> <Plug>(textmanip-duplicate-right)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Up>    <Plug>(textmanip-move-up-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Down>  <Plug>(textmanip-move-down-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Left>  <Plug>(textmanip-move-left-r)
vim/packs-cp/opt/vim-textmanip/README.md:xmap  <Right> <Plug>(textmanip-move-right-r)
vim/packs-cp/opt/vim-textmanip/README.md:nmap <C-s> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/README.md:xmap <C-s> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:    let plug = printf('<Plug>(textmanip-%s-%s%s)',
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:nnoremap <Plug>(textmanip-toggle-mode) :<C-u>call textmanip#mode('toggle')<CR>
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:xnoremap <Plug>(textmanip-toggle-mode) :<C-u>call textmanip#mode('toggle')<CR>gv
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:    let msg .= "  '<Plug>(textmanip-move-*-1col)' is obsolete\n"
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:    let msg .= "  '<Plug>(textmanip-move1-*)' for 1col movement\n"
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:xnoremap <silent> <Plug>(textmanip-move-right-1col)   :<C-u>call <SID>obsolete('1col')<CR>
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:xnoremap <silent> <Plug>(textmanip-move-right-1col-i) :<C-u>call <SID>obsolete('1col')<CR>
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:xnoremap <silent> <Plug>(textmanip-move-right-1col-r) :<C-u>call <SID>obsolete('1col')<CR>
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:xnoremap <silent> <Plug>(textmanip-move-left-1col)    :<C-u>call <SID>obsolete('1col')<CR>
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:xnoremap <silent> <Plug>(textmanip-move-left-1col-i)  :<C-u>call <SID>obsolete('1col')<CR>
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:xnoremap <silent> <Plug>(textmanip-move-left-1col-r)  :<C-u>call <SID>obsolete('1col')<CR>
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  execute printf("nmap \<%s-d> <Plug>(textmanip-duplicate-down)", prefix)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  execute printf("nmap \<%s-D> <Plug>(textmanip-duplicate-up)",   prefix)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  execute printf("xmap \<%s-d> <Plug>(textmanip-duplicate-down)", prefix)
vim/packs-cp/opt/vim-textmanip/plugin/textmanip.vim:  execute printf("xmap \<%s-D> <Plug>(textmanip-duplicate-up)",   prefix)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	<Plug>(textmanip-toggle-mode).
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-blank-above)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-blank-below)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-blank-above)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-blank-below)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-left)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-right)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move1-left)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move1-right)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:x_<Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-duplicate-up-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-duplicate-down-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-up-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-down-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-left-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-right-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-up-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-down-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-left-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-right-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move1-left-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move1-right-i)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-duplicate-up-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:n_<Plug>(textmanip-duplicate-down-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-up-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-down-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-left-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-duplicate-right-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-up-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-down-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-left-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move-right-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move1-left-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:v_<Plug>(textmanip-move1-right-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <CR>   <Plug>(textmanip-blank-below)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <S-CR> <Plug>(textmanip-blank-above)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <CR>   <Plug>(textmanip-blank-below)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <S-CR> <Plug>(textmanip-blank-above)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-K> <Plug>(textmanip-duplicate-up-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-J> <Plug>(textmanip-duplicate-down-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-H> <Plug>(textmanip-duplicate-left-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <D-L> <Plug>(textmanip-duplicate-right-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap  <Up>    <Plug>(textmanip-move-up-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap  <Down>  <Plug>(textmanip-move-down-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap  <Left>  <Plug>(textmanip-move-left-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap  <Right> <Plug>(textmanip-move-right-r)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <M-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <M-d> <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <M-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <M-D> <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <Space>d <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <Space>d <Plug>(textmanip-duplicate-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <Space>D <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <Space>D <Plug>(textmanip-duplicate-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-j> <Plug>(textmanip-move-down)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-k> <Plug>(textmanip-move-up)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-h> <Plug>(textmanip-move-left)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <C-l> <Plug>(textmanip-move-right)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	nmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	xmap <F10> <Plug>(textmanip-toggle-mode)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	   - <Plug>(textmanip-kickout)
vim/packs-cp/opt/vim-textmanip/doc/textmanip.txt:	  rename <Plug>(textmanip-move-*-1col) to <Plug>(textmanip-move1-*)
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>M <Plug>MarkToggle
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>N <Plug>MarkAllClear
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>N <Plug>MarkConfirmAllClear
vim/packs-cp/opt/vim-mark/README.md:    nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext
vim/packs-cp/opt/vim-mark/README.md:    nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev
vim/packs-cp/opt/vim-mark/README.md:    nmap * <Plug>MarkSearchOrCurNext
vim/packs-cp/opt/vim-mark/README.md:    nmap # <Plug>MarkSearchOrCurPrev
vim/packs-cp/opt/vim-mark/README.md:    nmap * <Plug>MarkSearchOrAnyNext
vim/packs-cp/opt/vim-mark/README.md:    nmap # <Plug>MarkSearchOrAnyPrev
vim/packs-cp/opt/vim-mark/README.md:    nmap n <Plug>MarkSearchAnyOrDefaultNext
vim/packs-cp/opt/vim-mark/README.md:    nmap N <Plug>MarkSearchAnyOrDefaultPrev
vim/packs-cp/opt/vim-mark/README.md:    nmap * <Plug>MarkSearchGroupNext
vim/packs-cp/opt/vim-mark/README.md:    nmap # <Plug>MarkSearchGroupPrev
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>1  <Plug>MarkSearchGroup1Next
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>!  <Plug>MarkSearchGroup1Prev
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>+* <Plug>MarkSearchUsedGroupNext
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>-* <Plug>MarkSearchUsedGroupPrev
vim/packs-cp/opt/vim-mark/README.md:    xmap <Leader>* <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/README.md:    vmap <Plug>IgnoreMarkSet <Plug>MarkSet
vim/packs-cp/opt/vim-mark/README.md:    xmap <Leader>m <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/autoload/mark.vim:	" <Plug>MarkSearchCurrentNext / <Plug>MarkSearchAnyNext.
vim/packs-cp/opt/ale/doc/ale.txt:  nmap <F8> <Plug>(ale_fix)
vim/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_complete)` is defined for this command. >
vim/packs-cp/opt/ale/doc/ale.txt:    imap <C-Space> <Plug>(ale_complete)
vim/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_documentation)` is defined for this command.
vim/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_find_references)` is defined for this command.
vim/packs-cp/opt/ale/doc/ale.txt:  nnoremap <silent> <Plug>(my_mapping) :ALEFindReferences -relative<Return>
vim/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_fix)` is defined for this command.
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition)`           - `:ALEGoToDefinition`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition_in_tab)`    - `:ALEGoToDefinition -tab`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition_in_split)`  - `:ALEGoToDefinition -split`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition_in_vsplit)` - `:ALEGoToDefinition -vsplit`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition)`           - `:ALEGoToTypeDefinition`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition_in_tab)`    - `:ALEGoToTypeDefinition -tab`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition_in_split)`  - `:ALEGoToTypeDefinition -split`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition_in_vsplit)` - `:ALEGoToTypeDefinition -vsplit`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_implementation)`           - `:ALEGoToImplementation`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_implementation_in_tab)`    - `:ALEGoToImplementation -tab`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_implementation_in_split)`  - `:ALEGoToImplementation -split`
vim/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_implementation_in_vsplit)` - `:ALEGoToImplementation -vsplit`
vim/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_hover)` is defined for this command.
vim/packs-cp/opt/ale/doc/ale.txt:  A Plug mapping `<Plug>(ale_import)` is defined for this command. This
vim/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_lint)` is defined for this command.
vim/packs-cp/opt/ale/doc/ale.txt:  The following |<Plug>| mappings are defined for the commands: >
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous) - ALEPrevious
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_wrap) - ALEPreviousWrap
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_error) - ALEPrevious -error
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_wrap_error) - ALEPrevious -wrap -error
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_warning) - ALEPrevious -warning
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_wrap_warning) - ALEPrevious -wrap -warning
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next) - ALENext
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_wrap) - ALENextWrap
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_error) - ALENext -error
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_wrap_error) - ALENext -wrap -error
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_warning) - ALENext -warning
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_wrap_warning) - ALENext -wrap -warning
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_first) - ALEFirst
vim/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_last) - ALELast
vim/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-k> <Plug>(ale_previous)
vim/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-j> <Plug>(ale_next)
vim/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
vim/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-j> <Plug>(ale_next_wrap)
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEToggle|        - `<Plug>(ale_toggle)`
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEEnable|        - `<Plug>(ale_enable)`
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEDisable|       - `<Plug>(ale_disable)`
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEToggleBuffer|  - `<Plug>(ale_toggle_buffer)`
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEEnableBuffer|  - `<Plug>(ale_enable_buffer)`
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEDisableBuffer| - `<Plug>(ale_disable_buffer)`
vim/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_detail)` is defined for this command.
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEReset|       - `<Plug>(ale_reset)`
vim/packs-cp/opt/ale/doc/ale.txt:  |ALEResetBuffer| - `<Plug>(ale_reset_buffer)`
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSet               :<C-u>if ! mark#MarkCurrentWord(v:count)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:vnoremap <silent> <Plug>MarkSet               :<C-u>if ! mark#DoMark(v:count, mark#GetVisualSelectionAsLiteralPattern())[0]<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:vnoremap <silent> <Plug>MarkIWhiteSet         :<C-u>if ! mark#DoMark(v:count, mark#GetVisualSelectionAsLiteralWhitespaceIndifferentPattern())[0]<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkRegex             :<C-u>if ! mark#MarkRegex(v:count, '')<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:vnoremap <silent> <Plug>MarkRegex             :<C-u>if ! mark#MarkRegex(v:count, mark#GetVisualSelectionAsRegexp())<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkClear             :<C-u>if ! mark#Clear(v:count)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkAllClear          :<C-u>call mark#ClearAll()<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkConfirmAllClear   :<C-u>if confirm('Really delete all marks? This cannot be undone.', "&Yes\n&No") == 1<Bar>call mark#ClearAll()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkToggle            :<C-u>call mark#Toggle()<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCurrentNext :<C-u>if ! mark#SearchCurrentMark(0)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCurrentPrev :<C-u>if ! mark#SearchCurrentMark(1)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchAnyNext     :<C-u>if ! mark#SearchAnyMark(0)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchAnyPrev     :<C-u>if ! mark#SearchAnyMark(1)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchNext          :<C-u>if ! mark#SearchNext(0)<Bar>execute 'normal!' v:count1 . '*zv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchPrev          :<C-u>if ! mark#SearchNext(1)<Bar>execute 'normal!' v:count1 . '#zv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchOrCurNext     :<C-u>if ! mark#SearchNext(0,'mark#SearchCurrentMark')<Bar>execute 'normal!' v:count1 . '*zv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchOrCurPrev     :<C-u>if ! mark#SearchNext(1,'mark#SearchCurrentMark')<Bar>execute 'normal!' v:count1 . '#zv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchOrAnyNext     :<C-u>if ! mark#SearchNext(0,'mark#SearchAnyMark')<Bar>execute 'normal!' v:count1 . '*zv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchOrAnyPrev     :<C-u>if ! mark#SearchNext(1,'mark#SearchAnyMark')<Bar>execute 'normal!' v:count1 . '#zv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchAnyOrDefaultNext      :<C-u>if mark#IsEnabled() && mark#GetCount() > 0<Bar>if ! mark#SearchAnyMark(0)<Bar>echoerr ingo#err#Get()<Bar>endif<Bar>else<Bar>execute 'normal!' v:count1 . 'nzv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchAnyOrDefaultPrev      :<C-u>if mark#IsEnabled() && mark#GetCount() > 0<Bar>if ! mark#SearchAnyMark(1)<Bar>echoerr ingo#err#Get()<Bar>endif<Bar>else<Bar>execute 'normal!' v:count1 . 'Nzv'<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchGroupNext     :<C-u>if ! mark#SearchGroupMark(v:count, 1, 0, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchGroupPrev     :<C-u>if ! mark#SearchGroupMark(v:count, 1, 1, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchUsedGroupNext	:<C-u>if ! mark#SearchNextGroup(v:count1, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchUsedGroupPrev	:<C-u>if ! mark#SearchNextGroup(v:count1, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCascadeStartWithStop  :<C-u>if ! mark#cascade#Start(v:count, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"   <Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCascadeNextWithStop   :<C-u>if ! mark#cascade#Next(v:count1, 1, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCascadePrevWithStop   :<C-u>if ! mark#cascade#Next(v:count1, 1, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCascadeStartNoStop    :<C-u>if ! mark#cascade#Start(v:count, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"   <Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCascadeNextNoStop     :<C-u>if ! mark#cascade#Next(v:count1, 0, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:nnoremap <silent> <Plug>MarkSearchCascadePrevNoStop     :<C-u>if ! mark#cascade#Next(v:count1, 0, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:			let l:plugMappingName = printf('<Plug>MarkSearchGroup%d%s', l:cnt, l:direction)
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSet', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>m <Plug>MarkSet
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSet', 'x')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	xmap <unique> <Leader>m <Plug>MarkSet
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkIWhiteSet.
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkRegex', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>r <Plug>MarkRegex
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkRegex', 'x')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	xmap <unique> <Leader>r <Plug>MarkRegex
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkClear', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>n <Plug>MarkClear
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkAllClear.
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkConfirmAllClear.
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkToggle.
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSearchCurrentNext', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>* <Plug>MarkSearchCurrentNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSearchCurrentPrev', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader># <Plug>MarkSearchCurrentPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSearchAnyNext', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>/ <Plug>MarkSearchAnyNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSearchAnyPrev', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>? <Plug>MarkSearchAnyPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSearchNext', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> * <Plug>MarkSearchNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:if !hasmapto('<Plug>MarkSearchPrev', 'n')
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> # <Plug>MarkSearchPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchOrCurNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchOrCurPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchOrAnyNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchOrAnyPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchAnyOrDefaultNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchAnyOrDefaultPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchGroupNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchGroupPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchUsedGroupNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:" No default mapping for <Plug>MarkSearchUsedGroupPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:- toggling marks on / off (via <Plug>MarkToggle)
vim/packs-cp/opt/vim-mark/doc/mark.txt:You can use different mappings by mapping to the <Plug>Mark... mappings (use
vim/packs-cp/opt/vim-mark/doc/mark.txt:":map <Plug>Mark" to list them all) before this plugin is sourced.
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>M <Plug>MarkToggle
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>N <Plug>MarkAllClear
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>N <Plug>MarkConfirmAllClear
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Plug>IgnoreMarkSearchNext <Plug>MarkSearchNext
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Plug>IgnoreMarkSearchPrev <Plug>MarkSearchPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap * <Plug>MarkSearchOrCurNext
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap # <Plug>MarkSearchOrCurPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap * <Plug>MarkSearchOrAnyNext
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap # <Plug>MarkSearchOrAnyPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap n <Plug>MarkSearchAnyOrDefaultNext
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap N <Plug>MarkSearchAnyOrDefaultPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap * <Plug>MarkSearchGroupNext
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap # <Plug>MarkSearchGroupPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>1  <Plug>MarkSearchGroup1Next
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>!  <Plug>MarkSearchGroup1Prev
vim/packs-cp/opt/vim-mark/doc/mark.txt:remapping all <Plug>-mappings.
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>+* <Plug>MarkSearchUsedGroupNext
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>-* <Plug>MarkSearchUsedGroupPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:You can achieve the same with the Mark plugin through the <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/doc/mark.txt:    xmap <Leader>* <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/doc/mark.txt:    vmap <Plug>IgnoreMarkSet <Plug>MarkSet
vim/packs-cp/opt/vim-mark/doc/mark.txt:    xmap <Leader>m <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/doc/mark.txt:- Add <Plug>MarkSearchAnyOrDefaultNext and <Plug>MarkSearchAnyOrDefaultPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:- ENH: Add <Plug>MarkSearchUsedGroupNext and <Plug>MarkSearchUsedGroupPrev to
vim/packs-cp/opt/vim-mark/doc/mark.txt:- ENH: Add <Plug>MarkSearchCascadeStartWithStop,
vim/packs-cp/opt/vim-mark/doc/mark.txt:  <Plug>MarkSearchCascadeNextWithStop, <Plug>MarkSearchCascadeStartNoStop,
vim/packs-cp/opt/vim-mark/doc/mark.txt:  <Plug>MarkSearchCascadeNextNoStop to search in cascading mark groups, i.e.
vim/packs-cp/opt/vim-mark/doc/mark.txt:- ENH: Add alternative <Plug>MarkConfirmAllClear optional command that works
vim/packs-cp/opt/vim-mark/doc/mark.txt:  like <Plug>MarkAllClear, but with confirmation. Thanks to Marcelo Montu for
vim/packs-cp/opt/vim-mark/doc/mark.txt:  include this in the script as <Plug>MarkIWhiteSet and
vim/packs-cp/opt/vim-mark/doc/mark.txt:- Add <Plug>MarkSearchGroupNext / <Plug>MarkSearchGroupPrev to enable
vim/packs-cp/opt/vim-mark/doc/mark.txt:  through new <Plug>MarkSearchOrCurNext, <Plug>MarkSearchOrCurPrev,
vim/packs-cp/opt/vim-mark/doc/mark.txt:  <Plug>MarkSearchOrAnyNext, <Plug>MarkSearchOrAnyPrev mappings. Based on an
vim/packs-cp/opt/vim-mark/doc/mark.txt:  vnoremap <Plug>MarkWhitespaceIndifferent DEFINITION ***
vim/packs-cp/opt/vim-mark/doc/mark.txt:  <Plug>MarkClear with [N] appended the pattern for the current mark (again
vim/packs-cp/opt/vim-mark/doc/mark.txt:  mark#Toggle() / <Plug>MarkToggle if you want toggling.
vim/packs-cp/opt/vim-mark/doc/mark.txt:  <Plug>MarkToggle mapping. Offer :MarkClear command as a replacement for the
vim/packs-cp/opt/vim-mark/doc/mark.txt:- Normal mode <Plug>MarkSet now has the same semantics as its visual mode
vim/packs-cp/opt/vim-mark/doc/mark.txt:- Added <Plug>MarkAllClear (without a default mapping), which clears all
vim/packs-cp/opt/vim-mark/doc/mark.txt:- Added <Plug>... mappings for hard-coded \*, \#, \/, \?, * and #, to allow
vim/packs-cp/opt/vim-mark/doc/mark.txt:  re-mapping and disabling. Beforehand, there were some <Plug>... mappings
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-maps-n)`               | Normal mode mappings                      |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-maps-i)`               | Insert mode mappings                      |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-maps-x)`               | Visual mode mappings                      |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-maps-o)`               | Operator-pending mappings                 |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-complete-word)`        | `cat /usr/share/dict/words`               |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-complete-path)`        | Path completion using `find` (file + dir) |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-complete-file)`        | File completion using `find`              |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-complete-line)`        | Line completion (all open buffers)        |
vim/packs-cp/opt/fzf.vim/README.md:| `<plug>(fzf-complete-buffer-line)` | Line completion (current buffer only)     |
vim/packs-cp/opt/fzf.vim/README.md:nmap <leader><tab> <plug>(fzf-maps-n)
vim/packs-cp/opt/fzf.vim/README.md:xmap <leader><tab> <plug>(fzf-maps-x)
vim/packs-cp/opt/fzf.vim/README.md:omap <leader><tab> <plug>(fzf-maps-o)
vim/packs-cp/opt/fzf.vim/README.md:imap <c-x><c-k> <plug>(fzf-complete-word)
vim/packs-cp/opt/fzf.vim/README.md:imap <c-x><c-f> <plug>(fzf-complete-path)
vim/packs-cp/opt/fzf.vim/README.md:imap <c-x><c-l> <plug>(fzf-complete-line)
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <plug>(-fzf-/) /
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <plug>(-fzf-:) :
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:  let prefix = "\<plug>(-fzf-".a:type.')'
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:    call feedkeys("\<plug>(-fzf-vim-do)")
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:        \ '<Plug>', s:blue('<Plug>', 'SpecialKey'), 'g')
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:    call feedkeys("\<Plug>(-fzf-complete-finish)")
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <silent> <Plug>(-fzf-complete-finish) a
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim.vim:  call feedkeys("\<Plug>(-fzf-complete-trigger)")
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-path)
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-file)
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-file-ag)
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-line)
vim/packs-cp/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-buffer-line)
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir /s/b')
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir /s/b/a:-d')
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -print \| sed '1d;s:^..::'")
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -type f -print -o -type l -print \| sed 's:^..::'")
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>
vim/packs-cp/opt/fzf.vim/plugin/fzf.vim:onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-n)               | Normal mode mappings
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-i)               | Insert mode mappings
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-x)               | Visual mode mappings
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-o)               | Operator-pending mappings
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-word)        |  `cat /usr/share/dict/words`
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-path)        | Path completion using  `find`  (file + dir)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-file)        | File completion using  `find`
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-line)        | Line completion (all open buffers)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-buffer-line) | Line completion (current buffer only)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    nmap <leader><tab> <plug>(fzf-maps-n)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    xmap <leader><tab> <plug>(fzf-maps-x)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    omap <leader><tab> <plug>(fzf-maps-o)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    imap <c-x><c-k> <plug>(fzf-complete-word)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    imap <c-x><c-f> <plug>(fzf-complete-path)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    imap <c-x><c-l> <plug>(fzf-complete-line)
vim/packs-cp/opt/tagalong.vim/autoload/tagalong.vim:    silent! call repeat#set("\<Plug>TagalongReapply")
vim/packs-cp/opt/tagalong.vim/autoload/tagalong.vim:        silent! call repeat#set("\<Plug>TagalongReapply")
vim/packs-cp/opt/tagalong.vim/autoload/tagalong.vim:    silent! call repeat#set("\<Plug>TagalongReapply")
vim/packs-cp/opt/ale/autoload/ale/completion.vim:inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o><C-p>
vim/packs-cp/opt/ale/autoload/ale/completion.vim:nnoremap <silent> <Plug>(ale_show_completion_menu) :call ale#completion#RestoreCompletionOptions()<CR>
vim/packs-cp/opt/ale/autoload/ale/completion.vim:cnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
vim/packs-cp/opt/ale/autoload/ale/completion.vim:vnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
vim/packs-cp/opt/ale/autoload/ale/completion.vim:onoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
vim/packs-cp/opt/ale/autoload/ale/completion.vim:        call ale#util#FeedKeys("\<Plug>(ale_show_completion_menu)")
vim/packs-cp/opt/tagalong.vim/plugin/tagalong.vim:nnoremap <silent> <Plug>TagalongReapply :call tagalong#Reapply()<cr>
vim/packs-cp/opt/vim-prettier/README.md:nmap <Leader>py <Plug>(Prettier)
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeBegin")
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>=  <Plug>FontsizeBegin
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeInc", "n")
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>+  <Plug>FontsizeInc
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeDec", "n")
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>-  <Plug>FontsizeDec
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeDefault", "n")
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>0  <Plug>FontsizeDefault
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeBegin       <SID>begin<SID>(fontsize)
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeInc         <SID>inc<SID>(fontsize)
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeDec         <SID>dec<SID>(fontsize)
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeDefault     <SID>default<SID>(fontsize)
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeSetDefault  <SID>setDefault<SID>(fontsize)
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeQuit        <SID>quit
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>=  <Plug>FontsizeBegin
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>+  <Plug>FontsizeInc
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>-  <Plug>FontsizeDec
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>0  <Plug>FontsizeDefault
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <F8>                        <Plug>FontsizeBegin
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <SID>DisableFontsizeInc     <Plug>FontsizeInc
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <SID>DisableFontsizeDec     <Plug>FontsizeDec
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <SID>DisableFontsizeDefault <Plug>FontsizeDefault
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:Any mapping to <Plug>FontsizeXxx overrides the default mappings, even if that
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:        exe printf('noremap <silent> <Plug>AirlineSelectTab%d :call <SID>select_tab(%d)<CR>', i%10, i-1)
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:        exe printf('noremap <silent> <Plug>AirlineSelectTab%02d :call <SID>select_tab(%d)<CR>', i, i-start_idx)
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:    noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:    noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>
vim/packs-cp/opt/vimtex/autoload/vimtex/log.vim:  nnoremap <buffer> <plug>(vimtex-log) :VimtexLog<cr>
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:  if maparg('<Plug>AirlineSelectTab1', 'n') is# ':1tabn<CR>'
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:      exe printf('noremap <silent> <Plug>AirlineSelectTab%d :%dtabn<CR>', i%10, i)
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:        exe printf('noremap <silent> <Plug>AirlineSelectTab%d :%dtabn<CR>', i, i-10)
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:  noremap <silent> <Plug>AirlineSelectPrevTab gT
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:  noremap <silent> <Plug>AirlineSelectNextTab :<C-U>exe repeat(':tabn\|', v:count1)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/toc.vim:  nnoremap <buffer> <plug>(vimtex-toc-open)   :call b:vimtex.toc.open()<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/toc.vim:  nnoremap <buffer> <plug>(vimtex-toc-toggle) :call b:vimtex.toc.toggle()<cr>
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<F5>','<Plug>XTablineToggleTabs')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader><F5>','<Plug>XTablineToggleFiltering')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<BS>','<Plug>XTablineSelectBuffer')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys(']l','<Plug>XTablineNextBuffer')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('[l','<Plug>XTablinePrevBuffer')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader>tr','<Plug>XTablineReopen')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdc <Plug>XTablineCdCurrent
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdd <Plug>XTablineCdDown1
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd2 <Plug>XTablineCdDown2
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd3 <Plug>XTablineCdDown3
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdh <Plug>XTablineCdHome
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  nnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier)
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  nnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier-reverse)
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  xnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier)
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  xnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier-reverse)
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  nnoremap <silent><buffer> <plug>(vimtex-delim-change-math)
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  nnoremap <silent><buffer> <plug>(vimtex-delim-delete)
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  inoremap <silent><buffer><expr> <plug>(vimtex-delim-close)
vim/packs-cp/opt/vimtex/autoload/vimtex/delim.vim:  nnoremap <silent><buffer> <plug>(vimtex-delim-add-modifiers)
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:if !hasmapto('<Plug>(Prettier)') && maparg('<Leader>p', 'n') ==# ''
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:  nmap <unique> <Leader>p <Plug>(Prettier)
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(Prettier) :Prettier<CR>
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(PrettierAsync) :PrettierAsync<CR>
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(PrettierFragment) :PrettierFragment<CR>
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(PrettierPartial) :PrettierPartial<CR>
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(PrettierVersion) :PrettierVersion<CR>
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(PrettierCli) :PrettierCli<CR>
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(PrettierCliVersion) :PrettierCliVersion<CR>
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:nnoremap <silent> <Plug>(PrettierCliPath) :PrettierCliPath<CR>
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj/envtargets.vim:  silent! execute 'keepjumps normal v'.a:count."\<Plug>(vimtex-ae)v"
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj/targets.vim:  omap <expr> <plug>(vimtex-targets-i) targets#e('o', 'i', 'i')
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj/targets.vim:  xmap <expr> <plug>(vimtex-targets-i) targets#e('x', 'i', 'i')
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj/targets.vim:  omap <expr> <plug>(vimtex-targets-a) targets#e('o', 'a', 'a')
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj/targets.vim:  xmap <expr> <plug>(vimtex-targets-a) targets#e('x', 'a', 'a')
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj/cmdtargets.vim:  silent! execute 'keepjumps normal v'.a:count."\<Plug>(vimtex-ac)v"
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj.vim:    execute printf('xnoremap <silent><buffer> <plug>(vimtex-i%s) :<c-u>call vimtex#text_obj#%s(1, 1%s)<cr>', l:map, l:name, l:optional)
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj.vim:    execute printf('xnoremap <silent><buffer> <plug>(vimtex-a%s) :<c-u>call vimtex#text_obj#%s(0, 1%s)<cr>', l:map, l:name, l:optional)
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj.vim:    execute printf('onoremap <silent><buffer> <plug>(vimtex-i%s) :<c-u>call vimtex#text_obj#%s(1, 0%s)<cr>', l:map, l:name, l:optional)
vim/packs-cp/opt/vimtex/autoload/vimtex/text_obj.vim:    execute printf('onoremap <silent><buffer> <plug>(vimtex-a%s) :<c-u>call vimtex#text_obj#%s(0, 0%s)<cr>', l:map, l:name, l:optional)
vim/packs-cp/opt/vim-airline/doc/airline.txt:  created, vim-airline just exposes those `<Plug>AirlineSeelctTab` keys
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>1 <Plug>AirlineSelectTab1
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>2 <Plug>AirlineSelectTab2
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>3 <Plug>AirlineSelectTab3
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>4 <Plug>AirlineSelectTab4
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>5 <Plug>AirlineSelectTab5
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>6 <Plug>AirlineSelectTab6
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>7 <Plug>AirlineSelectTab7
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>8 <Plug>AirlineSelectTab8
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>9 <Plug>AirlineSelectTab9
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>0 <Plug>AirlineSelectTab0
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>- <Plug>AirlineSelectPrevTab
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>+ <Plug>AirlineSelectNextTab
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>10 <Plug>AirlineSelectTab10
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>11 <Plug>AirlineSelectTab11
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>12 <Plug>AirlineSelectTab12
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>13 <Plug>AirlineSelectTab13
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
vim/packs-cp/opt/vim-airline/doc/airline.txt:  The <Plug>AirlineSelect<Prev/Next>Tab mapping handles counts as well,
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>01 <Plug>AirlineSelectTab01
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>02 <Plug>AirlineSelectTab02
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>03 <Plug>AirlineSelectTab03
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
vim/packs-cp/opt/vim-airline/doc/airline.txt:  `<Plug>AirlineSelectTab67` to reference buffer 67.
vim/packs-cp/opt/vim-airline/doc/airline.txt:  Note: To avoid ambiguity, there won't be <Plug>AirlineSelectTab1
vim/packs-cp/opt/vim-airline/doc/airline.txt:  - <Plug>AirlineSelectTab9 maps in mode 2 and 3.
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <F5>          <Plug>XTablineToggleTabs
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader><F5>  <Plug>XTablineToggleFiltering
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>tr    <Plug>XTablineReopen <SID>ReopenLastTab
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap ]l            <Plug>XTablineNextBuffer
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap [l            <Plug>XTablinePrevBuffer
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <BS>          <Plug>XTablineSelectBuffer
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdc       <Plug>XTablineCdCurrent
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdd       <Plug>XTablineCdDown1
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd2       <Plug>XTablineCdDown2
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd3       <Plug>XTablineCdDown3
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdh       <Plug>XTablineCdHome
vim/packs-cp/opt/emmet-vim/autoload/emmet.vim:  return "\<plug>(emmet-expand-abbr)"
vim/packs-cp/opt/nerdcommenter/autoload/nerdcommenter.vim:        silent! call repeat#set('V' . nlines . 'jo' . "\<Plug>NERDCommenter". a:type)
vim/packs-cp/opt/nerdcommenter/autoload/nerdcommenter.vim:        silent! call repeat#set("\<Plug>NERDCommenter". a:type)
vim/packs-cp/opt/nerdcommenter/autoload/nerdcommenter.vim:    "    maintain the cursor position (from <Plug>NERDCommenterInsert).
vim/packs-cp/opt/emmet-vim/plugin/emmet.vim:    exe item.mode . 'noremap '. buffer .' <plug>(' . item.plug . ') ' . item.func
vim/packs-cp/opt/emmet-vim/plugin/emmet.vim:      if !hasmapto('<plug>(' . item.plug . ')', item.mode) && !len(maparg(key, item.mode))
vim/packs-cp/opt/emmet-vim/plugin/emmet.vim:        exe item.mode . 'map ' . buffer . ' <unique> <silent>' . key . ' <plug>(' . item.plug . ')'
vim/packs-cp/opt/nerdcommenter/CHANGELOG.md:*  removed all the mapping options. Now, mappings to <plug> mappings are used
vim/packs-cp/opt/ale/README.md:ALE offers some commands with `<Plug>` keybinds for moving between warnings and
vim/packs-cp/opt/ale/README.md:nmap <silent> <C-k> <Plug>(ale_previous_wrap)
vim/packs-cp/opt/ale/README.md:nmap <silent> <C-j> <Plug>(ale_next_wrap)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  Or you can use following <plug> mappings:
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>,   <plug>(emmet-expand-abbr)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>;   <plug>(emmet-expand-word)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>u   <plug>(emmet-update-tag)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>d   <plug>(emmet-balance-tag-inward)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>D   <plug>(emmet-balance-tag-outward)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>n   <plug>(emmet-move-next)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>N   <plug>(emmet-move-prev)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>i   <plug>(emmet-image-size)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>/   <plug>(emmet-toggle-comment)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>j   <plug>(emmet-split-join-tag)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>k   <plug>(emmet-remove-tag)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>a   <plug>(emmet-anchorize-url)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>A   <plug>(emmet-anchorize-summary)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>m   <plug>(emmet-merge-lines)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  imap   <C-y>c   <plug>(emmet-code-pretty)
vim/packs-cp/opt/emmet-vim/doc/emmet.txt:  autocmd FileType css imap <tab> <plug>(emmet-expand-abbr)
vim/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:    " 'noremap <silent> <Plug>NERDCommenterComment :call nerdcommenter#Comment("n", "Comment")'
vim/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:    let plug = '<Plug>NERDCommenter' . a:target
vim/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:    " 'menu <silent> comment.Comment<Tab>\\cc <Plug>NERDCommenterComment'
vim/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:inoremap <silent> <Plug>NERDCommenterInsert <C-\><C-O>:call nerdcommenter#Comment('i', "Insert")<CR>
vim/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:nnoremap <Plug>NERDCommenterAltDelims :call nerdcommenter#SwitchToAlternativeDelimiters(1)<CR>
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterComment
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterNested
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterToggle
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterMinimal
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterInvert
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterSexy
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterYank
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterToEOL
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterAppend
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Map it to: <plug>NERDCommenterInsert
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:    imap <C-c> <plug>NERDCommenterInsert
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterAltDelims
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterAlignLeft
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:           <plug>NERDCommenterAlignBoth
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterUncomment
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:To change a mapping just map another key combo to the internal <plug> mapping.
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:    map ,omg <plug>NERDCommenterComment
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:See the help for the mapping in question to see which <plug> mapping to
vim/packs-cp/opt/vim-dirvish-git/README.md:autocmd vimrc FileType dirvish nmap <silent><buffer><C-n> <Plug>(dirvish_git_next_file)
vim/packs-cp/opt/vim-dirvish-git/README.md:autocmd vimrc FileType dirvish nmap <silent><buffer><C-p> <Plug>(dirvish_git_prev_file)
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:if !hasmapto('<Plug>(dirvish_git_prev_file)') && maparg('[f', 'n') ==? ''
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  silent! nmap <buffer> <unique> <silent> [f <Plug>(dirvish_git_prev_file)
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:if !hasmapto('<Plug>(dirvish_git_next_file)') && maparg(']f', 'n') ==? ''
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  silent! nmap <buffer> <unique> <silent> ]f <Plug>(dirvish_git_next_file)
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:if maparg('X', 'n') ==? '<Plug>(dirvish_arg)'
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  nmap <buffer><silent><expr> X "\<Plug>(dirvish_arg):<C-u>call dirvish_git#reload()<CR>"
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  xmap <buffer><silent><expr> X "\<Plug>(dirvish_arg):<C-u>call dirvish_git#reload()<CR>"
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:nnoremap <Plug>(dirvish_git_next_file) :<C-u>call dirvish_git#jump_to_next_file()<CR>
vim/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:nnoremap <Plug>(dirvish_git_prev_file) :<C-u>call dirvish_git#jump_to_prev_file()<CR>
vim/packs-cp/opt/ctrlp.vim/plugin/ctrlp.vim:exe 'nn <silent> <plug>(ctrlp) :<c-u>'.g:ctrlp_cmd.'<cr>'
vim/packs-cp/opt/ctrlp.vim/plugin/ctrlp.vim:if g:ctrlp_map != '' && !hasmapto('<plug>(ctrlp)')
vim/packs-cp/opt/ctrlp.vim/plugin/ctrlp.vim:	exe 'map' g:ctrlp_map '<plug>(ctrlp)'
vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:    + Add <plug>(ctrlp) for launch CtrlP.
vim/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:    + 添加启动方式 <plug>(ctrlp) 。
vim/packs-cp/opt/fern.vim/test/behavior/alternate-file.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
vim/packs-cp/opt/fern.vim/test/behavior/alternate-file.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
vim/packs-cp/opt/fern.vim/test/behavior/jumplist.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
vim/packs-cp/opt/fern.vim/test/behavior/jumplist.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
vim/packs-cp/opt/fern.vim/test/behavior/test.vimspec:          \ <Plug>(test-input)
vim/packs-cp/opt/fern.vim/test/behavior/test.vimspec:    let value = execute("normal \<Plug>(test-input)")
vim/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("ggj\<Plug>(fern-action-move)")
vim/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("\<Plug>(fern-wait)", 'x')
vim/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("ggj\<Plug>(fern-action-remove)")
vim/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("\<Plug>(fern-wait)", 'x')
vim/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("ggj\<Plug>(fern-action-remove)")
vim/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("\<Plug>(fern-wait)", 'x')
vim/packs-cp/opt/fern.vim/test/util/test/test.vimspec:            \ <Plug>(test-input)
vim/packs-cp/opt/fern.vim/test/util/test/test.vimspec:      let value = execute("normal \<Plug>(test-input)")
vim/packs-cp/opt/fern.vim/README.md:  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nnoremap <buffer><silent> <Plug>(fern-replacer-p) :<C-u>call <SID>map_paste(0)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nnoremap <buffer><silent> <Plug>(fern-replacer-P) :<C-u>call <SID>map_paste(-1)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nnoremap <buffer><silent> <Plug>(fern-replacer-warn) :<C-u>call <SID>map_warn()<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  inoremap <buffer><silent><expr> <Plug>(fern-replacer-warn) <SID>map_warn()
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> p <Plug>(fern-replacer-p)
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> P <Plug>(fern-replacer-P)
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> o <Plug>(fern-replacer-warn)
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> O <Plug>(fern-replacer-warn)
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  imap <buffer> <C-m> <Plug>(fern-replacer-warn)
vim/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  imap <buffer> <Return> <Plug>(fern-replacer-warn)
vim/packs-cp/opt/vim-repeat/README.markdown:    silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)
vim/packs-cp/opt/vimtex/autoload/vimtex/view/mupdf.vim:  nnoremap <buffer> <plug>(vimtex-reverse-search)
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:"   silent! call repeat#set("\<Plug>MappingToRepeatCommand",3)
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:"   silent! call repeat#setreg("\<Plug>MappingToRepeatCommand", v:register)
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:"   nnoremap <silent> <Plug>MyMap
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatDot)      :<C-U>if !repeat#run(v:count)<Bar>echoerr repeat#errmsg()<Bar>endif<CR>
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\<Lt>C-R>",v:count)<CR>
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:if !hasmapto('<Plug>(RepeatDot)', 'n')
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap . <Plug>(RepeatDot)
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:if !hasmapto('<Plug>(RepeatUndo)', 'n')
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap u <Plug>(RepeatUndo)
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:if maparg('U','n') ==# '' && !hasmapto('<Plug>(RepeatUndoLine)', 'n')
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap U <Plug>(RepeatUndoLine)
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:if !hasmapto('<Plug>(RepeatRedo)', 'n')
vim/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap <C-R> <Plug>(RepeatRedo)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nnoremap <buffer><silent> <Plug>(fern-action-zoom) :<C-u>call <SID>call('zoom')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nnoremap <buffer><silent> <Plug>(fern-action-zoom:reset) :<C-u>call <SID>call('zoom_reset')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nmap <buffer><silent> <Plug>(fern-action-zoom:half) 4<Plug>(fern-action-zoom)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nmap <buffer><silent> <Plug>(fern-action-zoom:full) 9<Plug>(fern-action-zoom)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:    nmap <buffer><nowait> z <Plug>(fern-action-zoom)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:    nmap <buffer><nowait> Z <Plug>(fern-action-zoom:reset)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/wait.vim:        \ <Plug>(fern-wait-viewer:ready)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/wait.vim:  nmap <buffer> <Plug>(fern-wait) <Plug>(fern-wait-viewer:ready)
vim/packs-cp/opt/vimtex/autoload/vimtex/misc.vim:  nnoremap <buffer> <plug>(vimtex-reload) :VimtexReload<cr>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:select)   :<C-u>call <SID>call('open', 'select')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:split)    :<C-u>call <SID>call('open', 'split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:vsplit)   :<C-u>call <SID>call('open', 'vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:tabedit)  :<C-u>call <SID>call('open', 'tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:above)    :<C-u>call <SID>call('open', 'leftabove split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:left)     :<C-u>call <SID>call('open', 'leftabove vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:below)    :<C-u>call <SID>call('open', 'rightbelow split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:right)    :<C-u>call <SID>call('open', 'rightbelow vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:top)      :<C-u>call <SID>call('open', 'topleft split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:leftest)  :<C-u>call <SID>call('open', 'topleft vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:bottom)   :<C-u>call <SID>call('open', 'botright split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:rightest) :<C-u>call <SID>call('open', 'botright vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:drop)     :<C-u>call <SID>call('open', 'drop')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-error)   :<C-u>call <SID>call('open', 'edit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-split)   :<C-u>call <SID>call('open', 'edit/split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-vsplit)  :<C-u>call <SID>call('open', 'edit/vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-tabedit) :<C-u>call <SID>call('open', 'edit/tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \ <Plug>(fern-action-open:side)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open:left)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open:right)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open:right)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \ <Plug>(fern-action-open-or-enter)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-enter)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \ <Plug>(fern-action-open-or-expand)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-expand)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nmap <buffer><silent> <Plug>(fern-action-open:edit) <Plug>(fern-action-open:edit-or-error)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nmap <buffer><silent> <Plug>(fern-action-open) <Plug>(fern-action-open:edit)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> <C-m> <Plug>(fern-action-open-or-enter)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> <Return> <Plug>(fern-action-open-or-enter)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> l <Plug>(fern-action-open-or-expand)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> s <Plug>(fern-action-open:select)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> e <Plug>(fern-action-open)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> E <Plug>(fern-action-open:side)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> t <Plug>(fern-action-open:tabedit)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nnoremap <silent><buffer> <plug>(vimtex-env-change)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nnoremap <silent><buffer> <plug>(vimtex-env-change-math)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nnoremap <silent><buffer> <plug>(vimtex-env-delete)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nnoremap <silent><buffer> <plug>(vimtex-env-delete-math)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nnoremap <silent><buffer> <plug>(vimtex-env-toggle-star)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nnoremap <silent><buffer> <plug>(vimtex-env-toggle-math)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nnoremap <silent><buffer><expr> <plug>(vimtex-env-surround-operator)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  nmap     <silent><buffer>       <plug>(vimtex-env-surround-line)
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:        \ <plug>(vimtex-env-surround-operator)_
vim/packs-cp/opt/vimtex/autoload/vimtex/env.vim:  xnoremap <silent><buffer>       <plug>(vimtex-env-surround-visual)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-debug)            :<C-u>call <SID>call('debug')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reload:all)       :<C-u>call <SID>call('reload_all')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reload:cursor)    :<C-u>call <SID>call('reload_cursor')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-expand:stay)      :<C-u>call <SID>call('expand_stay')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-expand:in)        :<C-u>call <SID>call('expand_in')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-expand-tree:stay) :<C-u>call <SID>call('expand_tree_stay')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-expand-tree:in)   :<C-u>call <SID>call('expand_tree_in')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-collapse)         :<C-u>call <SID>call('collapse')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reveal)           :<C-u>call <SID>call('reveal')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reveal=)          :<C-u>call <SID>call_without_guard('reveal')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-focus:parent)     :<C-u>call <SID>call('focus_parent')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-enter)            :<C-u>call <SID>call('enter')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-leave)            :<C-u>call <SID>call('leave')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nmap <buffer> <Plug>(fern-action-reload) <Plug>(fern-action-reload:all)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nmap <buffer> <Plug>(fern-action-expand) <Plug>(fern-action-expand:in)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nmap <buffer> <Plug>(fern-action-expand-tree) <Plug>(fern-action-expand-tree:in)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <F5> <Plug>(fern-action-reload)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <C-m> <Plug>(fern-action-enter)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <Return> <Plug>(fern-action-enter)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <C-h> <Plug>(fern-action-leave)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <Backspace> <Plug>(fern-action-leave)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> l <Plug>(fern-action-expand)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> h <Plug>(fern-action-collapse)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> i <Plug>(fern-action-reveal)
vim/packs-cp/opt/vimtex/autoload/vimtex/context.vim:  nnoremap <buffer> <plug>(vimtex-context-menu) :VimtexContextMenu<cr>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:clear)  :<C-u>call <SID>call('mark_clear')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:set)    :<C-u>call <SID>call('mark_set')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:unset   :<C-u>call <SID>call('mark_unset')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:toggle) :<C-u>call <SID>call('mark_toggle')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vnoremap <buffer><silent> <Plug>(fern-action-mark:set)    :call <SID>call('mark_set')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vnoremap <buffer><silent> <Plug>(fern-action-mark:unset)  :call <SID>call('mark_unset')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vnoremap <buffer><silent> <Plug>(fern-action-mark:toggle) :call <SID>call('mark_toggle')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nmap <buffer> <Plug>(fern-action-mark) <Plug>(fern-action-mark:toggle)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vmap <buffer> <Plug>(fern-action-mark) <Plug>(fern-action-mark:toggle)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    nmap <buffer><nowait> <C-j> <Plug>(fern-action-mark)j
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    nmap <buffer><nowait> <C-k> k<Plug>(fern-action-mark)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    nmap <buffer><nowait> -     <Plug>(fern-action-mark)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    vmap <buffer><nowait> -     <Plug>(fern-action-mark)
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-compile)          :call vimtex#compiler#compile()<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-compile-ss)       :call vimtex#compiler#compile_ss()<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-compile-selected) :set opfunc=vimtex#compiler#compile_selected<cr>g@
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  xnoremap <buffer> <plug>(vimtex-compile-selected) :<c-u>call vimtex#compiler#compile_selected('visual')<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-compile-output)   :call vimtex#compiler#output()<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-stop)             :call vimtex#compiler#stop()<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-stop-all)         :call vimtex#compiler#stop_all()<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-clean)            :call vimtex#compiler#clean(0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-clean-full)       :call vimtex#compiler#clean(1)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-status)           :call vimtex#compiler#status(0)<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/compiler.vim:  nnoremap <buffer> <plug>(vimtex-status-all)       :call vimtex#compiler#status(1)<cr>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:select)   :<C-u>call <SID>call('diff', 'select', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:split)    :<C-u>call <SID>call('diff', 'split', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:vsplit)   :<C-u>call <SID>call('diff', 'vsplit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:tabedit)  :<C-u>call <SID>call('diff', 'tabedit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:above)    :<C-u>call <SID>call('diff', 'leftabove split', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:left)     :<C-u>call <SID>call('diff', 'leftabove vsplit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:below)    :<C-u>call <SID>call('diff', 'rightbelow split', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:right)    :<C-u>call <SID>call('diff', 'rightbelow vsplit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:top)      :<C-u>call <SID>call('diff', 'topleft split', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:leftest)  :<C-u>call <SID>call('diff', 'topleft vsplit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:bottom)   :<C-u>call <SID>call('diff', 'botright split', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:rightest) :<C-u>call <SID>call('diff', 'botright vsplit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-error)   :<C-u>call <SID>call('diff', 'edit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-split)   :<C-u>call <SID>call('diff', 'edit/split', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-vsplit)  :<C-u>call <SID>call('diff', 'edit/vsplit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-tabedit) :<C-u>call <SID>call('diff', 'edit/tabedit', v:false)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:select:vert)   :<C-u>call <SID>call('diff', 'select', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:split:vert)    :<C-u>call <SID>call('diff', 'split', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:vsplit:vert)   :<C-u>call <SID>call('diff', 'vsplit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:tabedit:vert)  :<C-u>call <SID>call('diff', 'tabedit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:above:vert)    :<C-u>call <SID>call('diff', 'leftabove split', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:left:vert)     :<C-u>call <SID>call('diff', 'leftabove vsplit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:below:vert)    :<C-u>call <SID>call('diff', 'rightbelow split', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:right:vert)    :<C-u>call <SID>call('diff', 'rightbelow vsplit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:top:vert)      :<C-u>call <SID>call('diff', 'topleft split', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:leftest:vert)  :<C-u>call <SID>call('diff', 'topleft vsplit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:bottom:vert)   :<C-u>call <SID>call('diff', 'botright split', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:rightest:vert) :<C-u>call <SID>call('diff', 'botright vsplit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-error:vert)   :<C-u>call <SID>call('diff', 'edit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-split:vert)   :<C-u>call <SID>call('diff', 'edit/split', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-vsplit:vert)  :<C-u>call <SID>call('diff', 'edit/vsplit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-tabedit:vert) :<C-u>call <SID>call('diff', 'edit/tabedit', v:true)<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \ <Plug>(fern-action-diff:side)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:left)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:right)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \ <Plug>(fern-action-diff:side:vert)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:left:vert)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:right:vert)",
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff:edit) <Plug>(fern-action-diff:edit-or-error)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff:edit:vert) <Plug>(fern-action-diff:edit-or-error:vert)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff) <Plug>(fern-action-diff:edit)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff:vert) <Plug>(fern-action-diff:edit:vert)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-hidden:set)    :<C-u>call <SID>call('hidden_set')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-hidden:unset)  :<C-u>call <SID>call('hidden_unset')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-hidden:toggle) :<C-u>call <SID>call('hidden_toggle')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-include)       :<C-u>call <SID>call('include')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-exclude)       :<C-u>call <SID>call('exclude')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-include=)      :<C-u>call <SID>call_without_guard('include')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-exclude=)      :<C-u>call <SID>call_without_guard('exclude')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nmap <buffer> <Plug>(fern-action-hidden) <Plug>(fern-action-hidden:toggle)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:    nmap <buffer><nowait> !  <Plug>(fern-action-hidden)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:    nmap <buffer><nowait> fi <Plug>(fern-action-include)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:    nmap <buffer><nowait> fe <Plug>(fern-action-exclude)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:  nnoremap <buffer><silent> <Plug>(fern-action-cancel) :<C-u>call <SID>call('cancel')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:  nnoremap <buffer><silent> <Plug>(fern-action-redraw) :<C-u>call <SID>call('redraw')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:    nmap <buffer><nowait> <C-c> <Plug>(fern-action-cancel)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:    nmap <buffer><nowait> <C-l> <Plug>(fern-action-redraw)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:label) :<C-u>call <SID>call('yank', 'label')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:badge) :<C-u>call <SID>call('yank', 'badge')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:bufname) :<C-u>call <SID>call('yank', 'bufname')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nmap <buffer> <Plug>(fern-action-yank) <Plug>(fern-action-yank:bufname)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:    nmap <buffer><nowait> y <Plug>(fern-action-yank)
vim/packs-cp/opt/vimtex/autoload/vimtex/doc.vim:  nnoremap <buffer> <plug>(vimtex-doc-package) :VimtexDocPackage<cr>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/system.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:system) :<C-u>call <SID>call('open_system')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/system.vim:    nmap <buffer><nowait> x <Plug>(fern-action-open:system)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:select)   :<C-u>call <SID>call('terminal', 'select')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:split)    :<C-u>call <SID>call('terminal', 'split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:vsplit)   :<C-u>call <SID>call('terminal', 'vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:tabedit)  :<C-u>call <SID>call('terminal', 'tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:above)    :<C-u>call <SID>call('terminal', 'leftabove split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:left)     :<C-u>call <SID>call('terminal', 'leftabove vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:below)    :<C-u>call <SID>call('terminal', 'rightbelow split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:right)    :<C-u>call <SID>call('terminal', 'rightbelow vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:top)      :<C-u>call <SID>call('terminal', 'topleft split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:leftest)  :<C-u>call <SID>call('terminal', 'topleft vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:bottom)   :<C-u>call <SID>call('terminal', 'botright split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:rightest) :<C-u>call <SID>call('terminal', 'botright vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-error)   :<C-u>call <SID>call('terminal', 'edit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-split)   :<C-u>call <SID>call('terminal', 'edit/split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-vsplit)  :<C-u>call <SID>call('terminal', 'edit/vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-tabedit) :<C-u>call <SID>call('terminal', 'edit/tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:        \ <Plug>(fern-action-terminal:side)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:        \   "\<Plug>(fern-action-terminal:left)",
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:        \   "\<Plug>(fern-action-terminal:right)",
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nmap <buffer><silent> <Plug>(fern-action-terminal:edit) <Plug>(fern-action-terminal:edit-or-error)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nmap <buffer><silent> <Plug>(fern-action-terminal) <Plug>(fern-action-terminal:edit)
vim/packs-cp/opt/vimtex/autoload/vimtex/qf.vim:  nnoremap <buffer> <plug>(vimtex-errors)  :call vimtex#qf#toggle()<cr>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-cd:root)  :<C-u>call <SID>call('cd_root', 'cd')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-lcd:root) :<C-u>call <SID>call('cd_root', 'lcd')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-tcd:root) :<C-u>call <SID>call('cd_root', 'tcd')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-cd:cursor)  :<C-u>call <SID>call('cd_cursor', 'cd')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-lcd:cursor) :<C-u>call <SID>call('cd_cursor', 'lcd')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-tcd:cursor) :<C-u>call <SID>call('cd_cursor', 'tcd')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nmap <buffer> <Plug>(fern-action-cd) <Plug>(fern-action-cd:cursor)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nmap <buffer> <Plug>(fern-action-lcd) <Plug>(fern-action-lcd:cursor)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nmap <buffer> <Plug>(fern-action-tcd) <Plug>(fern-action-tcd:cursor)
vim/packs-cp/opt/vimtex/autoload/vimtex/state.vim:  nnoremap <buffer> <plug>(vimtex-toggle-main)  :VimtexToggleMain<cr>
vim/packs-cp/opt/vimtex/autoload/vimtex/state.vim:  nnoremap <buffer> <plug>(vimtex-reload-state) :VimtexReloadState<cr>
vim/packs-cp/opt/vim-fugitive/plugin/fugitive.vim:nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
vim/packs-cp/opt/vim-fugitive/plugin/fugitive.vim:nmap <script> <Plug>fugitive: <Nop>
vim/packs-cp/opt/vim-fugitive/plugin/fugitive.vim:  let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/ex.vim:  nnoremap <buffer><silent> <Plug>(fern-action-ex)  :<C-u>call <SID>call('ex')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/ex.vim:  nnoremap <buffer><silent> <Plug>(fern-action-ex=) :<C-u>call <SID>call_without_guard('ex')<CR>
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  nnoremap <silent><buffer> <plug>(vimtex-cmd-delete)
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  nnoremap <silent><buffer> <plug>(vimtex-cmd-change)
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  inoremap <silent><buffer> <plug>(vimtex-cmd-create)
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  nnoremap <silent><buffer> <plug>(vimtex-cmd-create)
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  xnoremap <silent><buffer> <plug>(vimtex-cmd-create)
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  nnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-star)
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  nnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-frac)
vim/packs-cp/opt/vimtex/autoload/vimtex/cmd.vim:  xnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-frac)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/grep.vim:  nnoremap <buffer><silent> <Plug>(fern-action-grep)  :<C-u>call <SID>call('grep')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/grep.vim:  nnoremap <buffer><silent> <Plug>(fern-action-grep=) :<C-u>call <SID>call_without_guard('grep')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:select)   :<C-u>call <SID>call('rename', 'select')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:split)    :<C-u>call <SID>call('rename', 'split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:vsplit)   :<C-u>call <SID>call('rename', 'vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:tabedit)  :<C-u>call <SID>call('rename', 'tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:above)    :<C-u>call <SID>call('rename', 'leftabove split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:left)     :<C-u>call <SID>call('rename', 'leftabove vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:below)    :<C-u>call <SID>call('rename', 'rightbelow split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:right)    :<C-u>call <SID>call('rename', 'rightbelow vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:top)      :<C-u>call <SID>call('rename', 'topleft split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:leftest)  :<C-u>call <SID>call('rename', 'topleft vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:bottom)   :<C-u>call <SID>call('rename', 'botright split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:rightest) :<C-u>call <SID>call('rename', 'botright vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-error)   :<C-u>call <SID>call('rename', 'edit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-split)   :<C-u>call <SID>call('rename', 'edit/split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-vsplit)  :<C-u>call <SID>call('rename', 'edit/vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-tabedit) :<C-u>call <SID>call('rename', 'edit/tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename:edit) <Plug>(fern-action-rename:edit-or-error)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename) <Plug>(fern-action-rename:split)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:    nmap <buffer><nowait> R <Plug>(fern-action-rename)
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  let flags = substitute(flags, '<unique>', '', '') . (a:rhs =~# '<Plug>' ? '' : '<script>') . '<nowait>'
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:      call add(maps, mode.'map <buffer>' . substitute(flags, '<unique>', '', '') . ' <Plug>fugitive:' . a:lhs . ' ' . a:rhs)
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    if get(maparg('<Plug><cfile>', 'c', 0, 1), 'expr')
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:        let bufnames = [eval(maparg('<Plug><cfile>', 'c'))]
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  exe 'cnoremap <buffer> <expr> <Plug><cfile>' (a:0 ? a:1 : 'fugitive#Cfile()')
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|sil! exe "cunmap <buffer> <Plug><cfile>"'
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', 'gf',          '<SID>:find <Plug><cfile><CR>', '<silent><unique>', 1)
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', '<C-W>f',     '<SID>:sfind <Plug><cfile><CR>', '<silent><unique>', 1)
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', '<C-W><C-F>', '<SID>:sfind <Plug><cfile><CR>', '<silent><unique>', 1)
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', '<C-W>gf',  '<SID>:tabfind <Plug><cfile><CR>', '<silent><unique>', 1)
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('c', '<C-R><C-F>', '<Plug><cfile>', '<unique>', 1)
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  let old_browsex = maparg('<Plug>NetrwBrowseX', 'n')
vim/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    exe 'nnoremap <silent> <buffer> <Plug>NetrwBrowseX' new_browsex
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:path) :<C-u>call <SID>call('yank_path')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/yank.vim:  nmap <buffer> <Plug>(fern-action-yank) <Plug>(fern-action-yank:path)
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map_prefixed(0, 'n', 'i', '<plug>(vimtex-info)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map_prefixed(0, 'n', 'I', '<plug>(vimtex-info-full)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map_prefixed(0, 'n', 'x', '<plug>(vimtex-reload)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map_prefixed(0, 'n', 'X', '<plug>(vimtex-reload-state)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map_prefixed(1, 'n', 's', '<plug>(vimtex-toggle-main)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map_prefixed(0, 'n', 'q', '<plug>(vimtex-log)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map_prefixed(1, 'n', 'a', '<plug>(vimtex-context-menu)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'ds$', '<plug>(vimtex-env-delete-math)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'cs$', '<plug>(vimtex-env-change-math)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'dse', '<plug>(vimtex-env-delete)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'cse', '<plug>(vimtex-env-change)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'tse', '<plug>(vimtex-env-toggle-star)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'ts$', '<plug>(vimtex-env-toggle-math)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', '<F6>', '<plug>(vimtex-env-surround-line)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'x', '<F6>', '<plug>(vimtex-env-surround-visual)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'dsc',  '<plug>(vimtex-cmd-delete)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'csc',  '<plug>(vimtex-cmd-change)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'tsc',  '<plug>(vimtex-cmd-toggle-star)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'tsf',  '<plug>(vimtex-cmd-toggle-frac)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'x', 'tsf',  '<plug>(vimtex-cmd-toggle-frac)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'i', '<F7>', '<plug>(vimtex-cmd-create)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', '<F7>', '<plug>(vimtex-cmd-create)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'x', '<F7>', '<plug>(vimtex-cmd-create)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'dsd', '<plug>(vimtex-delim-delete)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'csd', '<plug>(vimtex-delim-change-math)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'tsd', '<plug>(vimtex-delim-toggle-modifier)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'x', 'tsd', '<plug>(vimtex-delim-toggle-modifier)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', 'tsD', '<plug>(vimtex-delim-toggle-modifier-reverse)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'x', 'tsD', '<plug>(vimtex-delim-toggle-modifier-reverse)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'i', ']]',  '<plug>(vimtex-delim-close)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:  call s:map(0, 'n', '<F8>', '<plug>(vimtex-delim-add-modifiers)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'l', '<plug>(vimtex-compile)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'o', '<plug>(vimtex-compile-output)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(1, 'n', 'L', '<plug>(vimtex-compile-selected)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(1, 'x', 'L', '<plug>(vimtex-compile-selected)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'k', '<plug>(vimtex-stop)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'K', '<plug>(vimtex-stop-all)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'e', '<plug>(vimtex-errors)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'c', '<plug>(vimtex-clean)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'C', '<plug>(vimtex-clean-full)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'g', '<plug>(vimtex-status)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'G', '<plug>(vimtex-status-all)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '%', '<plug>(vimtex-%)', 1)
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '%', '<plug>(vimtex-%)', 1)
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '%', '<plug>(vimtex-%)', 1)
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']]', '<plug>(vimtex-]])')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '][', '<plug>(vimtex-][)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[]', '<plug>(vimtex-[])')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[[', '<plug>(vimtex-[[)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']]', '<plug>(vimtex-]])')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '][', '<plug>(vimtex-][)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[]', '<plug>(vimtex-[])')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[[', '<plug>(vimtex-[[)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']]', '<plug>(vimtex-]])')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '][', '<plug>(vimtex-][)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[]', '<plug>(vimtex-[])')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[[', '<plug>(vimtex-[[)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']M', '<plug>(vimtex-]M)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']m', '<plug>(vimtex-]m)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[M', '<plug>(vimtex-[M)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[m', '<plug>(vimtex-[m)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']M', '<plug>(vimtex-]M)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']m', '<plug>(vimtex-]m)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[M', '<plug>(vimtex-[M)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[m', '<plug>(vimtex-[m)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']M', '<plug>(vimtex-]M)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']m', '<plug>(vimtex-]m)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[M', '<plug>(vimtex-[M)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[m', '<plug>(vimtex-[m)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']N', '<plug>(vimtex-]N)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']n', '<plug>(vimtex-]n)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[N', '<plug>(vimtex-[N)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[n', '<plug>(vimtex-[n)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']N', '<plug>(vimtex-]N)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']n', '<plug>(vimtex-]n)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[N', '<plug>(vimtex-[N)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[n', '<plug>(vimtex-[n)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']N', '<plug>(vimtex-]N)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']n', '<plug>(vimtex-]n)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[N', '<plug>(vimtex-[N)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[n', '<plug>(vimtex-[n)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']R', '<plug>(vimtex-]R)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']r', '<plug>(vimtex-]r)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[R', '<plug>(vimtex-[R)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[r', '<plug>(vimtex-[r)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']R', '<plug>(vimtex-]R)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']r', '<plug>(vimtex-]r)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[R', '<plug>(vimtex-[R)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[r', '<plug>(vimtex-[r)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']R', '<plug>(vimtex-]R)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']r', '<plug>(vimtex-]r)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[R', '<plug>(vimtex-[R)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[r', '<plug>(vimtex-[r)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']/', '<plug>(vimtex-]/)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', ']*', '<plug>(vimtex-]*)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[/', '<plug>(vimtex-[/)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', '[*', '<plug>(vimtex-[*)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']/', '<plug>(vimtex-]/)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', ']*', '<plug>(vimtex-]*)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[/', '<plug>(vimtex-[/)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', '[*', '<plug>(vimtex-[*)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']/', '<plug>(vimtex-]/)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', ']*', '<plug>(vimtex-]*)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[/', '<plug>(vimtex-[/)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', '[*', '<plug>(vimtex-[*)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'x', 'id', '<plug>(vimtex-id)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'x', 'ad', '<plug>(vimtex-ad)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'o', 'id', '<plug>(vimtex-id)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'o', 'ad', '<plug>(vimtex-ad)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'x', 'i$', '<plug>(vimtex-i$)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'x', 'a$', '<plug>(vimtex-a$)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'o', 'i$', '<plug>(vimtex-i$)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(0, 'o', 'a$', '<plug>(vimtex-a$)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', 'iP', '<plug>(vimtex-iP)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', 'aP', '<plug>(vimtex-aP)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', 'iP', '<plug>(vimtex-iP)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', 'aP', '<plug>(vimtex-aP)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', 'im', '<plug>(vimtex-im)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'x', 'am', '<plug>(vimtex-am)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', 'im', '<plug>(vimtex-im)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'o', 'am', '<plug>(vimtex-am)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'x', 'ic', '<plug>(vimtex-targets-i)c')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'x', 'ac', '<plug>(vimtex-targets-a)c')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'o', 'ic', '<plug>(vimtex-targets-i)c')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'o', 'ac', '<plug>(vimtex-targets-a)c')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'x', 'ie', '<plug>(vimtex-ie)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'x', 'ae', '<plug>(vimtex-ae)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'o', 'ie', '<plug>(vimtex-ie)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'o', 'ae', '<plug>(vimtex-ae)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'x', 'ic', '<plug>(vimtex-ic)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'x', 'ac', '<plug>(vimtex-ac)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'o', 'ic', '<plug>(vimtex-ic)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map(0, 'o', 'ac', '<plug>(vimtex-ac)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 't', '<plug>(vimtex-toc-open)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'T', '<plug>(vimtex-toc-toggle)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'v', '<plug>(vimtex-view)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    if !empty(maparg('<plug>(vimtex-reverse-search)', 'n'))
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:      call s:map_prefixed(1, 'n', 'r', '<plug>(vimtex-reverse-search)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map_prefixed(0, 'n', 'm', '<plug>(vimtex-imaps-list)')
vim/packs-cp/opt/vimtex/autoload/vimtex.vim:    call s:map(1, 'n', 'K', '<plug>(vimtex-doc-package)')
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-copy)  :<C-u>call <SID>call('clipboard_copy')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-move)  :<C-u>call <SID>call('clipboard_move')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-paste) :<C-u>call <SID>call('clipboard_paste')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-clear) :<C-u>call <SID>call('clipboard_clear')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:    nmap <buffer><nowait> C <Plug>(fern-action-clipboard-copy)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:    nmap <buffer><nowait> M <Plug>(fern-action-clipboard-move)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:    nmap <buffer><nowait> P <Plug>(fern-action-clipboard-paste)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-path)  :<C-u>call <SID>call('new_path')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-file)  :<C-u>call <SID>call('new_file')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-dir)   :<C-u>call <SID>call('new_dir')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-path=) :<C-u>call <SID>call_without_guard('new_path')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-file=) :<C-u>call <SID>call_without_guard('new_file')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-dir=)  :<C-u>call <SID>call_without_guard('new_dir')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-copy)      :<C-u>call <SID>call('copy')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-move)      :<C-u>call <SID>call('move')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-trash)     :<C-u>call <SID>call('trash')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-trash=)    :<C-u>call <SID>call_without_guard('trash')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-remove)    :<C-u>call <SID>call('remove')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-remove=)   :<C-u>call <SID>call_without_guard('remove')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> N <Plug>(fern-action-new-file)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> K <Plug>(fern-action-new-dir)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> c <Plug>(fern-action-copy)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> m <Plug>(fern-action-move)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> D <Plug>(fern-action-trash)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:select)   :<C-u>call <SID>call('rename', 'select')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:split)    :<C-u>call <SID>call('rename', 'split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:vsplit)   :<C-u>call <SID>call('rename', 'vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:tabedit)  :<C-u>call <SID>call('rename', 'tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:above)    :<C-u>call <SID>call('rename', 'leftabove split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:left)     :<C-u>call <SID>call('rename', 'leftabove vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:below)    :<C-u>call <SID>call('rename', 'rightbelow split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:right)    :<C-u>call <SID>call('rename', 'rightbelow vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:top)      :<C-u>call <SID>call('rename', 'topleft split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:leftest)  :<C-u>call <SID>call('rename', 'topleft vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:bottom)   :<C-u>call <SID>call('rename', 'botright split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:rightest) :<C-u>call <SID>call('rename', 'botright vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-error)   :<C-u>call <SID>call('rename', 'edit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-split)   :<C-u>call <SID>call('rename', 'edit/split')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-vsplit)  :<C-u>call <SID>call('rename', 'edit/vsplit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-tabedit) :<C-u>call <SID>call('rename', 'edit/tabedit')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename:edit) <Plug>(fern-action-rename:edit-or-error)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename) <Plug>(fern-action-rename:split)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:    nmap <buffer><nowait> R <Plug>(fern-action-rename)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-copy)  :<C-u>call <SID>call('clipboard_copy')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-move)  :<C-u>call <SID>call('clipboard_move')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-paste) :<C-u>call <SID>call('clipboard_paste')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-clear) :<C-u>call <SID>call('clipboard_clear')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:    nmap <buffer><nowait> C <Plug>(fern-action-clipboard-copy)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:    nmap <buffer><nowait> M <Plug>(fern-action-clipboard-move)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:    nmap <buffer><nowait> P <Plug>(fern-action-clipboard-paste)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-leaf)   :<C-u>call <SID>call('new_leaf')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-branch) :<C-u>call <SID>call('new_branch')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-copy)       :<C-u>call <SID>call('copy')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-move)       :<C-u>call <SID>call('move')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-remove)     :<C-u>call <SID>call('remove')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-edit-leaf)  :<C-u>call <SID>call('edit_leaf')<CR>
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> N <Plug>(fern-action-new-leaf)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> K <Plug>(fern-action-new-branch)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> c <Plug>(fern-action-copy)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> m <Plug>(fern-action-move)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> D <Plug>(fern-action-remove)
vim/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> e <Plug>(fern-action-edit-leaf)
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:    silent map <Plug>(ale_show_completion_menu)
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  \   'n  <Plug>(ale_show_completion_menu) * :call ale#completion#RestoreCompletionOptions()<CR>',
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  \   'o  <Plug>(ale_show_completion_menu) * <Nop>',
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:  \   'v  <Plug>(ale_show_completion_menu) * <Nop>',
vim/packs-cp/opt/ale/test/completion/test_completion_events.vader:Execute(Running the normal mode <Plug> keybind should reset the settings):
vim/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:nnoremap <silent> <Plug>(dirvish_quit) :<C-U>call <SID>buf_close()<CR>
vim/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:nnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args([getline('.')])<CR>
vim/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:xnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args(getline("'<", "'>"))<CR>
vim/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:nnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info([getline('.')],!!v:count)<CR>
vim/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:xnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info(getline("'<", "'>"),!!v:count)<CR>
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:if !hasmapto('<Plug>(dirvish_quit)', 'n')
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> q <Plug>(dirvish_quit)'
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> gq <Plug>(dirvish_quit)'
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:if !hasmapto('<Plug>(dirvish_arg)', 'n')
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> x <Plug>(dirvish_arg)'
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'xmap '.s:nowait.'<buffer> x <Plug>(dirvish_arg)'
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:if !hasmapto('<Plug>(dirvish_K)', 'n')
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> K <Plug>(dirvish_K)'
vim/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'xmap '.s:nowait.'<buffer> K <Plug>(dirvish_K)'
vim/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:nnoremap <silent> <Plug>(dirvish_up) :<C-U>exe 'Dirvish' fnameescape(fnamemodify(@%, ':p'.(@%[-1:]=~'[\\/]'?':h':'').repeat(':h',v:count1)))<CR>
vim/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:nnoremap <silent> <Plug>(dirvish_split_up) :<C-U>split<bar>exe 'Dirvish' fnameescape(fnamemodify(@%, ':p'.(@%[-1:]=~'[\\/]'?':h':'').repeat(':h',v:count1)))<CR>
vim/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:nnoremap <silent> <Plug>(dirvish_vsplit_up) :<C-U>vsplit<bar>exe 'Dirvish' fnameescape(fnamemodify(@%, ':p'.(@%[-1:]=~'[\\/]'?':h':'').repeat(':h',v:count1)))<CR>
vim/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:if mapcheck('-', 'n') ==# '' && !hasmapto('<Plug>(dirvish_up)', 'n')
vim/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:  nmap - <Plug>(dirvish_up)
vim/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_up)
vim/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_split_up)
vim/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_vsplit_up)
vim/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_quit)
vim/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_arg)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	<Plug>(fern-action-{name})
vim/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer> g? <Plug>(fern-action-help)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	e                         open       <Plug>(fern-action-open)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	<Plug>(fern-action-open)  open:edit  <Plug>(fern-action-open:edit)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:split)
vim/packs-cp/opt/fern.vim/doc/fern.txt:Fern provide |<Plug>(fern-wait)| mapping as a helper.
vim/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer> <Plug>(fern-my-leave-and-tcd)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-leave)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-wait)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-tcd:root)
vim/packs-cp/opt/fern.vim/doc/fern.txt:Without <Plug>(fern-wait), the "tcd:root" action will be invoked before actual
vim/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer><expr> <Plug>(fern-my-open-or-expand)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-open)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-expand)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-my-open-or-enter)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-open)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-enter)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-my-open-or-expand-or-collapse)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-open)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-expand)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-collapse)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-my-expand-or-enter)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-expand)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-enter)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-my-leave-or-open-or-enter)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-leave)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-open-or-enter)",
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom:reset)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom:half)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	This is an alias of "4<Plug>(fern-action-zoom)"
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom:full)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	This is an alias of "9<Plug>(fern-action-zoom)"
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden:set)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden:unset)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden:toggle)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-include)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-include=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-include)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-include=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-exclude)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-exclude=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-exclude)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-exclude=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:clear)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:set)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:unset)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:toggle)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-debug)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reload:all)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reload:cursor)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reload)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-reload)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-reload:cursor)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand:stay)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand:in)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-expand)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-expand:stay)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand-tree:stay)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand-tree:in)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand-tree)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-expand-tree)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-expand-tree:stay)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-collapse)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reveal)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reveal=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-reveal)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-reveal=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-focus:parent)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-enter)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-leave)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:select)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:drop)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-error)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:above)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:left)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:below)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:right)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:top)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:leftest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:bottom)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:rightest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:side)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open-or-enter)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open-or-expand)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open:edit)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open:edit-or-tabedit)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open:select)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:select)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:select:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:split:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:vsplit:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:tabedit:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-error)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-error:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-split:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-vsplit:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-tabedit:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:above)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:above:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:left)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:left:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:below)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:below:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:right)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:right:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:top)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:top:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:leftest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:leftest:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:bottom)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:bottom:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:rightest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:rightest:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:side)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:side:vert)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff:edit)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff:edit-or-tabedit)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff:select)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cancel)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-redraw)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:label)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:badge)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:bufname)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-yank)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-yank:label)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-wait)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-ex)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-ex=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-ex)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-ex=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-path)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-path=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-new-path)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-new-path=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-file)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-file=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-new-file)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-new-file=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-dir)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-dir=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-new-dir)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-new-dir=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-copy)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-move)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-trash)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-trash=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-trash)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-trash=)y<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-remove)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-remove=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-trash)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-trash=)y<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cd:root)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-lcd:root)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-tcd:root)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cd:cursor)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-lcd:cursor)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-tcd:cursor)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cd)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-lcd)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-tcd)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-cd)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-cd:root)
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-copy)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-move)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-paste)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-clear)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-grep)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-grep=)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-grep)
vim/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-grep=)foo<CR>
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:select)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:above)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:left)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:below)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:right)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:top)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:leftest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:bottom)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:rightest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-error)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:side)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:system)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:select)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:above)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:left)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:below)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:right)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:top)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:leftest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:bottom)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:rightest)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-error)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-split)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-vsplit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-tabedit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:side)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:path)*
vim/packs-cp/opt/fern.vim/doc/fern.txt:	Yank the node path. In FILE scheme, |<Plug>(fern-action-yank)| is
vim/packs-cp/opt/fern.vim/doc/fern-develop.txt:	is an action name, and {rhs} is a <Plug> mapping like:
vim/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['a', 'choice', '<Plug>(fern-action-choice)'],
vim/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['.', 'repeat', '<Plug>(fern-action-repeat)'],
vim/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['?', 'help', '<Plug>(fern-action-help)'],
vim/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['', 'help:all', '<Plug>(fern-action-help:all)'],
vim/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:        \ printf('<Plug>(%s)', a:old),
vim/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:        \ printf('<Plug>(%s)', a:new),
vim/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:  silent execute printf('nmap <buffer> <Plug>(%s) <Plug>(%s)', a:old, a:new)
vim/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:  return printf("\<Plug>(%s)", a:new)
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-choice) :<C-u>call <SID>_map_choice()<CR>',
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-repeat) :<C-u>call <SID>_map_repeat()<CR>',
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-help) :<C-u>call <SID>_map_help(0)<CR>',
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-help:all) :<C-u>call <SID>_map_help(1)<CR>',
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  if !hasmapto(printf('<Plug>(%s-action-choice)', s:prefix), 'n')
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:          \ 'nmap <buffer> a <Plug>(%s-action-choice)',
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  if !hasmapto(printf('<Plug>(%s-action-repeat)', s:prefix), 'n')
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:          \ 'nmap <buffer> . <Plug>(%s-action-repeat)',
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  if !hasmapto(printf('<Plug>(%s-action-help)', s:prefix), 'n')
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:          \ 'nmap <buffer> ? <Plug>(%s-action-help)',
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  let pattern1 = printf('^<Plug>(%s-action-\zs.*\ze)$', s:prefix)
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  let pattern2 = printf('^<Plug>(%s-action-', s:prefix)
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  call filter(rs1, { _, v -> v[0] !~# '^<Plug>' || v[0] =~# pattern2 })
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  let ms = split(execute(printf('nmap <Plug>(%s-action-', s:prefix)), '\n')
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  call map(ms, { _, v -> matchstr(v, '^<Plug>(\zs.*\ze)$') })
vim/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ "normal \<Plug>(%s-action-%s)",
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:  if !hasmapto('<Plug>CalendarV')
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>cal <Plug>CalendarV
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:  if !hasmapto('<Plug>CalendarH')
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>caL <Plug>CalendarH
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:nnoremap <silent> <Plug>CalendarV :cal calendar#show(0)<CR>
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:nnoremap <silent> <Plug>CalendarH :cal calendar#show(1)<CR>
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:nnoremap <silent> <Plug>CalendarT :cal calendar#show(2)<CR>
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarClose  :call calendar#close()<cr>
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarDoAction  :call calendar#action()<cr>
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarDoAction  :call calendar#action()<cr>
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarGotoToday :call calendar#show(b:CalendarDir)<cr>
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarShowHelp  :call <SID>CalendarHelp()<cr>
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarReDisplay :call calendar#show(' . a:dir . ',' . a:vyear . ',' . a:vmnth . ')<cr>'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoPrevMonth :call calendar#action("<' . pnav . '")<cr>'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoNextMonth :call calendar#action("' . nnav . '>")<cr>'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoPrevYear  :call calendar#action("PrevYear")<cr>'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoNextYear  :call calendar#action("NextYear")<cr>'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nmap <buffer> <2-LeftMouse> <Plug>CalendarDoAction
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['close'] . ' <Plug>CalendarClose'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['do_action'] . ' <Plug>CalendarDoAction'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_today'] . ' <Plug>CalendarGotoToday'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['show_help'] . ' <Plug>CalendarShowHelp'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['redisplay'] . ' <Plug>CalendarRedisplay'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_next_month'] . ' <Plug>CalendarGotoNextMonth'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_prev_month'] . ' <Plug>CalendarGotoPrevMonth'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_next_year'] . ' <Plug>CalendarGotoNextYear'
vim/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_prev_year'] . ' <Plug>CalendarGotoPrevYear'

$lazy

plenary.nvim/plugin/plenary.vim:nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
plenary.nvim/doc/plenary-test.txt:`<Plug>PlenaryTestFile`. For example:
plenary.nvim/doc/plenary-test.txt:  nmap <leader>t <Plug>PlenaryTestFile
plenary.nvim/doc/plenary-test.txt:<Plug>PlenaryTestFile
plenary.nvim/README.md:To run the current spec file in a floating window, you can use the keymap `<Plug>PlenaryTestFile`. For example:
plenary.nvim/README.md:nmap <leader>t <Plug>PlenaryTestFile
telescope.nvim/plugin/telescope.lua:--     To use it, do `cmap <C-R> <Plug>(TelescopeFuzzyCommandSearch)
telescope.nvim/plugin/telescope.lua:  "<Plug>(TelescopeFuzzyCommandSearch)",
telescope.nvim/doc/telescope.txt:                               "<Plug>" are also shown (default: true)
telescope.nvim/lua/telescope/builtin/init.lua:---@field show_plug boolean: if true, the keymaps for which the lhs contains "<Plug>" are also shown (default: true)
telescope.nvim/lua/telescope/builtin/__internal.lua:        if opts.show_plug or not string.find(keymap.lhs, "<Plug>") then
Comment.nvim/plugin/Comment.lua:---Comment.nvim provides <Plug> mappings for most commonly used actions. These
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_linewise)*
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_blockwise)*
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_linewise_current)*
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_blockwise_current)*
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_linewise_count)*
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_blockwise_count)*
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_linewise_visual)*
Comment.nvim/plugin/Comment.lua:---  *<Plug>(comment_toggle_blockwise_visual)*
Comment.nvim/plugin/Comment.lua:---            and '<Plug>(comment_toggle_linewise_current)'
Comment.nvim/plugin/Comment.lua:---            or '<Plug>(comment_toggle_linewise_count)'
Comment.nvim/plugin/Comment.lua:---    vim.keymap.set('n', 'gc', '<Plug>(comment_toggle_linewise)')
Comment.nvim/plugin/Comment.lua:---    vim.keymap.set('x', 'gc', '<Plug>(comment_toggle_linewise_visual)')
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_linewise)',
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_blockwise)',
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_linewise_current)',
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_blockwise_current)',
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_linewise_count)',
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_blockwise_count)',
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_linewise_visual)',
Comment.nvim/plugin/Comment.lua:    '<Plug>(comment_toggle_blockwise_visual)',
Comment.nvim/doc/Comment.txt:Comment.nvim provides <Plug> mappings for most commonly used actions. These
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_linewise)*
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_blockwise)*
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_linewise_current)*
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_blockwise_current)*
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_linewise_count)*
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_blockwise_count)*
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_linewise_visual)*
Comment.nvim/doc/Comment.txt:  *<Plug>(comment_toggle_blockwise_visual)*
Comment.nvim/doc/Comment.txt:            and '<Plug>(comment_toggle_linewise_current)'
Comment.nvim/doc/Comment.txt:            or '<Plug>(comment_toggle_linewise_count)'
Comment.nvim/doc/Comment.txt:    vim.keymap.set('n', 'gc', '<Plug>(comment_toggle_linewise)')
Comment.nvim/doc/Comment.txt:    vim.keymap.set('x', 'gc', '<Plug>(comment_toggle_linewise_visual)')
Comment.nvim/doc/Comment.txt:and <Plug> (Read |comment.plugmap|) mappings. These API can be used to setup your
Comment.nvim/doc/tags:<Plug>(comment_toggle_blockwise)	Comment.txt	/*<Plug>(comment_toggle_blockwise)*
Comment.nvim/doc/tags:<Plug>(comment_toggle_blockwise_count)	Comment.txt	/*<Plug>(comment_toggle_blockwise_count)*
Comment.nvim/doc/tags:<Plug>(comment_toggle_blockwise_current)	Comment.txt	/*<Plug>(comment_toggle_blockwise_current)*
Comment.nvim/doc/tags:<Plug>(comment_toggle_blockwise_visual)	Comment.txt	/*<Plug>(comment_toggle_blockwise_visual)*
Comment.nvim/doc/tags:<Plug>(comment_toggle_linewise)	Comment.txt	/*<Plug>(comment_toggle_linewise)*
Comment.nvim/doc/tags:<Plug>(comment_toggle_linewise_count)	Comment.txt	/*<Plug>(comment_toggle_linewise_count)*
Comment.nvim/doc/tags:<Plug>(comment_toggle_linewise_current)	Comment.txt	/*<Plug>(comment_toggle_linewise_current)*
Comment.nvim/doc/tags:<Plug>(comment_toggle_linewise_visual)	Comment.txt	/*<Plug>(comment_toggle_linewise_visual)*
Comment.nvim/doc/plugs.md:`Comment.nvim` now has `:help` docs 🎉. Read `:h comment.plugmap` for the `<Plug>` mappings documentation and usage.
Comment.nvim/lua/Comment/init.lua:            K('n', cfg.opleader.line, '<Plug>(comment_toggle_linewise)', { desc = 'Comment toggle linewise' })
Comment.nvim/lua/Comment/init.lua:            K('n', cfg.opleader.block, '<Plug>(comment_toggle_blockwise)', { desc = 'Comment toggle blockwise' })
Comment.nvim/lua/Comment/init.lua:                return vvar('count') == 0 and '<Plug>(comment_toggle_linewise_current)'
Comment.nvim/lua/Comment/init.lua:                    or '<Plug>(comment_toggle_linewise_count)'
Comment.nvim/lua/Comment/init.lua:                return vvar('count') == 0 and '<Plug>(comment_toggle_blockwise_current)'
Comment.nvim/lua/Comment/init.lua:                    or '<Plug>(comment_toggle_blockwise_count)'
Comment.nvim/lua/Comment/init.lua:                '<Plug>(comment_toggle_linewise_visual)',
Comment.nvim/lua/Comment/init.lua:                '<Plug>(comment_toggle_blockwise_visual)',
Comment.nvim/lua/Comment/api.lua:---and <Plug> (Read |comment.plugmap|) mappings. These API can be used to setup your

