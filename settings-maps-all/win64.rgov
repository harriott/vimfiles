
generated by  $vimfiles/settings-maps-all/all-maps-win64.ps1

maps in  D:\Dropbox\JH\core\IT\onGitHub\vimfiles

D:\Dropbox\JH\core\IT\onGitHub\vimfiles\settings-active-vim\unix-functions.vim ⋮function airline#extensions#keymap#init(ext)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\settings-active-vim\unix-functions.vim ⋮function <SNR>131_key_mapping(lhs, rhs, noremap) abort
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\settings-active-vim\unix-functions.vim ⋮function airline#extensions#keymap#status()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <Space> za
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile /.git/COMMIT_EDITMSG/ nnoremap <buffer> <F4> :wa<CR>:q<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile /.git/COMMIT_EDITMSG/ inoremap <buffer> <F4> <Esc>:wa<CR>:q<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <F5> :wa<CR>:edit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <F5> <Esc>:wa<CR>:e<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮vnoremap <F5> <Esc>:wa<CR>:e<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile /tmp/.nnn* nnoremap <buffer> <C-e> ggVGd:wq <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile /tmp/.nnn* nnoremap <buffer> <F4> :wa<CR>:q<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile /tmp/.nnn* inoremap <buffer> <F4> <Esc>:wa<CR>:q<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile *msgFilterRules.dat nnoremap <buffer> <F12> :%s#^name="\v(.*$)\n(^.*$)\n(^.*$)\n(^.*$)\n(^.*$)\n(^.*$)#name="\1â\2â\3â\4â\5â\6#g <bar> nohlsearch <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile *msgFilterRules.dat nnoremap <buffer> <S-F12> :%s#^name="\v(.*)â(.*)â(.*)â(.*)â(.*)â(.*)$#name="\1\r\2\r\3\r\4\r\5\r\6#g<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap : ,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮xnoremap : ,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮onoremap : ,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮"  these require use of  noremap  when trying to acces  :  generically
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap , :
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮xnoremap , :
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮onoremap , :
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap @@ @:
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap @: <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap g: g,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap g, <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap q, q:
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮xnoremap q, q:
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap q: <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮xnoremap q: <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮if v:lang=~'fr'|inoremap ² <Esc>~a|endif
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader><leader>( :s/\m\[.\{-}]//g<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>[ :s/\m\[.\{-}]//g<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>U :Underline
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>é :call ClearFancyGlyphs()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>2 :call ClearFancyGlyphs()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><leader>2 :call ClearMAS()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  inoremap <leader>_ <Esc>:call DateFr()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>_ :call DateFr()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  vnoremap <leader>_ <Esc>:call DateFr()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮    noremap <leader>yp :lan fr_FR.UTF-8<CR>:call DateFr()<CR>:lan en_GB.UTF-8<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮    noremap <leader>yp :lan en_GB.UTF-8<CR>:exe ":norm a".strftime('%a %d %b %Y')<CR>:lan fr_FR.UTF-8<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮    noremap <leader>yp :lan tim English_United Kingdom<CR>:exe ":norm a".strftime('%a %d %b %Y')<CR>:lan tim French<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮    noremap <leader>yp :lan tim French<CR>:call DateFr()<CR>:lan tim English_United Kingdom<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>9 :call PercentUnicode()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>( :call UnicodePercent()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>5 :call UnicodePercent()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <leader><leader><f5> :call clearmatches()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><leader><f5> :call clearmatches()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮noremap <leader><leader>ll :set list! list? <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap z? :exe ':spellrare  '.expand('<cWORD>')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>zz :let &scrolloff=999-&scrolloff<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <silent><leader><leader>c :set cuc! cuc? <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <silent><leader><leader>l :set cul! cul? <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <silent><leader>rn :set rnu! rnu? <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <leader><f5> :<Esc>syntax sync fromstart<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><f5> :syntax sync fromstart<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>x <C-W>c
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮" noremap <leader>q :copen<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <c-h> <c-w>h
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <c-l> <c-w>l
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <c-j> <c-w>j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <c-k> <c-w>k
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><leader>h :split<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><leader>v :vsplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><leader>o :write<bar>close<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader><down> 5<C-W>-
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader><up> 5<C-W>+
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader><left> 10<C-W><
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader><right> 10<C-W>>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <c-=> <c-w>=
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>c= :windo set nowfh <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* nnoremap <buffer> <F4> :call BackupQuit()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* inoremap <buffer> <F4> <Esc>:call BackupQuit()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  noremap Q @q
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  noremap Q <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>n :nohlsearch<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮vnoremap <leader>n <Esc>:nohlsearch<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>: :call TweakLS()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮  nnoremap <leader>/ :call TweakLS()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>is :call IncSearchToggle()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>vg :call VimgrepSelection()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>bp :call VimgrepBcPc()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><leader>q :call VimgrepQRs()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>pt :call ParenthsToggle()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>vs :call ConvertSearchForVisualSelection()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮vnoremap <leader>vs <Esc>:call ConvertSearchForVisualSelection()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>f :let@f=@%<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <silent><leader><F11> :echo strftime('%c',getftime(expand('%')))<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮vnoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>- :Hexplore<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><f12> :call OpenInEmacs()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <leader><f12> :<Esc>call OpenInEmacs()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader><leader>t :sp term://pwsh<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <leader>d :cd %:p:h<CR>:pwd<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮nnoremap <F2> :wa<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <F2> <Esc>:wa<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮vnoremap <F2> <Esc>:wa<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <F3> <Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\plugin.vim ⋮inoremap <S-F2> <Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <f1> :FuzzyBuffers<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  inoremap <f1> <Esc>:FuzzyBuffers<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  vnoremap <f1> <Esc>:BuffFuzzyers<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <F8> :FuzzyCmdHistory<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  inoremap <F8> <Esc>:FuzzyCmdHistory<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  vnoremap <F8> <Esc>:FuzzyCmdHistory<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <S-F9> call popup_clear(1):<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <leader>B :BLines<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <leader>L :Lines<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <leader>j :Files $DJH<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <f1> :Buffers<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  inoremap <f1> <Esc>:Buffers<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  vnoremap <f1> <Esc>:Buffers<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <F8> :History:<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  inoremap <F8> <Esc>:History:<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  vnoremap <F8> <Esc>:History:<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <F9> :History/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  inoremap <F9> <Esc>:History/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  vnoremap <F9> <Esc>:History/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nnoremap <s-f1> :Jumps<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮nnoremap <c-f3> :BCommits<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮inoremap <c-f3> <Esc>:BCommits<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮vnoremap <c-f3> <Esc>:BCommits<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮nnoremap <s-f3> :Commits<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮inoremap <s-f3> <Esc>:Commits<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮vnoremap <s-f3> <Esc>:Commits<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮imap <c-d> <Plug>(fzf-dictionary-open)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮noremap <c-e> :cd %:p:h<CR>:Fern . -reveal=%<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nmap <silent> <buffer> <c-d> <Plug>(fern-action-preview:scroll:down:half)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nmap <silent> <buffer> <c-u> <Plug>(fern-action-preview:scroll:up:half)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nmap <unique> <leader>pe <Plug>(PickerEdit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮  nmap <unique> <leader>pb <Plug>(PickerBuffer)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimFull.vim ⋮noremap <silent> <leader>be :BufExplorer<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮nmap <leader><leader>f <Plug>(easymotion-overwin-f)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮autocmd VimEnter * nmap s <Plug>(easymotion-overwin-f2)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮nnoremap <silent><leader>it :call IlluminateMoreToggle()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮nnoremap <leader>bb :CtrlPBuffer<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮noremap <C-n> :NERDTreeToggle<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮nnoremap <F10> :cd %:p:h<CR>:NERDTreeCWD<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮inoremap <F10> <Esc>:cd %:p:h<CR>:NERDTreeCWD<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsVimAll.vim ⋮" :verb imap <tab>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <F3> :call StripStoreCurSel()<CR>:Ggrep -i "<C-R>s" <bar>cw
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <expr> <C-Left> get(b:, 'rbcsv', 0) == 1 ? ':RainbowCellGoLeft<CR>' : '<C-Left>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <expr> <C-Right> get(b:, 'rbcsv', 0) == 1 ? ':RainbowCellGoRight<CR>' : '<C-Right>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <expr> <C-Up> get(b:, 'rbcsv', 0) == 1 ? ':RainbowCellGoUp<CR>' : '<C-Up>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <expr> <C-Down> get(b:, 'rbcsv', 0) == 1 ? ':RainbowCellGoDown<CR>' : '<C-Down>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <expr> <f7> get(b:, 'rbcsv', 0) == 1 ? ':call RainbowAStoggle()<cr>' : '<f7>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮inoremap <expr> <f7> get(b:, 'rbcsv', 0) == 1 ? '<esc>:call RainbowAStoggle()<cr>' : '<f7>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮vnoremap <expr> <f7> get(b:, 'rbcsv', 0) == 1 ? '<esc>:call RainbowAStoggle()<cr>' : '<f7>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <leader>ww :<c-u>MatchupWhereAmI??<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <leader>wt :ThesaurusQueryReplaceCurrentWord<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <leader>lt :LangTool <bar> lopen 15 <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <leader>LT :call LanguageTool_lopen() <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮    nmap <silent> <leader>fs <Plug>FontsizeBegin
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮    nmap <silent> <SID>DisableFontsizeInc     <Plug>FontsizeInc
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮    nmap <silent> <SID>DisableFontsizeDec     <Plug>FontsizeDec
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮    nmap <silent> <SID>DisableFontsizeDefault <Plug>FontsizeDefault
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮noremap <leader>C :CalendarH<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nnoremap <F6> :execute "normal \<Plug>(openbrowser-smart-search)"<bar>silent !nsBt<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮vmap <F6> <Plug>(openbrowser-smart-search)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nmap gA <Plug>(EasyAlign)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮xmap gA <Plug>(EasyAlign)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮xmap <c-down> <Plug>(textmanip-move-down)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮xmap <c-up> <Plug>(textmanip-move-up)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮xmap <c-left> <Plug>(textmanip-move-left)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮xmap <c-right> <Plug>(textmanip-move-right)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nmap <leader><leader>m <Plug>MarkSet
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮nmap <leader><leader>n <Plug>MarkClear
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsFull.vim ⋮noremap <silent> <leader><leader>d :BD<CR>:bp<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsAll.vim ⋮inoremap <c-x><c-x> <c-x><c-o>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsAll.vim ⋮if !has('nvim') | nnoremap <leader>m :MRU | endif
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsAll.vim ⋮map *  <Plug>(asterisk-*)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsAll.vim ⋮map #  <Plug>(asterisk-#)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsAll.vim ⋮nnoremap <leader>bdd :Bdelete other<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\packsAll.vim ⋮nnoremap <leader>bd  :Bdelete hidden<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\fzf\plugin\fzf.vim ⋮nnoremap <silent> <Plug>(fzf-insert) i
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\plugin\fzf\plugin\fzf.vim ⋮nnoremap <silent> <Plug>(fzf-normal) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\syntax\rgov.vim ⋮  syn match rgovm '\<map ' contained
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\syntax\rgov.vim ⋮  syn match rgovmv '\v<(imap|inoremap|keymap|nmap|noremap|nnoremap|omap|onoremap|vmap|vnoremap|xmap|xnoremap)>' contained
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\leap.lua ⋮        vim.keymap.set('n', 's', '<Plug>(leap)'),
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\leap.lua ⋮        vim.keymap.set('n', 'S', '<Plug>(leap-from-window)'),
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\harpoon.lua ⋮    vim.keymap.set({'n'},'<leader>hl',function() harpoon.ui:toggle_quick_menu(harpoon:list()) end) -- for reference
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\harpoon.lua ⋮    vim.keymap.set({'n'},'<leader>ha',function() harpoon:list():add() end) -- ephemeral...
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\harpoon.lua ⋮    vim.keymap.set({'n'},'<leader>he',function() toggle_telescope(harpoon:list()) end,{desc='Open harpoon window' })
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\fzf-lua.lua ⋮    vim.keymap.set({'n'},'<s-f1>','<Cmd>FzfLua buffers<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\fzf-lua.lua ⋮    vim.keymap.set({'n'},'<leader>zd',"<Cmd>FzfLua files cwd=$DWp<CR>",{desc=':FzfLua files cwd=$DWp'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\fzf-lua.lua ⋮    vim.keymap.set({'n'},'<leader>zt',"<Cmd>FzfLua files cwd=$TeNo<CR>",{desc=':FzfLua files cwd=$TeNo'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\fzf-lua.lua ⋮    vim.keymap.set({'n'},'<leader>zg',"<Cmd>FzfLua files cwd=$onGH<CR>",{desc=':FzfLua files cwd=$onGH'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮vim.keymap.set({'n'},'ç(', function() vim.diagnostic.jump({count= -1,float = true}) end, {desc='previous diagnostic'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮vim.keymap.set({'n'},'ç)', function() vim.diagnostic.jump({count= 1,float = true}) end, {desc='next diagnostic'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮vim.keymap.set({'t'},'<C-h>','<Cmd>wincmd k<CR>',{desc='normal mode and move focus left'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮vim.keymap.set({'t'},'<C-l>','<Cmd>wincmd k<CR>',{desc='normal mode and move focus right'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮vim.keymap.set({'t'},'<C-j>','<Cmd>wincmd k<CR>',{desc='normal mode and move focus down'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮vim.keymap.set({'t'},'<C-k>','<Cmd>wincmd k<CR>',{desc='normal mode and move focus up'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮vim.keymap.set({'t'},'<Esc>','<C-\\><C-n>',{ desc = 'Exit terminal (insert) mode to normal mode' })
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮      vim.keymap.set({'n'},'<leader>sv',"<Cmd>ScrollViewToggle<CR>") end,},
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\init.lua ⋮    vim.keymap.set('n','<leader>lo','<cmd>Lspsaga outline<cr>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮  nnoremap ! /
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮  nnoremap q! q/
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮  nnoremap gl g`"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮noremap <leader>K :exe 'h '.expand('<cword>')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮" nnoremap Y 0yj
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮        nnoremap <leader>à :call ToggleGUIwidth(109,133)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮        nnoremap <leader>0 :call ToggleGUIwidth(109,133)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮        nnoremap <leader>à :call ToggleGUIwidth(108,150)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\init.vim ⋮        nnoremap <leader>0 :call ToggleGUIwidth(108,150)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-notify.lua ⋮    vim.keymap.set({'i','n','v'},'<leader>vn',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-neoclip.lua ⋮    vim.keymap.set({'n'},'<leader>yy',"<Cmd>echo 'neoclip'<bar>Telescope neoclip<CR>")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-lspconfig.lua ⋮      vim.keymap.set({'n'},'<localleader>r', function() vim.cmd('LspRestart') print('LspRestart\'d') end,{desc=':LspRestart'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-lspconfig.lua ⋮      vim.keymap.set({'n'},'<localleader>s', function() vim.cmd('LspStop') print('LspStop\'d') end,{desc=':LspStop'}) -- no generic way to disable on opening a specific file
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-hlslens.lua ⋮      local kopts = {noremap = true, silent = true}
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-cmp.lua ⋮      vim.keymap.set("n", "<leader>cp", function() -- useful for testing
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-cmp.lua ⋮      vim.keymap.set("n", "<leader>cs", function() -- useful for  cmp-spell
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-treesitter.lua ⋮      vim.keymap.set({'n'},'<localleader>t',function() vim.treesitter.stop() print("treesitter highlights off until refresh") end,{desc='disable Neovim\'s treesitter highlights.scm'}) -- see  $vfv/after/syntax/lua.vim
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮          return { desc = "nvim-tree: " .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '<BS>',    api.node.navigate.parent_close,      opts('directory close'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'c',       api.tree.collapse_all,               opts('directory collapse here'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'a',       api.tree.expand_all,                 opts('directory expand all here'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'p',       api.node.navigate.parent,            opts('directory parent'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '-',       api.tree.change_root_to_parent,      opts('directory up'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '=',       api.tree.change_root_to_node,        opts('directory view only this'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'A',       api.fs.create,                       opts('file create'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '<c-t>',   api.node.open.tab,                   opts('file open in new tab'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '<c-e>',   api.node.open.replace_tree_buffer,   opts('file open in place of nvim-tree'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '<c-x>',   api.node.open.horizontal,            opts('file open in split horizontal'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '<c-v>',   api.node.open.vertical,              opts('file open in split vertical'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'uc',      api.live_filter.clear,               opts('filter clear'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'ui',      api.tree.toggle_gitignore_filter,    opts('filter gitignore toggle'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'uh',      api.tree.toggle_hidden_filter,       opts('filter hidden toggle'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'us',      api.live_filter.start,               opts('filter start'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'C',       api.fs.copy.node,                    opts('node content copy'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'P',       api.fs.paste,                        opts('node content paste'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', '<c-k>',   api.node.show_info_popup,            opts('node details'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'gb',      api.fs.copy.basename,                opts('node get name'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'gp',      api.fs.copy.absolute_path,           opts('node get path'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'O',       api.node.open.no_window_picker,      opts('node open (no picker/toggle)'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'o',       api.node.open.edit,                  opts('node open/toggle'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'R',       api.fs.rename,                       opts('node rename name'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'U',       api.fs.rename_full,                  opts('node rename path'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'J',       api.node.navigate.sibling.next,      opts('node sibling next'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'K',       api.node.navigate.sibling.prev,      opts('node sibling previous'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'q',       api.tree.close,                      opts('nvim-tree close'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'g?',      api.tree.toggle_help,                opts('nvim-tree help'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮        vim.keymap.set('n', 'r',       api.tree.reload,                     opts('nvim-tree refresh'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮      vim.keymap.set({'i','n'},'<f10>',function()vim.cmd('NvimTreeFindFileToggle!')end,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\nvim-tree.lua ⋮      vim.keymap.set({'n'},'<c-n>',function()vim.cmd('NvimTreeToggle')end,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\oil.lua ⋮      vim.keymap.set({'i','n','v'},'<leader><f10>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\render-markdown_nvim.lua ⋮    -- ▩-> 2 keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\render-markdown_nvim.lua ⋮    vim.keymap.set({'n'},'<leader>rm', function() require('render-markdown').toggle() end,{desc=':RenderMarkdown toggle'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lisp.vim ⋮nnoremap <buffer><leader><leader>> :call FirmComment(';')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lisp.vim ⋮nnoremap <buffer><leader><leader>< :call FirmUnComment(';')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\html-ft.vim ⋮nnoremap <buffer> <localleader>h :set filetype=html<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\help.vim ⋮nnoremap <buffer><localleader>h :Helpview toggle<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\HashFolding.vim ⋮vnoremap <buffer><leader>> :s/^#/##/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\HashFolding.vim ⋮vnoremap <buffer><leader>< :s/^#//<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\HashEqualsFolding.vim ⋮vnoremap <buffer><leader>> :s/#=/#==/<CR>  " demote
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\HashEqualsFolding.vim ⋮vnoremap <buffer><leader>< :s/#==/#=/<CR>  " promote
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\HashEqualsFolding.vim ⋮  nnoremap <buffer><leader>" :call FirmComment('#')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\HashEqualsFolding.vim ⋮  nnoremap <buffer><leader># :call FirmComment('#')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\HashEqualsFolding.vim ⋮nnoremap <buffer><leader>< :call FirmUnComment('#')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\gitconfig.vim ⋮nnoremap <leader>u :s#https://github.com/#git@github.com:#g <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\fugitive.vim ⋮nnoremap <buffer><leader>gp :Git push<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\fugitive.vim ⋮nnoremap <buffer><leader>gs 4j-<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\fugitive.vim ⋮  nnoremap <buffer><f1> :Buffers<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\emdr.vim ⋮nnoremap <buffer> <leader><leader>= I━━  <Esc>A  ━━<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\emdr.vim ⋮nnoremap <buffer> <localleader>= I━━  <Esc>A  ━━<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\emdr.vim ⋮nnoremap <buffer> <leader>== I━━<Esc>A━━<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\emdr.vim ⋮nnoremap <buffer> <leader>=- 0xx<Esc>$xx<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\emdr.vim ⋮nnoremap <buffer> <leader># 099i~<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮vnoremap <buffer><leader>hy :call PageTitleToHyperlink()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮nnoremap <buffer><localleader>h :s/\(.\+\)  \(http.\+\)/[[\2 \|\1]]/<bar>noh<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮vnoremap <buffer>= <Nop>  " disable filter
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮"   :nmap \i
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮nnoremap <buffer> <leader><leader>i :s/\m\(^>\+\) /\1 <wrap indent> /<CR><Bar>A </wrap><Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮nnoremap <buffer> <leader>= I=<Esc>A=<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮nnoremap <buffer> <leader><leader>= I=== <Esc>A ===<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮nnoremap <leader><leader>5 ?''<cr>i<cr><esc>:s/''/%% /<cr>:s/''/ %%/<cr>kJ
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮nnoremap <buffer> <leader>' viwc''''<Esc>hP
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮vnoremap <buffer> <leader>' c''''<Esc>hP
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮vnoremap <buffer> <leader>v1 :s#^\v(.+)$#> \1 \\\\#g <bar> nohlsearch <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\dokuwiki.vim ⋮vnoremap <buffer> <leader>v2 :s#^\v(.+) \\\\$\n^$#\1\r#g <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\csv.vim ⋮  nnoremap <buffer><f7> :call CVCT()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\csv.vim ⋮    nnoremap <buffer><f7> :CsvViewToggle<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\bbcode.vim ⋮nnoremap <buffer> <leader><leader>] viwc[ins][/ins]<Esc>bbp
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\bbcode.vim ⋮vnoremap <buffer> <leader><leader>] c[ins][/ins]<Esc>bbp
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\bbcode.vim ⋮nnoremap <buffer> <leader>] viwc[code][/code]<Esc>bbp
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\bbcode.vim ⋮vnoremap <buffer> <leader>] c[code][/code]<Esc>bbp
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\bbcode.vim ⋮vnoremap <buffer> <leader>u c[url][/url]<Esc>F[PF]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\bbcode.vim ⋮nnoremap <buffer> <leader><leader>u viwc[user=][/user]<Esc>F[PF]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\bbcode.vim ⋮vnoremap <buffer> <leader><leader>u c[user=][/user]<Esc>F[PF]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\ALElocaleader.vim ⋮noremap <silent> <localleader>d :ALEGoToDefinition<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\ALElocaleader.vim ⋮noremap <silent> <localleader><localleader>] <Plug>(ale_next_wrap)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\ALElocaleader.vim ⋮noremap <silent> <localleader><localleader>[ <Plug>(ale_previous_wrap)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\ALElocaleader.vim ⋮" noremap <localleader>aa :ALEToggleBuffer<CR>  " doesn't report status
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\ALElocaleader.vim ⋮noremap <localleader>a :call ALEToggleBufferShow()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\vim.vim ⋮noremap <silent><localleader>m :let@/='\v<(imap\|inoremap\|keymap\|nmap\|noremap\|nnoremap\|omap\|onoremap\|vmap\|vnoremap\|xmap\|xnoremap)>'<cr>:set hlsearch<cr>:echo 'search set to variants of map command'<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\vim.vim ⋮vnoremap <buffer><leader>> :s/"">/"">>/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\vim.vim ⋮vnoremap <buffer><leader>< :s/"">>/"">/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\vim.vim ⋮  nnoremap <buffer><leader>" :call FirmComment('"')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\vim.vim ⋮  nnoremap <buffer><leader>> :call FirmComment('"')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\vim.vim ⋮nnoremap <buffer><leader>< :call FirmUnComment('"')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  nnoremap <buffer><F12> :call CompiledPDF()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  nnoremap <buffer><localleader>< :s/</\\url{/<bar>s/>/}/<bar>nohls<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮nnoremap <buffer><leader><F7> :call TabularFullAlign()<CR><Bar>:update<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮inoremap <buffer><leader><F7> <Esc>:call TabularFullAlign()<CR><Bar>:update<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮nnoremap <buffer><localleader>r :s#\\\h\+{##<bar>s/}//<bar>nohls<CR>  " remove first command
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮vnoremap <buffer><localleader>b c\textbf{<Esc>pa}<Esc>  " enbolden
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮vnoremap <buffer><localleader>d c\dgy{<Esc>pa}<Esc>  " $LTXj/JH.sty
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮vnoremap <buffer><localleader>i c\textit{<Esc>pa}<Esc>  " italicize
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮nnoremap <buffer><leader>> :call DemoteSubSections()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮vnoremap <buffer><leader>> <Esc>:call DemoteSubSections()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮nnoremap <buffer><leader>< :call PromoteSubSections()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮vnoremap <buffer><leader>< <Esc>:call PromoteSubSections()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  nnoremap <silent><buffer><leader><F7> :call PHMatch()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  inoremap <silent><buffer><leader><F7> <Esc>:call PHMatch()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  vnoremap <silent><buffer><leader><F7> <Esc>:call PHMatch()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  nnoremap <silent><buffer><leader><F7> :call LaTeXsyntaxFolding()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  inoremap <silent><buffer><leader><F7> <Esc>:call LaTeXsyntaxFolding()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  vnoremap <silent><buffer><leader><F7> <Esc>:call LaTeXsyntaxFolding()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮  nnoremap <localleader><f5> :let &cole=(&cole == 2) ? 0 : 2 <bar> echo 'conceallevel ' . &cole <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮vnoremap <buffer> <leader>v1 :s#^\v(.+)$#\1 \\\\#g <bar> nohlsearch <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tex.vim ⋮vnoremap <buffer> <leader>v2 :s#^\v(.+) \\\\$\n^$#\1\r#g <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tbmo.vim ⋮nnoremap <buffer><f7> :s/\n/, / <bar> nohlsearch <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\tbmo.vim ⋮nnoremap <buffer><s-f7> :s/, /\r/g <bar> nohlsearch <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\python.vim ⋮nnoremap <leader>u :TagbarToggle<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\ps1.vim ⋮nnoremap <buffer><leader>o :ContextToggleWindow<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\php\phpfolding.vim ⋮"       map <F5> <Esc>:EnableFastPHPFolds<Cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\php\phpfolding.vim ⋮"       map <F6> <Esc>:EnablePHPFolds<Cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\php\phpfolding.vim ⋮"       map <F7> <Esc>:DisablePHPFolds<Cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\perl.vim ⋮nnoremap <buffer><leader>o :ContextToggleWindow<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\perl.vim ⋮nnoremap <buffer><leader>u :TagbarToggle<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\muttaliases.vim ⋮nnoremap <buffer> <F7> gg2jVG:sort u <cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  nnoremap <buffer><localleader>( :s/\[\[\(http\S*\) \|\(.*\)]]/[\2](\1)/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  nnoremap <buffer><localleader>[ :s/\[\[\(http\S*\) \|\(.*\)]]/[\2](\1)/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮    nnoremap <buffer><localleader>< a<><Esc>h
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮    nnoremap <buffer><localleader>< a<><Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  nnoremap <buffer> <F12> :call CompiledPDF()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮nnoremap <buffer>gF vi[gf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  nnoremap <buffer><leader><leader><F7> :execute "silent !perl $misc/CP/PerlTools/MessengerMd.pl ".expand('%:p')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  nnoremap <buffer><leader><leader><F7> :call MessengerMd()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮" check with  :map <leader><leader><F7>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  nnoremap <buffer><leader><f7> :execute "silent !perl $misc/CP/PerlTools/mysmsMd.pl ".expand('%:p')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  nnoremap <buffer><leader><f7> :call MysmsMd()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮  " - check with  :map <leader><f7>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮nnoremap <buffer> <localleader>h :set filetype=markdown<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮vnoremap <buffer> <leader>v1 :s#^\v(.+)$#> \1  #g <bar> nohlsearch <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\md.vim ⋮vnoremap <buffer> <leader>v2 :s#^\v(.+)  $\n^$#\1\r#g <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\markdown.vim ⋮vnoremap <buffer>= <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\markdown.vim ⋮vnoremap <buffer><leader>> :s/^#/##/<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\markdown.vim ⋮vnoremap <buffer><leader>< :s/^#//<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\markdown.vim ⋮nnoremap <buffer><localleader>b viwc****<Esc>hP
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\markdown.vim ⋮nnoremap <buffer><leader>` viwc``<Esc>P
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\markdown.vim ⋮  vnoremap <buffer><leader>è c``<Esc>P
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\markdown.vim ⋮  vnoremap <buffer><leader>` c``<Esc>P
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua.vim ⋮nnoremap <buffer><leader>o :ContextToggleWindow<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua.vim ⋮vnoremap <buffer><leader>> :s/-- ▩-/-- ▩--/<CR>  " demote
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua.vim ⋮vnoremap <buffer><leader>< :s/-- ▩--/-- ▩-/<CR>  " promote
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua.vim ⋮nnoremap <localleader>e :set foldexpr=LuaF()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua.vim ⋮  nnoremap <buffer><leader>" :call FirmComment('--')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua.vim ⋮  nnoremap <buffer><leader>> :call FirmComment('--')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua.vim ⋮nnoremap <buffer><leader>< :call FirmUnComment('--')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua-nvim.vim ⋮noremap <localleader>c :let@/=":Telescope \\zs[^']*" <cr>:set hlsearch<cr>:echo 'search set to Telescope commands'<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\ftplugin\lua-nvim.vim ⋮noremap <localleader>k :let@/="^\\s*vim.keymap.set({.*},'\\zs[^']*"<cr>:set hlsearch<cr>:echo 'search set to your mapped keys'<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮ map <unique> <Leader>swp <Plug>SaveWinPosn
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮ map <unique> <Leader>rwp <Plug>RestoreWinPosn
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮  " save single map :...something...
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮"   call Decho("save single map :...something...")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮	let s:restoremap_{a:suffix} = s:restoremap_{a:suffix}."|:".mapmode."map ".dobuffer.amap." ".maprhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮  " save single map <something>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮"   call Decho("save single map <something>")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮	let s:restoremap_{a:suffix} = s:restoremap_{a:suffix}."|".mapmode."map ".dobuffer.amap." ".maprhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vis\plugin\cecutil.vim ⋮	 let s:restoremap_{a:suffix} = s:restoremap_{a:suffix}."|".mapmode."map ".dobuffer.amap." ".maprhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      -- /^\s*vim.keymap.set({.*},'\zs.*\ze',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader><f1>',function() builtin.buffers{sort_mru=true} end,{desc=':Telescope buffers'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ff',builtin.current_buffer_fuzzy_find,{desc=':Telescope current_buffer_fuzzy_find'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>tt',builtin.treesitter,{desc=':Telescope treesitter'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ic',builtin.git_commits,{desc=':Telescope git_commits'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ib',builtin.git_bcommits,{desc=':Telescope git_bcommits'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>if',builtin.git_files,{desc=':Telescope git_files'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ii',builtin.git_status,{desc=':Telescope git_status'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ld',builtin.diagnostics,{desc=':Telescope diagnostics'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ls',builtin.lsp_document_symbols,{desc=':Telescope lsp_document_symbols'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>lss',builtin.lsp_workspace_symbols,{desc=':Telescope lsp_workspace_symbols'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮        vim.keymap.set({'n'},'<leader>lf',builtin.lsp_definitions,{desc=':Telescope lsp_definitions'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮        vim.keymap.set({'n'},'<leader>lff',builtin.lsp_type_definitions,{desc=':Telescope lsp_type_definitions'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>a',builtin.man_pages,{desc=':Telescope man_pages'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>m',tch_MRU,{desc=':Telescope command_history MRU .'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<c-o>',builtin.oldfiles,{desc=':Telescope oldfiles no_ignore=true'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>j',function()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader><leader><f1>',function() builtin.jumplist{show_line=false} end,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader><leader>g',function()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader><leader>r',function()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>lg',":Telescope live_grep_args<CR>") -- rg based on cwd
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>pp',builtin.resume,{desc=':Telescope resume (= previous picker)'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n','i','v'},'<f8>',builtin.command_history,{desc=':Telescope command_history'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n','i','v'},'<f9>',builtin.search_history,{desc=':Telescope search_history'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ht',builtin.help_tags,{desc=':Telescope help_tags'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>va',builtin.marks,{desc=':Telescope marks'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>vc',builtin.commands,{desc=':Telescope commands'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>vf',builtin.filetypes,{desc=':Telescope fileTypes (known to  vim)'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>vh',builtin.highlights,{desc=':Telescope highlights (known to  vim)'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>vm',builtin.keymaps,{desc=':Telescope keymaps (of normal mode)'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>vo',builtin.vim_options,{desc=':Telescope vim_options'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>vr',builtin.registers,{desc=':Telescope registers'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope.lua ⋮      vim.keymap.set({'n'},'<leader>ws',builtin.spell_suggest,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope-frecency.lua ⋮    -- vim.keymap.set('n','<c-p>',"<Cmd>echo 'frecent files'<bar>Telescope frecency<CR>")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\telescope-frecency.lua ⋮    vim.keymap.set({'n'},'<c-p>',function() vim.cmd("echo 'frecent files'")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\nvim\lua\lazy\snipe_nvim.lua ⋮    vim.keymap.set({'n'},'<f1>',function() snipe.open_buffer_menu() end,{desc = "Open Snipe buffer menu", }),
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-wordcount\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-view\test_inverse_search.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\plugin\minimap.vim ⋮    nnoremap <silent> * *:call minimap#vim#UpdateColorSearch(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\plugin\minimap.vim ⋮    nnoremap <silent> # #:call minimap#vim#UpdateColorSearch(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\plugin\minimap.vim ⋮    nnoremap <silent> g* g*:call minimap#vim#UpdateColorSearch(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\plugin\minimap.vim ⋮    nnoremap <silent> g# g#:call minimap#vim#UpdateColorSearch(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\plugin\minimap.vim ⋮    " nnoremap <silent> `` :nohlsearch<CR>:call minimap#vim#ClearColorSearch()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc-speed\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮  nnoremap <c-f11> 2<c-g>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮    " nnoremap _ =
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮    " xnoremap _ =
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮    " onoremap _ =
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮  nnoremap <localleader>= :echo 'you just hit <localleader>='<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮  vnoremap <localleader>= <esc>:echo 'you just hit <localleader>='<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮nnoremap <f4> :call VimWriteClose()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮inoremap <f4> <Esc>:call VimWriteClose()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮vnoremap <f4> <Esc>:call VimWriteClose()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮nnoremap <leader><f4> :Bdelete other<CR>:sleep<CR>:call VimWriteClose()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc.vim ⋮inoremap <leader><f4> <Esc>:Bdelete other<CR>::sleep<CR>call VimWriteClose()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-WSL.vim ⋮nnoremap <leader>v v$hy
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Win10.vim ⋮source $VIMRUNTIME/mswin.vim  " *map <c-f4>  to close window
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Win10.vim ⋮  nnoremap <C-F5> :call ColorLightDark()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Win10.vim ⋮nnoremap <F11> :!start explorer %:p:h<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Win10.vim ⋮inoremap <F11> <Esc><F11>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-linux.vim ⋮  nnoremap <leader>v v$hy
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-linux.vim ⋮nnoremap <Insert> :CapsLockOff <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-linux.vim ⋮inoremap <Insert> <Esc> :CapsLockOff <CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-linux.vim ⋮"  imap <Insert> <Insert>  doesn't work
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-linux.vim ⋮nnoremap U :CapsLockOff<CR> <bar> U
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Arch.vim ⋮  noremap <F11> :silent !dolphin %:p:h &<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Arch.vim ⋮  imap <F11> <Esc><F11>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Arch.vim ⋮  noremap <F11> :cd %:p:h<CR><bar>:silent !pcmanfm &<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\vimrc-Arch.vim ⋮  imap <F11> <Esc><F11>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\gvimrc.vim ⋮nnoremap <C-F1> :if &guioptions=~#'m'<Bar>set guioptions-=m<Bar>else<Bar>set guioptions+=m<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\gvimrc.vim ⋮    nnoremap <leader>à :call ToggleGUIwidth(106,160)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\gvimrc.vim ⋮    nnoremap <leader>0 :call ToggleGUIwidth(106,160)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\enter\gvimrc-Arch.vim ⋮nnoremap <C-F5> :call ColorLightDark()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <ScrollWheelUp>     k
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <2-ScrollWheelUp>   k
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <3-ScrollWheelUp>   k
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <4-ScrollWheelUp>   k
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <ScrollWheelDown>   j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <2-ScrollWheelDown> j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <3-ScrollWheelDown> j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮    noremap <buffer> <4-ScrollWheelDown> j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\minimap.vim\autoload\minimap\vim.vim ⋮" Build the update map - only includes lines that have changed
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-texorpdfstring.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-starred.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-multiline.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-keepwidth.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-keepalt.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-indent.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-general.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-fixme.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-disable.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-comment.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-toc\test-beamer.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\listtoggle\plugin\listtoggle.vim ⋮execute "nnoremap " . s:unique . " <silent> " .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\listtoggle\plugin\listtoggle.vim ⋮execute "nnoremap " . s:unique . " <silent> " .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\limelight.vim\plugin\limelight.vim ⋮nnoremap <silent> <Plug>(Limelight) :set opfunc=limelight#operator<CR>g@
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\limelight.vim\plugin\limelight.vim ⋮xnoremap <silent> <Plug>(Limelight) :Limelight<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\after\plugin\packs.vim ⋮noremap <leader>gg :call GitGutterFocus()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-syntax\common.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\test\configs\vimrc.vim ⋮nnoremap <leader>l :echo 'you hit leader l'<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-subfiles\test_nested.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-win64\opt\fuzzyy\plugin\fuzzyy.vim ⋮            exe 'nnoremap <silent> ' .. lhs .. ' ' .. rhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_toggle-main.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_reopen.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_reload.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_parse_documentclass.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_no-hidden.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_modified-quit.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_hidden.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-state\test_builddir.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-quickfix-fix-path\test-hbox.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-quickfix-fix-path\test-beamer.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-quickfix\test-spaces.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-paths\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-parser-toc\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-parser-tex\test_recursive.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-parser-tex\test_preamble_include.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-parser-cmds\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-motions-virtual\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-motions\test-section.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-motions\test-method.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-motions\test-math.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-motions\test-comment.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-motions\test-beamer.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:open)   :<C-u>call fern_preview#open()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:close)  :<C-u>call fern_preview#close()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:toggle) :<C-u>call fern_preview#toggle()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:enable)  :<C-u>call fern_preview#enable_auto_preview()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:disable) :<C-u>call fern_preview#disable_auto_preview()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:toggle)  :<C-u>call fern_preview#toggle_auto_preview()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:scroll:down:half) :<C-u>call fern_preview#half_down()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-preview.vim\autoload\fern\scheme\file\mapping\preview.vim ⋮  nnoremap <silent> <buffer> <Plug>(fern-action-preview:scroll:up:half)   :<C-u>call fern_preview#half_up()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-matchparen-speed\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-jobs\test-start.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-jobs\test-run.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-jobs\test-capture.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-indentation-timing\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-indentation\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-include\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-imaps\test.vim ⋮" Test ;a -> ;a (disabled imap)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-getfile\test_auxdir.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-formatting\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-folding-bib\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-git-status.vim\autoload\fern_git_status\investigator.vim ⋮  let imap = {}
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-git-status.vim\autoload\fern_git_status\investigator.vim ⋮        while path !=# '' && !has_key(imap, path)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-git-status.vim\autoload\fern_git_status\investigator.vim ⋮          let imap[path] = indexed_character
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-git-status.vim\autoload\fern_git_status\investigator.vim ⋮          \ uniq(sort(keys(imap) + keys(smap))),
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern-git-status.vim\autoload\fern_git_status\investigator.vim ⋮          \ { _, v -> [v, printf('%s%s', get(imap, v, ' '), get(smap, v, ' '))] },
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\FastFold\plugin\fastfold.vim ⋮nnoremap <silent> <Plug>(FastFoldUpdate) :<c-u>FastFoldUpdate!<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\FastFold\plugin\fastfold.vim ⋮  nmap zuz <Plug>(FastFoldUpdate)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\FastFold\plugin\fastfold.vim ⋮  execute 'nnoremap <silent> z'.suffix.' :<c-u>call <SID>UpdateWin()<CR>z'.suffix
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\FastFold\plugin\fastfold.vim ⋮  exe "nnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>'.v:count." . "'".cmd."'"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\FastFold\plugin\fastfold.vim ⋮  exe "xnoremap <silent><expr> " . cmd. " ':<c-u>call <SID>UpdateWin()<CR>gv'.v:count." . "'".cmd."'"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\FastFold\plugin\fastfold.vim ⋮  exe "onoremap <silent><expr> " . cmd. " '<esc>:<c-u>call <SID>UpdateWin()<CR>' . '\"' . v:register . v:operator . v:count1 . " . "'".cmd."'"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-folding\test-sections.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-folding\test-other.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-folding\test-markers.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-folding\test-env-options.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\emmet-vim\plugin\emmet.vim ⋮    exe item.mode . 'noremap '. buffer .' <plug>(' . item.plug . ') ' . item.func
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\emmet-vim\plugin\emmet.vim ⋮        exe item.mode . 'map ' . buffer . ' <unique> <silent>' . key . ' <plug>(' . item.plug . ')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-env\test-toggle-star.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-env\test-toggle-math.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-env\test-toggle-lists.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-env\test-surround.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-env\test-getters.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-doc\test_usetikzlibrary.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-doc\test_usepackage.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-delim\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-context-glossaries\test-glossaries.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-context-cite\test-cites.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-packages\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\visual_behavior.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\visual_behavior.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\scroll.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\scroll.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\repetition.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\repetition.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\register.vim ⋮map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\register.vim ⋮map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\operator_pending_behavior.vim ⋮map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\operator_pending_behavior.vim ⋮map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\operator_pending_behavior.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\operator_pending_behavior.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\n_and_N.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\n_and_N.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\n_and_N.vim ⋮  noremap n  n
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\n_and_N.vim ⋮  noremap N  N
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\nomagic.vim ⋮map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\nomagic.vim ⋮map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\nomagic.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\nomagic.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\module.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\module.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\magic_option.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\magic_option.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\jumplist.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\jumplist.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\insert_register.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\insert_register.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\incremental_next_prev.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\incremental_next_prev.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\history.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\history.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\highlight.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\highlight.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\fold.vim ⋮map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\fold.vim ⋮map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\fold.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\fold.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\error_warning_emulation.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\error_warning_emulation.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\default_behaviors.vim ⋮map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\default_behaviors.vim ⋮map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\default_behaviors.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\default_behaviors.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\count.vim ⋮map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\count.vim ⋮map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\cancel.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\cancel.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  map /  <Plug>(incsearch-forward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  map ?  <Plug>(incsearch-backward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  map *  <Plug>(incsearch-nohl-*)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  map #  <Plug>(incsearch-nohl-#)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  noremap n  n
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  noremap N  N
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  noremap *  *
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  noremap #  #
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  noremap g* g*
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\test\autonohlsearch.vim ⋮  noremap g# g#
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <silent><expr> <Plug>(incsearch-forward)  incsearch#go({'command': '/'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <silent><expr> <Plug>(incsearch-backward) incsearch#go({'command': '?'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <silent><expr> <Plug>(incsearch-stay)     incsearch#go({'command': '/', 'is_stay': 1})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <expr> <Plug>(incsearch-nohl)  incsearch#autocmd#auto_nohlsearch(1)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <expr> <Plug>(incsearch-nohl0) incsearch#autocmd#auto_nohlsearch(0)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <expr> <Plug>(incsearch-nohl2) incsearch#autocmd#auto_nohlsearch(2)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮map <Plug>(incsearch-nohl-n)  <Plug>(incsearch-nohl)<Plug>(_incsearch-n)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮map <Plug>(incsearch-nohl-N)  <Plug>(incsearch-nohl)<Plug>(_incsearch-N)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮map <Plug>(incsearch-nohl-*)  <Plug>(incsearch-nohl)<Plug>(_incsearch-*)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮map <Plug>(incsearch-nohl-#)  <Plug>(incsearch-nohl)<Plug>(_incsearch-#)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮map <Plug>(incsearch-nohl-g*) <Plug>(incsearch-nohl)<Plug>(_incsearch-g*)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮map <Plug>(incsearch-nohl-g#) <Plug>(incsearch-nohl)<Plug>(_incsearch-g#)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <expr> <Plug>(_incsearch-n)  g:incsearch#consistent_n_direction && !v:searchforward ? 'N' : 'n'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap <expr> <Plug>(_incsearch-N)  g:incsearch#consistent_n_direction && !v:searchforward ? 'n' : 'N'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap        <Plug>(_incsearch-*)  *
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap        <Plug>(_incsearch-#)  #
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap        <Plug>(_incsearch-g*) g*
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮noremap        <Plug>(_incsearch-g#) g#
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮function! s:key_mapping(lhs, rhs, noremap) abort
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\plugin\incsearch.vim ⋮  \       'noremap' : a:noremap,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-labels\test2.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-labels\test1.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-glossary-texinputs\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-glossary\glossaries.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-glossary\glossaries-extra.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-filenames\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮  map <unique> <Leader>swp <Plug>SaveWinPosn
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮  map <unique> <Leader>rwp <Plug>RestoreWinPosn
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮  " save single map :...something...
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮"   call Decho("save single map :...something...")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮	let s:restoremap_{a:suffix} = s:restoremap_{a:suffix}."|:".mapmode."map ".dobuffer.amap." ".maprhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮  " save single map <something>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮"   call Decho("save single map <something>")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮	let s:restoremap_{a:suffix} = s:restoremap_{a:suffix}."|".mapmode."map ".dobuffer.amap." ".maprhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-plugin-AnsiEsc\plugin\cecutil.vim ⋮	 let s:restoremap_{a:suffix} = s:restoremap_{a:suffix}."|".mapmode."map ".dobuffer.amap." ".maprhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-environments\test3.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-environments\test2.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-environments\test1.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-documentclass\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-commands\test-custom-cmds.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-commands\test-custom-cls.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-commands\test-custom-cls-speed.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerEdit) :PickerEdit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerSplit) :PickerSplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerTabedit) :PickerTabedit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerTabdrop) :PickerTabdrop<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerVsplit) :PickerVsplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerBuffer) :PickerBuffer<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerBufferSplit) :PickerBufferSplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerBufferVsplit) :PickerBufferVsplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerTag) :PickerTag<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerStag) :PickerStag<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerBufferTag) :PickerBufferTag<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\vim-picker\plugin\picker.vim ⋮nnoremap <silent> <Plug>(PickerHelp) :PickerHelp<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex-speed\bibspeed.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\clrzr\plugin\clrzr.vim ⋮"nnoremap <leader>C :ClrzrOn<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\clrzr\plugin\clrzr.vim ⋮"nnoremap <leader>V :ClrzrOff<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-unix\opt\clrzr\plugin\clrzr.vim ⋮"nnoremap <leader>R :ClrzrRefresh<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_starred.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_parser_blg.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_parser_bcf.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_multicite.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_matchstr.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_jobname.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_globbed_wildcard.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_globbed_star.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_globbed_bracket.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_globbed_braces.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_custom_bibs.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_cache.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_backend.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibtex\test_apacite.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-completion-bibstyle\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮nnoremap <Plug>Colorizer        :<C-U>ColorToggle<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮xnoremap <Plug>Colorizer        :ColorHighlight<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮nnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮xnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮nnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮xnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮        nmap <silent> <Leader>cC <Plug>Colorizer
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮        xmap <silent> <Leader>cC <Plug>Colorizer
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮        nmap <silent> <Leader>cT <Plug>ColorContrast
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮        xmap <silent> <Leader>cT <Plug>ColorContrast
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮        nmap <silent> <Leader>cF <Plug>ColorFgBg
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\Colorizer\plugin\ColorizerPlugin.vim ⋮        xmap <silent> <Leader>cF <Plug>ColorFgBg
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-compiler-pdfmode\test-pdfps\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-compiler-pdfmode\test-conflict-warning\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-compiler-method-dynamic\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-compiler-generic\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-compiler\test-clean.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-compiler\test-builddir.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮"     1.9  : bug fix, use nnoremap.
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮"            add map ? for help
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮"            add map <s-left> <s-right>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮    nmap <unique> <Leader>cal <Plug>CalendarV
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮    nmap <unique> <Leader>caL <Plug>CalendarH
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮nnoremap <silent> <Plug>CalendarV :cal calendar#show(0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮nnoremap <silent> <Plug>CalendarH :cal calendar#show(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\plugin\calendar.vim ⋮nnoremap <silent> <Plug>CalendarT :cal calendar#show(2)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮"* CalendarBuildKeymap : build keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  " make keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  nnoremap <silent> <buffer> <Plug>CalendarClose  :call calendar#close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  nnoremap <silent> <buffer> <Plug>CalendarDoAction  :call calendar#action()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  nnoremap <silent> <buffer> <Plug>CalendarDoAction  :call calendar#action()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  nnoremap <silent> <buffer> <Plug>CalendarGotoToday :call calendar#show(b:CalendarDir)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  nnoremap <silent> <buffer> <Plug>CalendarShowHelp  :call <SID>CalendarHelp()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nnoremap <silent> <buffer> <Plug>CalendarReDisplay :call calendar#show(' . a:dir . ',' . a:vyear . ',' . a:vmnth . ')<cr>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoPrevMonth :call calendar#action("<' . pnav . '")<cr>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoNextMonth :call calendar#action("' . nnav . '>")<cr>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoPrevYear  :call calendar#action("PrevYear")<cr>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoNextYear  :call calendar#action("NextYear")<cr>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  nmap <buffer> <2-LeftMouse> <Plug>CalendarDoAction
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['close'] . ' <Plug>CalendarClose'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['do_action'] . ' <Plug>CalendarDoAction'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['goto_today'] . ' <Plug>CalendarGotoToday'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['show_help'] . ' <Plug>CalendarShowHelp'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['redisplay'] . ' <Plug>CalendarRedisplay'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['goto_next_month'] . ' <Plug>CalendarGotoNextMonth'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['goto_prev_month'] . ' <Plug>CalendarGotoPrevMonth'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['goto_next_year'] . ' <Plug>CalendarGotoNextYear'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\calendar-vim\autoload\calendar.vim ⋮  execute 'nmap <buffer> ' . s:calendar_keys['goto_prev_year'] . ' <Plug>CalendarGotoPrevYear'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮nnoremap <silent> <Plug>DsfDelete :call <SID>DeleteSurroundingFunctionCall()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮nnoremap <silent> <Plug>DsfNextDelete :call <SID>DeleteNextSurroundingFunctionCall()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮nnoremap <silent> <Plug>DsfChange :call <SID>ChangeSurroundingFunctionCall()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮nnoremap <silent> <Plug>DsfNextChange :call <SID>ChangeNextSurroundingFunctionCall()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮onoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮xnoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮onoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮xnoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  nmap dsf <Plug>DsfDelete
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  nmap csf <Plug>DsfChange
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  nmap dsnf <Plug>DsfNextDelete
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  nmap csnf <Plug>DsfNextChange
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  omap af <Plug>DsfTextObjectA
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  xmap af <Plug>DsfTextObjectA
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  omap if <Plug>DsfTextObjectI
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\dsf.vim\plugin\dsf.vim ⋮  xmap if <Plug>DsfTextObjectI
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cite\test-cite.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮"                   nnoremap <silent> <F11> :BufExplorer<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮"                   nnoremap <silent> <s-F11> :ToggleBufExplorer<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮"                   nnoremap <silent> <m-F11> :BufExplorerHorizontalSplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮"                   nnoremap <silent> <c-F11> :BufExplorerVerticalSplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_BufferDelete)             :call <SID>RemoveBuffer("delete")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_BufferDeleteForced)       :call <SID>RemoveBuffer("force_delete")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_BufferWipe)               :call <SID>RemoveBuffer("wipe")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_BufferWipeForced)         :call <SID>RemoveBuffer("force_wipe")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_Close)                    :call <SID>Close()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBuffer)               :call <SID>SelectBuffer()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBufferAsk)            :call <SID>SelectBuffer("ask")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBufferOriginalWindow) :call <SID>SelectBuffer("original_window")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBufferSplitAbove)     :call <SID>SelectBuffer("split", "st")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBufferSplitBelow)     :call <SID>SelectBuffer("split", "sb")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBufferSplitLeft)      :call <SID>SelectBuffer("split", "vl")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBufferSplitRight)     :call <SID>SelectBuffer("split", "vr")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_OpenBufferTab)            :call <SID>SelectBuffer("tab")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_SortByNext)               :call <SID>SortSelect()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_SortByPrev)               :call <SID>ReverseSortSelect()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleFindActive)         :call <SID>ToggleFindActive()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleHelp)               :call <SID>ToggleHelp()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleOnlyOneTab)         :call <SID>ToggleOnlyOneTab()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleReverseSort)        :call <SID>SortReverse()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleShowRelativePath)   :call <SID>ToggleShowRelativePath()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleShowTabBuffer)      :call <SID>ToggleShowTabBuffer()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleShowTerminal)       :call <SID>ToggleShowTerminal()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleShowUnlisted)       :call <SID>ToggleShowUnlisted()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <silent> <buffer> <Plug>(BufExplorer_ToggleSplitOutPathName)   :call <SID>ToggleSplitOutPathName()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮        nnoremap <buffer> <silent> <tab> :call <SID>SelectBuffer()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> <2-leftmouse>    <Plug>(BufExplorer_OpenBuffer)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> <CR>             <Plug>(BufExplorer_OpenBuffer)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> <F1>             <Plug>(BufExplorer_ToggleHelp)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> <s-cr>           <Plug>(BufExplorer_OpenBufferTab)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> a                <Plug>(BufExplorer_ToggleFindActive)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> b                <Plug>(BufExplorer_OpenBufferAsk)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> B                <Plug>(BufExplorer_ToggleOnlyOneTab)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> d                <Plug>(BufExplorer_BufferDelete)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> D                <Plug>(BufExplorer_BufferWipe)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> f                <Plug>(BufExplorer_OpenBufferSplitBelow)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> F                <Plug>(BufExplorer_OpenBufferSplitAbove)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> o                <Plug>(BufExplorer_OpenBuffer)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> O                <Plug>(BufExplorer_OpenBufferOriginalWindow)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> p                <Plug>(BufExplorer_ToggleSplitOutPathName)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> q                <Plug>(BufExplorer_Close)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> r                <Plug>(BufExplorer_ToggleReverseSort)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> R                <Plug>(BufExplorer_ToggleShowRelativePath)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> s                <Plug>(BufExplorer_SortByNext)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> S                <Plug>(BufExplorer_SortByPrev)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> t                <Plug>(BufExplorer_OpenBufferTab)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> T                <Plug>(BufExplorer_ToggleShowTabBuffer)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> u                <Plug>(BufExplorer_ToggleShowUnlisted)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> v                <Plug>(BufExplorer_OpenBufferSplitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> V                <Plug>(BufExplorer_OpenBufferSplitLeft)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nmap <nowait> <buffer> X                <Plug>(BufExplorer_ToggleShowTerminal)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮        execute "nnoremap <buffer> <silent>" k ":keepjumps normal!" k."<CR>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <script> <silent> <unique> <Leader>be :BufExplorer<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <script> <silent> <unique> <Leader>bt :ToggleBufExplorer<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\bufexplorer\plugin\bufexplorer.vim ⋮    nnoremap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', 'W', ':<C-U>call csv#MoveCol(1, line("."))<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<C-Right>', ':<C-U>call csv#MoveCol(1, line("."))<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', 'L', ':<C-U>call csv#MoveCol(1, line("."))<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮                call csv#Map('nnoremap', 'B', ':<C-U>call csv#MoveCol(-1, line("."))<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮                call csv#Map('nnoremap', 'E', ':<C-U>call csv#MoveCol(-1, line("."))<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮            call csv#Map('nnoremap', 'E', ':<C-U>call csv#MoveCol(-1, line("."))<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<C-Left>', ':<C-U>call csv#MoveCol(-1, line("."))<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', 'H', ':<C-U>call csv#MoveCol(-1, line("."), 1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', 'K', ':<C-U>call csv#MoveCol(0, line(".")-v:count1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<Up>', ':<C-U>call csv#MoveCol(0, line(".")-v:count1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', 'J', ':<C-U>call csv#MoveCol(0, line(".")+v:count1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<Down>', ':<C-U>call csv#MoveCol(0, line(".")+v:count1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<CR>', ':<C-U>call csv#PrepareFolding(1, 1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<Space>', ':<C-U>call csv#PrepareFolding(1, 0)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<BS>', ':<C-U>call csv#PrepareFolding(0, 1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('imap', '<CR>', 'csv#ColumnMode()', 'expr')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('xnoremap', 'if', ':<C-U>call csv#MoveOver(0)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('xnoremap', 'af', ':<C-U>call csv#MoveOver(1)<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('omap', 'af', ':norm vaf<cr>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('omap', 'if', ':norm vif<cr>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('xnoremap', 'iL', ':<C-U>call csv#SameFieldRegion()<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('omap', 'iL', ':<C-U>call csv#SameFieldRegion()<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('noremap', '<LocalLeader>J', 'J')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('noremap', '<LocalLeader>K', 'K')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('xnoremap', '<LocalLeader>W', 'W')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('xnoremap', '<LocalLeader>E', 'E')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('noremap', '<LocalLeader>H', 'H')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('noremap', '<LocalLeader>L', 'L')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<LocalLeader><CR>', '<CR>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<LocalLeader><Space>', '<Space>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        call csv#Map('nnoremap', '<LocalLeader><BS>', '<BS>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        exe a:map "<buffer> <silent>". expr a:name a:definition
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        if a:map == 'nnoremap'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        elseif a:map == 'noremap' || a:map == 'map'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        elseif a:map == 'vnoremap'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        elseif a:map == 'omap'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        elseif a:map == 'imap'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\csv.vim\autoload\csv.vim ⋮        elseif a:map == 'xnoremap'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-write-error.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-wrapper.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-validate.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-local.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\conky-syntax.vim\syntax\conkyrc.vim ⋮            \ imap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-kpsewhich-local-b\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮"   :noremap <silent><expr> <Plug>(incsearch-forward)  incsearch#go({'command': '/'})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮  execute 'noremap' '<Plug>(_incsearch-dotrepeat)' a:cmd
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap  <silent> <Plug>(_incsearch-winrestview) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap! <silent> <Plug>(_incsearch-winrestview) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮nnoremap <silent> <Plug>(_incsearch-winrestview) :<C-u>call winrestview(g:incsearch#_view)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮xnoremap <silent> <Plug>(_incsearch-winrestview) :<C-u>call winrestview(g:incsearch#_view)<CR>gv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap  <silent> <Plug>(_incsearch-gv) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap! <silent> <Plug>(_incsearch-gv) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮nnoremap <silent> <Plug>(_incsearch-gv) gv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap  <silent> <Plug>(_incsearch-esc) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap! <silent> <Plug>(_incsearch-esc) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮xnoremap <silent> <Plug>(_incsearch-esc) <Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap  <silent> <Plug>(_incsearch-hlsearch) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap! <silent> <Plug>(_incsearch-hlsearch) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮nnoremap <silent> <Plug>(_incsearch-hlsearch) :<C-u>let &hlsearch=&hlsearch<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮xnoremap <silent> <Plug>(_incsearch-hlsearch) :<C-u>let &hlsearch=&hlsearch<CR>gv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap  <silent>       <Plug>(_incsearch-searchforward) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮noremap! <silent>       <Plug>(_incsearch-searchforward) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮nnoremap <silent><expr> <Plug>(_incsearch-searchforward) <SID>_searchforward_cmd()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch.vim ⋮xnoremap <silent><expr> <Plug>(_incsearch-searchforward) <SID>_searchforward_cmd()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-kpsewhich-local-a\test.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-empty.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-clear.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-cache\test-basic.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\test-bibfiles\test_revtex.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\perf-syntax\run-redraws.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\perf-folding\measure.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\perf-folding\measure.vim ⋮nnoremap <space>tt :<c-u>call Report()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\example-performance\jobs-capture-cached.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\example-markdown\test.lua ⋮vim.keymap.set("n", "q", "<cmd>qall!<cr>")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\example-fzf-lua\test.lua ⋮vim.keymap.set("n", "q", "<cmd>qall!<cr>")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\test\example-fzf-lua\test.lua ⋮vim.keymap.set("n", "<localleader>lt", function()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Keymapping.vim ⋮\		"noremap" : 0,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Keymapping.vim ⋮		return s:unmapping(a:keymapping, s:_get_key(map_conf), map_conf.noremap) . next_input
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\util.vim ⋮" NOTE: support vmap?
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\util.vim ⋮  let map = printf('<Plug>(%s)', name)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\util.vim ⋮    let command = 'nnoremap'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\util.vim ⋮    let command = 'nmap'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_next) :ALENext<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_next_error) :ALENext -error<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_last) :ALELast<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinition -vsplit<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_implementation) :ALEGoToImplementation<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_implementation_in_tab) :ALEGoToImplementation -tab<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_implementation_in_split) :ALEGoToImplementation -split<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_go_to_implementation_in_vsplit) :ALEGoToImplementation -vsplit<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮inoremap <silent> <Plug>(ale_complete) <C-\><C-O>:ALEComplete<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_import) :ALEImport<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_rename) :ALERename<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_filerename) :ALEFileRename<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_code_action) :ALECodeAction<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_info) :ALEInfo<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_info_echo) :ALEInfo -echo<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_info_clipboard) :ALEInfo -clipboard<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\plugin\ale.vim ⋮nnoremap <silent> <Plug>(ale_info_preview) :ALEInfo -preview<Return>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview.vim ⋮noremap <buffer> q :q!<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> q :q!<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> v <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> i <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> I <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> <C-q> <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> <C-v> <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> <S-v> <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> a <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> A <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> o <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> O <NOP>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> <CR> :call ale#preview#OpenSelection()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-preview-selection.vim ⋮noremap <buffer> t :call ale#preview#OpenSelectionInTab()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-info.vim ⋮noremap <buffer> q :q!<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-info.vim ⋮nnoremap <buffer> <silent> <space> :call ALEInfoOpenHelp()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\ftplugin\ale-fix-suggest.vim ⋮noremap <buffer> q :q!<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex.vim ⋮    silent execute a:mode . 'map <silent><buffer><nowait>' a:lhs a:rhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\over\modules\incsearch.vim ⋮  "   FIXME: assume 'noremap' but it should take care wheter or not the
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮\   'keymap': {}
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮  \   'keymap': s:keymap()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮\       'noremap' : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮\       'noremap' : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮\       'noremap' : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮\       'noremap' : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮\       'noremap' : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮\       'noremap': 1
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮  \       'noremap': 1
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\config.vim ⋮function! s:keymap() abort
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\cli.vim ⋮  let a:cli._keymap = a:config.keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\autocmd.vim ⋮noremap  <silent><expr> <Plug>(_incsearch-nohlsearch) incsearch#autocmd#auto_nohlsearch(0)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\autocmd.vim ⋮noremap! <silent><expr> <Plug>(_incsearch-nohlsearch) incsearch#autocmd#auto_nohlsearch(0)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\autocmd.vim ⋮nnoremap <silent>       <Plug>(_incsearch-nohlsearch) :<C-u>nohlsearch<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\incsearch\autocmd.vim ⋮xnoremap <silent>       <Plug>(_incsearch-nohlsearch) :<C-u>nohlsearch<CR>gv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzy-/) incsearch#go(<SID>config_fuzzy())
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzy-?) incsearch#go(<SID>config_fuzzy({'command': '?'}))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzy-stay) incsearch#go(<SID>config_fuzzy({'is_stay': 1}))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzyword-/) incsearch#go(<SID>config_fuzzyword())
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzyword-?) incsearch#go(<SID>config_fuzzyword({'command': '?'}))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzyword-stay) incsearch#go(<SID>config_fuzzyword({'is_stay': 1}))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzyspell-/) incsearch#go(<SID>config_fuzzyspell())
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzyspell-?) incsearch#go(<SID>config_fuzzyspell({'command': '?'}))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch-fuzzy.vim\plugin\incsearch\fuzzy.vim ⋮noremap <silent><expr> <Plug>(incsearch-fuzzyspell-stay) incsearch#go(<SID>config_fuzzyspell({'is_stay': 1}))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir /s/b')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir /s/b/a:-d')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -print \| sed '1d;s:^..::'")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -type f -print -o -type l -print \| sed 's:^..::'")
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\plugin\fzf.vim ⋮onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\autoload\fzf\vim.vim ⋮nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\autoload\fzf\vim.vim ⋮nnoremap <plug>(-fzf-/) /
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\autoload\fzf\vim.vim ⋮nnoremap <plug>(-fzf-:) :
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\autoload\fzf\vim.vim ⋮inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\autoload\fzf\vim.vim ⋮nnoremap <silent> <Plug>(-fzf-complete-finish) a
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fzf.vim\autoload\fzf\vim.vim ⋮inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\KeyMapping.vim ⋮		\   'noremap' : c['noremap'],
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\Execute.vim ⋮	let map = printf("<Plug>(%s)", a:name)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\Execute.vim ⋮		let command = "nnoremap"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Modules\Execute.vim ⋮		let command = "nmap"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\incsearch.vim\autoload\vital\_incsearch\Over\Commandline\Base.vim ⋮	let key.noremap = 1
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\view.vim ⋮  nnoremap <buffer> <plug>(vimtex-view) :VimtexView<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fzf-dictionary\plugin\fzf-dictionary.vim ⋮inoremap <Plug>(fzf-dictionary-open) <cmd>call fzf#dictionary#open()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fugitive\plugin\fugitive.vim ⋮nmap <script><silent> <Plug>fugitive:y<C-G> :<C-U>call setreg(v:register, fugitive#Object(@%))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fugitive\plugin\fugitive.vim ⋮nmap <script> <Plug>fugitive: <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fugitive\autoload\fugitive.vim ⋮      call add(maps, mode.'map <buffer>' . substitute(flags, '<unique>', '', '') . ' <Plug>fugitive:' . a:lhs . ' ' . a:rhs)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fugitive\autoload\fugitive.vim ⋮      call add(maps, mode.'map <buffer>' . flags . ' ' . head.tail . ' ' . a:rhs)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fugitive\autoload\fugitive.vim ⋮nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fugitive\autoload\fugitive.vim ⋮    exe 'nnoremap <silent> <buffer> <Plug>NetrwBrowseX' new_browsex
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮    nmap <silent> <Leader><Leader>=  <Plug>FontsizeBegin
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮    nmap <silent> <Leader><Leader>+  <Plug>FontsizeInc
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮    nmap <silent> <Leader><Leader>-  <Plug>FontsizeDec
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮    nmap <silent> <Leader><Leader>0  <Plug>FontsizeDefault
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <Plug>FontsizeBegin       <SID>begin<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <Plug>FontsizeInc         <SID>inc<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <Plug>FontsizeDec         <SID>dec<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <Plug>FontsizeDefault     <SID>default<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <Plug>FontsizeSetDefault  <SID>setDefault<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <Plug>FontsizeQuit        <SID>quit
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)+        <SID>inc<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)=        <SID>inc<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)-        <SID>dec<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)0        <SID>default<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)!        <SID>setDefault<SID>(fontsize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)q        <SID>quit
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)<SPACE>  <SID>quit
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)<CR>     <SID>quit
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nmap <silent> <SID>(fontsize)         <SID>quit
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nnoremap <silent> <SID>begin       :<C-u>call fontsize#begin()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nnoremap <silent> <SID>inc         :<C-u>call fontsize#inc()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nnoremap <silent> <SID>dec         :<C-u>call fontsize#dec()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nnoremap <silent> <SID>default     :<C-u>call fontsize#default()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nnoremap <silent> <SID>setDefault  :<C-u>call fontsize#setDefault()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-fontsize\plugin\fontsize.vim ⋮nnoremap <silent> <SID>quit        :<C-u>call fontsize#quit()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\view\mupdf.vim ⋮  nnoremap <buffer> <plug>(vimtex-reverse-search)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <buffer> <plug>(vimtex-toc-open)   :call b:vimtex.toc.open()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <buffer> <plug>(vimtex-toc-toggle) :call b:vimtex.toc.toggle()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait><expr> gg b:toc.show_help ? 'gg}}j' : 'gg'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <esc>OA k
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <esc>OB j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <esc>OC k
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <esc>OD j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> q             :call b:toc.close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <esc>         :call b:toc.close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <space>       :call b:toc.activate_current(0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <2-leftmouse> :call b:toc.activate_current(0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> <cr>          :call b:toc.activate_current(1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> h             :call b:toc.toggle_help()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> f             :call b:toc.filter()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> F             :call b:toc.clear_filter()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> s             :call b:toc.toggle_numbers()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> t             :call b:toc.toggle_sorted_todos()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> r             :call b:toc.get_entries(1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> -             :call b:toc.decrease_depth()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮  nnoremap <silent><buffer><nowait> +             :call b:toc.increase_depth()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮          \ 'nnoremap <silent><buffer><nowait> %s'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\toc.vim ⋮            \ 'nnoremap <silent><buffer><nowait> %s%s'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj.vim ⋮    execute printf('xnoremap <silent><buffer> <plug>(vimtex-i%s) :<c-u>call vimtex#text_obj#%s(1, 1%s)<cr>', l:map, l:name, l:optional)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj.vim ⋮    execute printf('xnoremap <silent><buffer> <plug>(vimtex-a%s) :<c-u>call vimtex#text_obj#%s(0, 1%s)<cr>', l:map, l:name, l:optional)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj.vim ⋮    execute printf('onoremap <silent><buffer> <plug>(vimtex-i%s) :<c-u>call vimtex#text_obj#%s(1, 0%s)<cr>', l:map, l:name, l:optional)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj.vim ⋮    execute printf('onoremap <silent><buffer> <plug>(vimtex-a%s) :<c-u>call vimtex#text_obj#%s(0, 0%s)<cr>', l:map, l:name, l:optional)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj\targets.vim ⋮  omap <expr> <plug>(vimtex-targets-i) targets#e('o', 'i', 'i')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj\targets.vim ⋮  xmap <expr> <plug>(vimtex-targets-i) targets#e('x', 'i', 'i')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj\targets.vim ⋮  omap <expr> <plug>(vimtex-targets-a) targets#e('o', 'a', 'a')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\text_obj\targets.vim ⋮  xmap <expr> <plug>(vimtex-targets-a) targets#e('x', 'a', 'a')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮        \ 'nnoremap <buffer><silent> <Plug>(%s-action-choice) :<C-u>call <SID>_map_choice()<CR>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮        \ 'nnoremap <buffer><silent> <Plug>(%s-action-repeat) :<C-u>call <SID>_map_repeat()<CR>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮        \ 'nnoremap <buffer><silent> <Plug>(%s-action-help) :<C-u>call <SID>_map_help(0)<CR>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮        \ 'nnoremap <buffer><silent> <Plug>(%s-action-help:all) :<C-u>call <SID>_map_help(1)<CR>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮          \ 'nmap <buffer> a <Plug>(%s-action-choice)',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮          \ 'nmap <buffer> . <Plug>(%s-action-repeat)',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮          \ 'nmap <buffer> ? <Plug>(%s-action-help)',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮  let rs = split(execute('nmap'), '\n')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮  let ms = split(execute(printf('nmap <Plug>(%s-action-', s:prefix)), '\n')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\vital\_fern\App\Action.vim ⋮  nnoremap <buffer><silent> q :<C-u>q<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> g? <Plug>(FlogHelp)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogHelp) :help flog-mappings<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <CR> <Plug>(FlogVSplitCommitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVSplitCommitRight) :vertical belowright Flogsplitcommit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <Tab> <Plug>(FlogVSplitCommitPathsRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVSplitCommitPathsRight) :<C-U>exec flog#Format('vertical belowright Floggit -b -s -t show %h -- %p')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> git <Plug>(FlogGit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> git <Plug>(FlogGit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogGit) :Floggit
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <Plug>(FlogGit) :Floggit
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> . <Plug>(FlogStartCommand)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogStartCommand) :<C-U> <C-R>=flog#Format('%H')<CR><Home>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> y<C-G> <Plug>(FlogYank)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> y<C-G> <Plug>(FlogYank)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogYank) :<C-U>call flog#floggraph#yank#Hashes(v:register, '.', v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogYank) :<C-U>call flog#floggraph#yank#HashRange(v:register, "'<", "'>")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> y<C-T> <Plug>(FlogYankText)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> y<C-T> <Plug>(FlogYankText)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogYankText) :<C-U>call flog#floggraph#yank#SanitizedText(v:register, '.', v:count1, 0, 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogYankText) :<C-U>call flog#floggraph#yank#SanitizedTextRange(v:register, "'<", "'>", 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> y<C-X> <Plug>(FlogYankTextWithGraph)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> y<C-X> <Plug>(FlogYankTextWithGraph)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogYankTextWithGraph) :<C-U>call flog#floggraph#yank#SanitizedText(v:register, '.', v:count1, 1, 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogYankTextWithGraph) :<C-U>call flog#floggraph#yank#SanitizedTextRange(v:register, "'<", "'>", 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> u <Plug>(FlogUpdate)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogUpdate) :<C-U>call flog#floggraph#buf#Update()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gs <Plug>(FlogVSplitStaged)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gu <Plug>(FlogVSplitUntracked)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gU <Plug>(FlogVSplitUnstaged)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVSplitStaged) :<C-U>vertical belowright Floggit -b -s -t diff --cached<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVSplitUntracked) :<C-U>exec flog#Format('silent Floggit -b -s add -N . \| vertical belowright Floggit -b -s -t diff \| silent Floggit -b -s read-tree %t')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVSplitUnstaged) :<C-U>vertical belowright Floggit -b -s -t diff<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> dq <Plug>(FlogCloseTmpWin)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogCloseTmpWin) :<C-U>call flog#floggraph#side_win#CloseTmp()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ZZ <Plug>(FlogQuit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gq <Plug>(FlogQuit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogQuit) :<C-U>call flog#floggraph#buf#Close()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ^ <Plug>(FlogJumpToCommitStart)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> ^ <Plug>(FlogJumpToCommitStart)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogJumpToCommitStart) :<C-U>call flog#floggraph#nav#JumpToCommitStart()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogJumpToCommitStart) :<C-U>call flog#floggraph#nav#JumpToCommitStart()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ) <Plug>(FlogNextCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ( <Plug>(FlogPrevCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogNextCommit) :<C-U>call flog#floggraph#nav#NextCommit(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogPrevCommit) :<C-U>call flog#floggraph#nav#PrevCommit(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <C-N> <Plug>(FlogVNextCommitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <C-P> <Plug>(FlogVPrevCommitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVNextCommitRight) :<C-U>call flog#floggraph#nav#NextCommit(v:count1) \| vertical belowright Flogsplitcommit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVPrevCommitRight) :<C-U>call flog#floggraph#nav#PrevCommit(v:count1) \| vertical belowright Flogsplitcommit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ]r <Plug>(FlogVNextRefRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> [r <Plug>(FlogVPrevRefRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVNextRefRight) :<C-U>call flog#floggraph#nav#NextRefCommit(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVPrevRefRight) :<C-U>call flog#floggraph#nav#PrevRefCommit(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> } <Plug>(FlogJumpToParent)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> { <Plug>(FlogJumpToChild)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogJumpToParent) :<C-U>call flog#floggraph#nav#JumpToParent(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogJumpToChild) :<C-U>call flog#floggraph#nav#JumpToChild(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <C-I> <Plug>(FlogJumpToNewer)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <C-O> <Plug>(FlogJumpToOlder)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogJumpToNewer) :<C-U>call flog#floggraph#nav#JumpToNewer(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogJumpToOlder) :<C-U>call flog#floggraph#nav#JumpToOlder(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ]] <Plug>(FlogSkipAhead)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSkipAhead) :<C-U>call flog#floggraph#nav#SkipAhead(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> [[ <Plug>(FlogSkipBack)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSkipBack) :<C-U>call flog#floggraph#nav#SkipBack(v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gcg <Plug>(FlogSetSkip)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSetSkip) :<C-U>call flog#floggraph#nav#SkipTo(v:count)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gct <Plug>(FlogSetRev)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSetRev) :<C-U>call flog#floggraph#nav#SetRevToCommitAtLine('.')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gcc <Plug>(FlogClearRev)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogClearRev) :<C-U>call flog#floggraph#nav#ClearRev()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> m <Plug>(FlogSetCommitMark)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> m <Plug>(FlogSetCommitMark)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSetCommitMark) :<C-U>call flog#floggraph#mark#Set(nr2char(getchar()), '.')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogSetCommitMark) :<C-U>call flog#floggraph#mark#Set(nr2char(getchar()), '.')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ' <Plug>(FlogJumpToCommitMark)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> ' <Plug>(FlogJumpToCommitMark)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogJumpToCommitMark) :<C-U>call flog#floggraph#nav#JumpToMark(nr2char(getchar()))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogJumpToCommitMark) :<C-U>call flog#floggraph#nav#JumpToMark(nr2char(getchar()))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <nowait> < <Plug>(FlogCollapseCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> < <Plug>(FlogCollapseCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <nowait> <silent> <Plug>(FlogCollapseCommit) :<C-U>call flog#floggraph#collapse#CollapseAtLine('.')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogCollapseCommit) :<C-U>call flog#floggraph#collapse#CollapseRange("'<", "'>")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <nowait> g< <Plug>(FlogCollapseAll)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <nowait> <silent> <Plug>(FlogCollapseAll) :<C-U>call flog#floggraph#collapse#CollapseAll()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <nowait> > <Plug>(FlogExpandCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> > <Plug>(FlogExpandCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogExpandCommit) :<C-U>call flog#floggraph#collapse#ExpandAtLine('.')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogExpandCommit) :<C-U>call flog#floggraph#collapse#ExpandRange("'<", "'>")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <nowait> g> <Plug>(FlogExpandAll)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <nowait> <silent> <Plug>(FlogExpandAll) :<C-U>call flog#floggraph#collapse#ExpandAll()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> <nowait> = <Plug>(FlogToggleCollapseCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> = <Plug>(FlogToggleCollapseCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <nowait> <silent> <Plug>(FlogToggleCollapseCommit) :<C-U>call flog#floggraph#collapse#ToggleAtLine('.')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogToggleCollapseCommit) :<C-U>call flog#floggraph#collapse#ToggleRange("'<", "'>")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> a <Plug>(FlogToggleAll)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogToggleAll) :<C-U>call flog#floggraph#opts#ToggleAll()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gb <Plug>(FlogToggleBisect)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogToggleBisect) :<C-U>call flog#floggraph#opts#ToggleBisect()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gP <Plug>(FlogToggleFirstParent)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogToggleFirstParent) :<C-U>call flog#floggraph#opts#ToggleFirstParent()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gm <Plug>(FlogToggleMerges)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogToggleMerges) :<C-U>call flog#floggraph#opts#ToggleMerges()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gr <Plug>(FlogToggleReflog)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogToggleReflog) :<C-U>call flog#floggraph#opts#ToggleReflog()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gx <Plug>(FlogToggleGraph)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogToggleGraph) :<C-U>call flog#floggraph#opts#ToggleGraph()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gp <Plug>(FlogTogglePatch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogTogglePatch) :<C-U>call flog#floggraph#opts#TogglePatch()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> g/ <Plug>(FlogSearch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogSearch) :<C-U>Flogsetargs -search=
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> g\ <Plug>(FlogPatchSearch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogPatchSearch) :<C-U>Flogsetargs -patch-search=
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> goo <Plug>(FlogCycleOrder)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogCycleOrder) :<C-U>call flog#floggraph#opts#CycleOrder()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> god <Plug>(FlogOrderDate)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogOrderDate) :<C-U>Flogsetargs -order=date<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> goa <Plug>(FlogOrderAuthor)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogOrderAuthor) :<C-U>Flogsetargs -order=author<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> got <Plug>(FlogOrderTopo)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogOrderTopo) :<C-U>Flogsetargs -order=topo<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> gor <Plug>(FlogToggleReverse)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogToggleReverse) :<C-U>call flog#floggraph#opts#ToggleReverse()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> dd <Plug>(FlogVDiffSplitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> dd <Plug>(FlogVDiffSplitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> dv <Plug>(FlogVDiffSplitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> dv <Plug>(FlogVDiffSplitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> DD <Plug>(FlogVDiffSplitPathsRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> DD <Plug>(FlogVDiffSplitPathsRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> DV <Plug>(FlogVDiffSplitPathsRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> DV <Plug>(FlogVDiffSplitPathsRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitRight) :<C-U>exec flog#Format('vertical belowright Floggit -b -s -t diff HEAD %h')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogVDiffSplitRight) :<C-U>exec flog#Format("vertical belowright Floggit -b -s -t diff %(h'>) %(h'<)")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitPathsRight) :<C-U>exec flog#Format('vertical belowright Floggit -b -s -t diff HEAD %h -- %p')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogVDiffSplitPathsRight) :<C-U>exec flog#Format("vertical belowright Floggit -b -s -t diff HEAD %(h'<) %(h'>) -- %p")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> d! <Plug>(FlogVDiffSplitLastCommitRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> D! <Plug>(FlogVDiffSplitLastCommitPathsRight)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitLastCommitRight) :<C-U>exec flog#Format("vertical belowright Floggit -b -s -t diff %(h'!) %H")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitLastCommitPathsRight) :<C-U>exec flog#Format("vertical belowright Floggit -b -s -t diff %(h'!) %H -- %p")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> d? <Plug>(FlogDiffHelp)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogDiffHelp) :help flog-diff-mappings<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cc <Plug>(FlogCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogCommit) :<C-U>Floggit commit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ca <Plug>(FlogAmend)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogAmend) :<C-U>Floggit commit --amend<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ce <Plug>(FlogAmendNoEdit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogAmendNoEdit) :<C-U>Floggit commit --amend --no-edit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cf <Plug>(FlogFixup)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cF <Plug>(FlogFixupRebase)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogFixup) :<C-U>exec flog#Format('Floggit commit --fixup=%H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogFixupRebase) :<C-U>exec flog#Format('Floggit -b -s commit --fixup=%H \| Floggit -c sequence.editor=true rebase --interactive --autosquash %H^')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cs <Plug>(FlogSquash)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cS <Plug>(FlogSquashRebase)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cA <Plug>(FlogSquashEdit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSquash) :<C-U>exec flog#Format('Floggit commit --no-edit --squash=%H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSquashRebase) :<C-U>exec flog#Format('Floggit -b -s commit --no-edit --squash=%H \| Floggit -c sequence.editor=true rebase --interactive --autosquash %H^')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogSquashEdit) :<C-U>exec flog#Format('Floggit commit --edit --squash=%H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> crc <Plug>(FlogRevert)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> crc <Plug>(FlogRevert)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> crn <Plug>(FlogRevertNoEdit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> crn <Plug>(FlogRevertNoEdit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRevert) :<C-U>exec flog#Format('Floggit revert %H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogRevert) :<C-U>exec flog#Format("Floggit revert %(h'<)^..%(h'>)")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRevertNoEdit) :<C-U>exec flog#Format('Floggit revert --no-edit %H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <silent> <Plug>(FlogRevertNoEdit) :<C-U>exec flog#Format("Floggit revert --no-edit %(h'<)^..%(h'>)")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> coo <Plug>(FlogCheckout)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogCheckout) :<C-U>exec flog#Format('Floggit checkout %H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cob <Plug>(FlogCheckoutBranch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogCheckoutBranch) :<C-U>exec flog#Format('Floggit checkout %b')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> col <Plug>(FlogCheckoutLocalBranch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮    nnoremap <buffer> <silent> cot :<C-U>call flog#deprecate#DefaultMapping('cot', 'col')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogCheckoutLocalBranch) :<C-U>exec flog#Format('Floggit checkout %l')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> c<Space> <Plug>(FlogGitCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> c<Space> <Plug>(FlogGitCommit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogGitCommit) :Floggit commit<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <Plug>(FlogGitCommit) :Floggit commit<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cr<Space> <Plug>(FlogGitRevert)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> cr<Space> <Plug>(FlogGitRevert)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogGitRevert) :Floggit revert<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <Plug>(FlogGitRevert) :Floggit revert<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cm<Space> <Plug>(FlogGitMerge)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> cm<Space> <Plug>(FlogGitMerge)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogGitMerge) :Floggit merge<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <Plug>(FlogGitMerge) :Floggit merge<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> co<Space> <Plug>(FlogGitCheckout)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> co<Space> <Plug>(FlogGitCheckout)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogGitCheckout) :Floggit checkout<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <Plug>(FlogGitCheckout) :Floggit checkout<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> cb<Space> <Plug>(FlogGitBranch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> cb<Space> <Plug>(FlogGitBranch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogGitBranch) :Floggit branch<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <Plug>(FlogGitBranch) :Floggit branch<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> c? <Plug>(FlogCommitHelp)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogCommitHelp) :help flog-commit-mappings<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ri <Plug>(FlogRebaseInteractive)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractive) :<C-U>exec flog#Format('Floggit rebase --interactive %H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> rf <Plug>(FlogRebaseInteractiveAutosquash)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveAutosquash) :<C-U>exec flog#Format('Floggit -c sequence.editor=true rebase --interactive --autosquash %H')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ru <Plug>(FlogRebaseInteractiveUpstream)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveUpstream) :<C-U>Floggit rebase --interactive @{upstream}<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> rp <Plug>(FlogRebaseInteractivePush)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractivePush) :<C-U>Floggit rebase --interactive @{push}<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> rr <Plug>(FlogRebaseContinue)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseContinue) :<C-U>Floggit rebase --continue<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> rs <Plug>(FlogRebaseSkip)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseSkip) :<C-U>Floggit rebase --skip<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> ra <Plug>(FlogRebaseAbort)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseAbort) :<C-U>Floggit rebase --abort<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> re <Plug>(FlogRebaseEditTodo)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseEditTodo) :<C-U>Floggit rebase --edit-todo<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> rw <Plug>(FlogRebaseInteractiveReword)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveReword) :<C-U>exec flog#Format('Floggit rebase --interactive %H^ \| s/^pick/reword/e')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> rm <Plug>(FlogRebaseInteractiveEdit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveEdit) :<C-U>exec flog#Format('Floggit rebase --interactive %H^ \| s/^pick/edit/e')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> rd <Plug>(FlogRebaseInteractiveDrop)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveDrop) :<C-U>exec flog#Format('Floggit rebase --interactive %H^ \| s/^pick/drop/e')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> r<Space> <Plug>(FlogGitRebase)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  vmap <buffer> r<Space> <Plug>(FlogGitRebase)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <Plug>(FlogGitRebase) :Floggit rebase<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮vnoremap <buffer> <Plug>(FlogGitRebase) :Floggit rebase<Space>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  nmap <buffer> r? <Plug>(FlogRebaseHelp)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮nnoremap <buffer> <silent> <Plug>(FlogRebaseHelp) :help flog-rebase-mappings<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-flog\ftplugin\floggraph.vim ⋮  exec 'nnoremap <buffer> <silent> ' . mapping . ' :<C-U>call flog#floggraph#nav#Motion(v:count . "<C-V>' . mapping . '")<CR>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-path)       :<C-u>call <SID>call('new_path')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-file)       :<C-u>call <SID>call('new_file')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-dir)        :<C-u>call <SID>call('new_dir')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-path=)      :<C-u>call <SID>call_without_guard('new_path')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-file=)      :<C-u>call <SID>call_without_guard('new_file')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-dir=)       :<C-u>call <SID>call_without_guard('new_dir')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-copy)           :<C-u>call <SID>call('copy')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-move)           :<C-u>call <SID>call('move')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-trash)          :<C-u>call <SID>call('trash')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-trash=)         :<C-u>call <SID>call_without_guard('trash')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-remove)         :<C-u>call <SID>call('remove')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-remove=)        :<C-u>call <SID>call_without_guard('remove')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-preview:left)   :<C-u>call <SID>call('preview', 'vertical topleft')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-preview:right)  :<C-u>call <SID>call('preview', 'vertical botright')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-preview:top)    :<C-u>call <SID>call('preview', 'topleft')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-preview:bottom) :<C-u>call <SID>call('preview', 'botright')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-preview) <Plug>(fern-action-preview:bottom)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮    nmap <buffer><nowait> N <Plug>(fern-action-new-file)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮    nmap <buffer><nowait> K <Plug>(fern-action-new-dir)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮    nmap <buffer><nowait> c <Plug>(fern-action-copy)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮    nmap <buffer><nowait> m <Plug>(fern-action-move)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping.vim ⋮    nmap <buffer><nowait> D <Plug>(fern-action-trash)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\yank.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-yank:path) :<C-u>call <SID>call('yank_path')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\yank.vim ⋮  nmap <buffer> <Plug>(fern-action-yank) <Plug>(fern-action-yank:path)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:select)   :<C-u>call <SID>call('terminal', 'select')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:split)    :<C-u>call <SID>call('terminal', 'split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:vsplit)   :<C-u>call <SID>call('terminal', 'vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:tabedit)  :<C-u>call <SID>call('terminal', 'tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:above)    :<C-u>call <SID>call('terminal', 'leftabove split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:left)     :<C-u>call <SID>call('terminal', 'leftabove vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:below)    :<C-u>call <SID>call('terminal', 'rightbelow split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:right)    :<C-u>call <SID>call('terminal', 'rightbelow vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:top)      :<C-u>call <SID>call('terminal', 'topleft split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:leftest)  :<C-u>call <SID>call('terminal', 'topleft vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:bottom)   :<C-u>call <SID>call('terminal', 'botright split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:rightest) :<C-u>call <SID>call('terminal', 'botright vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-error)   :<C-u>call <SID>call('terminal', 'edit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-split)   :<C-u>call <SID>call('terminal', 'edit/split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-vsplit)  :<C-u>call <SID>call('terminal', 'edit/vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-tabedit) :<C-u>call <SID>call('terminal', 'edit/tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nmap <buffer><silent><expr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-terminal:edit) <Plug>(fern-action-terminal:edit-or-error)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\terminal.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-terminal) <Plug>(fern-action-terminal:edit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\system.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:system) :<C-u>call <SID>call('open_system')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\system.vim ⋮    nmap <buffer><nowait> x <Plug>(fern-action-open:system)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:select)   :<C-u>call <SID>call('rename', 'select')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:split)    :<C-u>call <SID>call('rename', 'split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:vsplit)   :<C-u>call <SID>call('rename', 'vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:tabedit)  :<C-u>call <SID>call('rename', 'tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:above)    :<C-u>call <SID>call('rename', 'leftabove split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:left)     :<C-u>call <SID>call('rename', 'leftabove vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:below)    :<C-u>call <SID>call('rename', 'rightbelow split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:right)    :<C-u>call <SID>call('rename', 'rightbelow vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:top)      :<C-u>call <SID>call('rename', 'topleft split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:leftest)  :<C-u>call <SID>call('rename', 'topleft vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:bottom)   :<C-u>call <SID>call('rename', 'botright split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:rightest) :<C-u>call <SID>call('rename', 'botright vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-error)   :<C-u>call <SID>call('rename', 'edit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-split)   :<C-u>call <SID>call('rename', 'edit/split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-vsplit)  :<C-u>call <SID>call('rename', 'edit/vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-tabedit) :<C-u>call <SID>call('rename', 'edit/tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-rename:edit) <Plug>(fern-action-rename:edit-or-error)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-rename) <Plug>(fern-action-rename:split)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\rename.vim ⋮    nmap <buffer><nowait> R <Plug>(fern-action-rename)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\grep.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-grep)  :<C-u>call <SID>call('grep')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\grep.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-grep=) :<C-u>call <SID>call_without_guard('grep')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\ex.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-ex)  :<C-u>call <SID>call('ex')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\ex.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-ex=) :<C-u>call <SID>call_without_guard('ex')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-copy)  :<C-u>call <SID>call('clipboard_copy')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-move)  :<C-u>call <SID>call('clipboard_move')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-paste) :<C-u>call <SID>call('clipboard_paste')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-clear) :<C-u>call <SID>call('clipboard_clear')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\clipboard.vim ⋮    nmap <buffer><nowait> C <Plug>(fern-action-clipboard-copy)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\clipboard.vim ⋮    nmap <buffer><nowait> M <Plug>(fern-action-clipboard-move)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\clipboard.vim ⋮    nmap <buffer><nowait> P <Plug>(fern-action-clipboard-paste)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-cd:root)  :<C-u>call <SID>call('cd_root', 'cd')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-lcd:root) :<C-u>call <SID>call('cd_root', 'lcd')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-tcd:root) :<C-u>call <SID>call('cd_root', 'tcd')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-cd:cursor)  :<C-u>call <SID>call('cd_cursor', 'cd')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-lcd:cursor) :<C-u>call <SID>call('cd_cursor', 'lcd')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-tcd:cursor) :<C-u>call <SID>call('cd_cursor', 'tcd')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nmap <buffer> <Plug>(fern-action-cd) <Plug>(fern-action-cd:cursor)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nmap <buffer> <Plug>(fern-action-lcd) <Plug>(fern-action-lcd:cursor)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\file\mapping\cd.vim ⋮  nmap <buffer> <Plug>(fern-action-tcd) <Plug>(fern-action-tcd:cursor)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-leaf)   :<C-u>call <SID>call('new_leaf')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-new-branch) :<C-u>call <SID>call('new_branch')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-copy)       :<C-u>call <SID>call('copy')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-move)       :<C-u>call <SID>call('move')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-remove)     :<C-u>call <SID>call('remove')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-edit-leaf)  :<C-u>call <SID>call('edit_leaf')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮    nmap <buffer><nowait> N <Plug>(fern-action-new-leaf)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮    nmap <buffer><nowait> K <Plug>(fern-action-new-branch)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮    nmap <buffer><nowait> c <Plug>(fern-action-copy)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮    nmap <buffer><nowait> m <Plug>(fern-action-move)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮    nmap <buffer><nowait> D <Plug>(fern-action-remove)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping.vim ⋮    nmap <buffer><nowait> e <Plug>(fern-action-edit-leaf)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:select)   :<C-u>call <SID>call('rename', 'select')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:split)    :<C-u>call <SID>call('rename', 'split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:vsplit)   :<C-u>call <SID>call('rename', 'vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:tabedit)  :<C-u>call <SID>call('rename', 'tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:above)    :<C-u>call <SID>call('rename', 'leftabove split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:left)     :<C-u>call <SID>call('rename', 'leftabove vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:below)    :<C-u>call <SID>call('rename', 'rightbelow split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:right)    :<C-u>call <SID>call('rename', 'rightbelow vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:top)      :<C-u>call <SID>call('rename', 'topleft split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:leftest)  :<C-u>call <SID>call('rename', 'topleft vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:bottom)   :<C-u>call <SID>call('rename', 'botright split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:rightest) :<C-u>call <SID>call('rename', 'botright vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-error)   :<C-u>call <SID>call('rename', 'edit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-split)   :<C-u>call <SID>call('rename', 'edit/split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-vsplit)  :<C-u>call <SID>call('rename', 'edit/vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-tabedit) :<C-u>call <SID>call('rename', 'edit/tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-rename:edit) <Plug>(fern-action-rename:edit-or-error)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-rename) <Plug>(fern-action-rename:split)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\rename.vim ⋮    nmap <buffer><nowait> R <Plug>(fern-action-rename)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-copy)  :<C-u>call <SID>call('clipboard_copy')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-move)  :<C-u>call <SID>call('clipboard_move')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-paste) :<C-u>call <SID>call('clipboard_paste')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\clipboard.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-clear) :<C-u>call <SID>call('clipboard_clear')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\clipboard.vim ⋮    nmap <buffer><nowait> C <Plug>(fern-action-clipboard-copy)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\clipboard.vim ⋮    nmap <buffer><nowait> M <Plug>(fern-action-clipboard-move)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\scheme\dict\mapping\clipboard.vim ⋮    nmap <buffer><nowait> P <Plug>(fern-action-clipboard-paste)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping.vim ⋮  silent execute printf('nmap <buffer> <Plug>(%s) <Plug>(%s)', a:old, a:new)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\yank.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-yank:label) :<C-u>call <SID>call('yank', 'label')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\yank.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-yank:badge) :<C-u>call <SID>call('yank', 'badge')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\yank.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-yank:bufname) :<C-u>call <SID>call('yank', 'bufname')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\yank.vim ⋮  nmap <buffer> <Plug>(fern-action-yank) <Plug>(fern-action-yank:bufname)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\yank.vim ⋮    nmap <buffer><nowait> y <Plug>(fern-action-yank)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\wait.vim ⋮  nnoremap <buffer><silent>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\wait.vim ⋮  nmap <buffer> <Plug>(fern-wait) <Plug>(fern-wait-viewer:ready)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\tree.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-cancel) :<C-u>call <SID>call('cancel')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\tree.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-redraw) :<C-u>call <SID>call('redraw')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\tree.vim ⋮    nmap <buffer><nowait> <C-c> <Plug>(fern-action-cancel)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\tree.vim ⋮    nmap <buffer><nowait> <C-l> <Plug>(fern-action-redraw)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:select)   :<C-u>call <SID>call('open', 'select')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:split)    :<C-u>call <SID>call('open', 'split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:vsplit)   :<C-u>call <SID>call('open', 'vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:tabedit)  :<C-u>call <SID>call('open', 'tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:above)    :<C-u>call <SID>call('open', 'leftabove split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:left)     :<C-u>call <SID>call('open', 'leftabove vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:below)    :<C-u>call <SID>call('open', 'rightbelow split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:right)    :<C-u>call <SID>call('open', 'rightbelow vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:top)      :<C-u>call <SID>call('open', 'topleft split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:leftest)  :<C-u>call <SID>call('open', 'topleft vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:bottom)   :<C-u>call <SID>call('open', 'botright split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:rightest) :<C-u>call <SID>call('open', 'botright vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:drop)     :<C-u>call <SID>call('open', 'drop')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-error)   :<C-u>call <SID>call('open', 'edit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-split)   :<C-u>call <SID>call('open', 'edit/split')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-vsplit)  :<C-u>call <SID>call('open', 'edit/vsplit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-tabedit) :<C-u>call <SID>call('open', 'edit/tabedit')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nmap <buffer><silent><expr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nmap <buffer><silent><expr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nmap <buffer><silent><expr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-open:edit) <Plug>(fern-action-open:edit-or-error)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-open) <Plug>(fern-action-open:edit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮    nmap <buffer><nowait> <C-m> <Plug>(fern-action-open-or-enter)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮    nmap <buffer><nowait> <Return> <Plug>(fern-action-open-or-enter)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮    nmap <buffer><nowait> l <Plug>(fern-action-open-or-expand)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮    nmap <buffer><nowait> s <Plug>(fern-action-open:select)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮    nmap <buffer><nowait> e <Plug>(fern-action-open)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮    nmap <buffer><nowait> E <Plug>(fern-action-open:side)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\open.vim ⋮    nmap <buffer><nowait> t <Plug>(fern-action-open:tabedit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-debug)            :<C-u>call <SID>call('debug')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-reload:all)       :<C-u>call <SID>call('reload_all')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-reload:cursor)    :<C-u>call <SID>call('reload_cursor')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-expand:stay)      :<C-u>call <SID>call('expand_stay')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-expand:in)        :<C-u>call <SID>call('expand_in')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-expand-tree:stay) :<C-u>call <SID>call('expand_tree_stay')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-expand-tree:in)   :<C-u>call <SID>call('expand_tree_in')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-collapse)         :<C-u>call <SID>call('collapse')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-reveal)           :<C-u>call <SID>call('reveal')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-reveal=)          :<C-u>call <SID>call_without_guard('reveal')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-focus:parent)     :<C-u>call <SID>call('focus_parent')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-enter)            :<C-u>call <SID>call('enter')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-leave)            :<C-u>call <SID>call('leave')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nmap <buffer> <Plug>(fern-action-reload) <Plug>(fern-action-reload:all)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nmap <buffer> <Plug>(fern-action-expand) <Plug>(fern-action-expand:in)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮  nmap <buffer> <Plug>(fern-action-expand-tree) <Plug>(fern-action-expand-tree:in)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> <F5> <Plug>(fern-action-reload)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> <C-m> <Plug>(fern-action-enter)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> <Return> <Plug>(fern-action-enter)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> <C-h> <Plug>(fern-action-leave)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> <Backspace> <Plug>(fern-action-leave)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> l <Plug>(fern-action-expand)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> h <Plug>(fern-action-collapse)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\node.vim ⋮    nmap <buffer><nowait> i <Plug>(fern-action-reveal)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-mark:clear)  :<C-u>call <SID>call('mark_clear')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-mark:set)    :<C-u>call <SID>call('mark_set')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-mark:unset)  :<C-u>call <SID>call('mark_unset')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-mark:toggle) :<C-u>call <SID>call('mark_toggle')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  vnoremap <buffer><silent> <Plug>(fern-action-mark:set)    :call <SID>call('mark_set')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  vnoremap <buffer><silent> <Plug>(fern-action-mark:unset)  :call <SID>call('mark_unset')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  vnoremap <buffer><silent> <Plug>(fern-action-mark:toggle) :call <SID>call('mark_toggle')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  nmap <buffer> <Plug>(fern-action-mark) <Plug>(fern-action-mark:toggle)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮  vmap <buffer> <Plug>(fern-action-mark) <Plug>(fern-action-mark:toggle)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮    nmap <buffer><nowait> <C-j> <Plug>(fern-action-mark)j
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮    nmap <buffer><nowait> <C-k> k<Plug>(fern-action-mark)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮    nmap <buffer><nowait> -     <Plug>(fern-action-mark)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\mark.vim ⋮    vmap <buffer><nowait> -     <Plug>(fern-action-mark)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-hidden:set)    :<C-u>call <SID>call('hidden_set')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-hidden:unset)  :<C-u>call <SID>call('hidden_unset')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-hidden:toggle) :<C-u>call <SID>call('hidden_toggle')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-include)       :<C-u>call <SID>call('include')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-exclude)       :<C-u>call <SID>call('exclude')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-include=)      :<C-u>call <SID>call_without_guard('include')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-exclude=)      :<C-u>call <SID>call_without_guard('exclude')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮  nmap <buffer> <Plug>(fern-action-hidden) <Plug>(fern-action-hidden:toggle)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮    nmap <buffer><nowait> !  <Plug>(fern-action-hidden)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮    nmap <buffer><nowait> fi <Plug>(fern-action-include)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\filter.vim ⋮    nmap <buffer><nowait> fe <Plug>(fern-action-exclude)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\drawer.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-zoom) :<C-u>call <SID>call('zoom')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\drawer.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-zoom:reset) :<C-u>call <SID>call('zoom_reset')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\drawer.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-zoom:half) 4<Plug>(fern-action-zoom)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\drawer.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-zoom:full) 9<Plug>(fern-action-zoom)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\drawer.vim ⋮    nmap <buffer><nowait> z <Plug>(fern-action-zoom)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\drawer.vim ⋮    nmap <buffer><nowait> Z <Plug>(fern-action-zoom:reset)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:select)   :<C-u>call <SID>call('diff', 'select', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:split)    :<C-u>call <SID>call('diff', 'split', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:vsplit)   :<C-u>call <SID>call('diff', 'vsplit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:tabedit)  :<C-u>call <SID>call('diff', 'tabedit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:above)    :<C-u>call <SID>call('diff', 'leftabove split', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:left)     :<C-u>call <SID>call('diff', 'leftabove vsplit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:below)    :<C-u>call <SID>call('diff', 'rightbelow split', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:right)    :<C-u>call <SID>call('diff', 'rightbelow vsplit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:top)      :<C-u>call <SID>call('diff', 'topleft split', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:leftest)  :<C-u>call <SID>call('diff', 'topleft vsplit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:bottom)   :<C-u>call <SID>call('diff', 'botright split', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:rightest) :<C-u>call <SID>call('diff', 'botright vsplit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-error)   :<C-u>call <SID>call('diff', 'edit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-split)   :<C-u>call <SID>call('diff', 'edit/split', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-vsplit)  :<C-u>call <SID>call('diff', 'edit/vsplit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-tabedit) :<C-u>call <SID>call('diff', 'edit/tabedit', v:false)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:select:vert)   :<C-u>call <SID>call('diff', 'select', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:split:vert)    :<C-u>call <SID>call('diff', 'split', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:vsplit:vert)   :<C-u>call <SID>call('diff', 'vsplit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:tabedit:vert)  :<C-u>call <SID>call('diff', 'tabedit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:above:vert)    :<C-u>call <SID>call('diff', 'leftabove split', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:left:vert)     :<C-u>call <SID>call('diff', 'leftabove vsplit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:below:vert)    :<C-u>call <SID>call('diff', 'rightbelow split', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:right:vert)    :<C-u>call <SID>call('diff', 'rightbelow vsplit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:top:vert)      :<C-u>call <SID>call('diff', 'topleft split', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:leftest:vert)  :<C-u>call <SID>call('diff', 'topleft vsplit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:bottom:vert)   :<C-u>call <SID>call('diff', 'botright split', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:rightest:vert) :<C-u>call <SID>call('diff', 'botright vsplit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-error:vert)   :<C-u>call <SID>call('diff', 'edit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-split:vert)   :<C-u>call <SID>call('diff', 'edit/split', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-vsplit:vert)  :<C-u>call <SID>call('diff', 'edit/vsplit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-tabedit:vert) :<C-u>call <SID>call('diff', 'edit/tabedit', v:true)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nmap <buffer><silent><expr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nmap <buffer><silent><expr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-diff:edit) <Plug>(fern-action-diff:edit-or-error)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-diff:edit:vert) <Plug>(fern-action-diff:edit-or-error:vert)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-diff) <Plug>(fern-action-diff:edit)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\mapping\diff.vim ⋮  nmap <buffer><silent> <Plug>(fern-action-diff:vert) <Plug>(fern-action-diff:edit:vert)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-easy-align\plugin\easy_align.vim ⋮nnoremap <silent> <Plug>(EasyAlign) :set opfunc=<SID>easy_align_op<Enter>g@
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-easy-align\plugin\easy_align.vim ⋮vnoremap <silent> <Plug>(EasyAlign) :<C-U>call <SID>easy_align_op(visualmode(), 1)<Enter>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-easy-align\plugin\easy_align.vim ⋮nnoremap <silent> <Plug>(LiveEasyAlign) :set opfunc=<SID>live_easy_align_op<Enter>g@
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-easy-align\plugin\easy_align.vim ⋮vnoremap <silent> <Plug>(LiveEasyAlign) :<C-U>call <SID>live_easy_align_op(visualmode(), 1)<Enter>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-easy-align\plugin\easy_align.vim ⋮nnoremap <silent> <Plug>(EasyAlignRepeat) :call <SID>easy_align_repeat()<Enter>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-easy-align\plugin\easy_align.vim ⋮vnoremap <silent> <Plug>(EasyAlignRepeat) :<C-U>call <SID>repeat_in_visual()<Enter>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-easy-align\plugin\easy_align.vim ⋮nnoremap <silent> <Plug>(EasyAlignOperator) :set opfunc=<SID>easy_align_op<Enter>g@
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\syntax\p\unicode_math.vim ⋮  let l:map = {
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\syntax\core.vim ⋮  let l:map = {
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\syntax\core.vim ⋮  let l:map = {
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\state.vim ⋮  nnoremap <buffer> <plug>(vimtex-toggle-main)  :VimtexToggleMain<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\state.vim ⋮  nnoremap <buffer> <plug>(vimtex-reload-state) :VimtexReloadState<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\scratch.vim ⋮  nnoremap <silent><buffer><nowait> q     :call b:scratch.close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\scratch.vim ⋮  nnoremap <silent><buffer><nowait> <esc> :call b:scratch.close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\scratch.vim ⋮  nnoremap <silent><buffer><nowait> <c-6> :call b:scratch.close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\scratch.vim ⋮  nnoremap <silent><buffer><nowait> <c-^> :call b:scratch.close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\scratch.vim ⋮  nnoremap <silent><buffer><nowait> <c-e> :call b:scratch.close()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\qf.vim ⋮  nnoremap <buffer> <plug>(vimtex-errors)  :call vimtex#qf#toggle()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish-git\plugin\dirvish_git.vim ⋮  silent! nmap <buffer> <unique> <silent> [f <Plug>(dirvish_git_prev_file)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish-git\plugin\dirvish_git.vim ⋮  silent! nmap <buffer> <unique> <silent> ]f <Plug>(dirvish_git_next_file)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish-git\plugin\dirvish_git.vim ⋮  nmap <buffer><silent><expr> X "\<Plug>(dirvish_arg):<C-u>call dirvish_git#reload()<CR>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish-git\plugin\dirvish_git.vim ⋮  xmap <buffer><silent><expr> X "\<Plug>(dirvish_arg):<C-u>call dirvish_git#reload()<CR>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish-git\plugin\dirvish_git.vim ⋮nnoremap <Plug>(dirvish_git_next_file) :<C-u>call dirvish_git#jump_to_next_file()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish-git\plugin\dirvish_git.vim ⋮nnoremap <Plug>(dirvish_git_prev_file) :<C-u>call dirvish_git#jump_to_prev_file()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\plugin\dirvish.vim ⋮nnoremap <silent> <Plug>(dirvish_up) :<C-U>exe 'Dirvish' fnameescape(fnamemodify(@%, ':p'.(@%[-1:]=~'[\\/]'?':h':'').repeat(':h',v:count1)))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\plugin\dirvish.vim ⋮nnoremap <silent> <Plug>(dirvish_split_up) :<C-U>split<bar>exe 'Dirvish' fnameescape(fnamemodify(@%, ':p'.(@%[-1:]=~'[\\/]'?':h':'').repeat(':h',v:count1)))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\plugin\dirvish.vim ⋮nnoremap <silent> <Plug>(dirvish_vsplit_up) :<C-U>vsplit<bar>exe 'Dirvish' fnameescape(fnamemodify(@%, ':p'.(@%[-1:]=~'[\\/]'?':h':'').repeat(':h',v:count1)))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\plugin\dirvish.vim ⋮  nmap - <Plug>(dirvish_up)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  execute 'nmap '.s:nowait.'<buffer> q <Plug>(dirvish_quit)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  execute 'nmap '.s:nowait.'<buffer> gq <Plug>(dirvish_quit)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  execute 'nmap '.s:nowait.'<buffer> x <Plug>(dirvish_arg)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  execute 'xmap '.s:nowait.'<buffer> x <Plug>(dirvish_arg)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  execute 'nmap '.s:nowait.'<buffer> K <Plug>(dirvish_K)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  execute 'xmap '.s:nowait.'<buffer> K <Plug>(dirvish_K)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer> ~    '.s:command_prefix.'Dirvish ~/<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer> i    '.s:call_prefix.'call dirvish#open("edit", 0)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer> <CR> '.s:call_prefix.'call dirvish#open("edit", 0)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer> a    '.s:call_prefix.'call dirvish#open("vsplit", 1)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer> o    '.s:call_prefix.'call dirvish#open("split", 1)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer> p    '.s:call_prefix.'call dirvish#open("p", 1)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer> <2-LeftMouse> '.s:call_prefix.'call dirvish#open("edit", 0)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer><silent> dax  :<C-U>arglocal<Bar>silent! argdelete *<Bar>echo "arglist: cleared"<Bar>Dirvish<CR>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer><silent> <C-n> <C-\><C-n>j:call feedkeys("p")<CR>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap '.s:nowait.'<buffer><silent> <C-p> <C-\><C-n>k:call feedkeys("p")<CR>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'xnoremap '.s:nowait.'<buffer> I    '.s:call_prefix.'call dirvish#open("edit", 0)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'xnoremap '.s:nowait.'<buffer> <CR> '.s:call_prefix.'call dirvish#open("edit", 0)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'xnoremap '.s:nowait.'<buffer> A    '.s:call_prefix.'call dirvish#open("vsplit", 1)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'xnoremap '.s:nowait.'<buffer> O    '.s:call_prefix.'call dirvish#open("split", 1)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'xnoremap '.s:nowait.'<buffer> P    '.s:call_prefix.'call dirvish#open("p", 1)<CR>'.s:cmdsuf
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮nnoremap <buffer><silent> R :<C-U><C-R>=v:count ? ':let g:dirvish_mode='.v:count.'<Bar>' : ''<CR>Dirvish<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮nnoremap <buffer><silent>   g?    :help dirvish-mappings<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap <expr>'.s:nowait.'<buffer> . ":<C-u>".(v:count ? "Shdo".(v:count?"!":"")." {}" : ("! ".shellescape(empty(fnamemodify(getline("."),":.")) ? "." : fnamemodify(getline("."),":."), 1)))."<Home><C-Right>"'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'xnoremap <expr>'.s:nowait.'<buffer> . ":Shdo".(v:count?"!":" ")." {}<Left><Left><Left>"'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮execute 'nnoremap <expr>'.s:nowait.'<buffer> cd ":<C-u>".(v:count ? "cd" : "lcd")." %<Bar>pwd<CR>"'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  nnoremap <buffer> / /\ze[^\/]*[\/]\=$<Home>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  nnoremap <buffer> ? ?\ze[^\/]*[\/]\=$<Home>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  nnoremap <buffer> / /\ze[^/]*[/]\=$<Home>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\ftplugin\dirvish.vim ⋮  nnoremap <buffer> ? ?\ze[^/]*[/]\=$<Home>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\autoload\dirvish.vim ⋮  nnoremap <buffer><silent> Z! :silent write<Bar>exe '!'.(has('win32')?fnameescape(escape(expand('%:p:gs?\\?/?'), '&\')):join(map(split(&shell), 'shellescape(v:val)')).' %')<Bar>if !v:shell_error<Bar>close<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\autoload\dirvish.vim ⋮nnoremap <silent> <Plug>(dirvish_quit) :<C-U>call <SID>buf_close()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\autoload\dirvish.vim ⋮nnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args([getline('.')])<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\autoload\dirvish.vim ⋮xnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args(getline("'<", "'>"))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\autoload\dirvish.vim ⋮nnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info([getline('.')],!!v:count)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-dirvish\autoload\dirvish.vim ⋮xnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info(getline("'<", "'>"),!!v:count)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-closetag\plugin\closetag.vim ⋮        exec "au User vim-closetag inoremap <silent> <buffer> " . g:closetag_shortcut . " ><Esc>:call <SID>CloseIt()<Cr>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-closetag\plugin\closetag.vim ⋮            exec "au FileType " . g:closetag_filetypes . " inoremap <silent> <buffer> " . g:closetag_shortcut . " ><Esc>:call <SID>CloseIt()<Cr>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-closetag\plugin\closetag.vim ⋮            exec "au BufNewFile,Bufread " . g:closetag_filenames . " inoremap <silent> <buffer> " . g:closetag_shortcut . " ><Esc>:call <SID>CloseIt()<Cr>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-closetag\plugin\closetag.vim ⋮            exec "au FileType " . g:closetag_filetypes . " inoremap <silent> <buffer> " . g:closetag_close_shortcut . " >"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-closetag\plugin\closetag.vim ⋮            exec "au BufNewFile,Bufread " . g:closetag_filenames . " inoremap <silent> <buffer> " . g:closetag_close_shortcut . " >"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-replacer-p) :<C-u>call <SID>map_paste(0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-replacer-P) :<C-u>call <SID>map_paste(-1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nnoremap <buffer><silent> <Plug>(fern-replacer-warn) :<C-u>call <SID>map_warn()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  inoremap <buffer><silent><expr> <Plug>(fern-replacer-warn) <SID>map_warn()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nnoremap <buffer><silent> dd 0D
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nmap <buffer> p <Plug>(fern-replacer-p)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nmap <buffer> P <Plug>(fern-replacer-P)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nmap <buffer> o <Plug>(fern-replacer-warn)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  nmap <buffer> O <Plug>(fern-replacer-warn)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  imap <buffer> <C-m> <Plug>(fern-replacer-warn)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\fern.vim\autoload\fern\internal\replacer.vim ⋮  imap <buffer> <Return> <Plug>(fern-replacer-warn)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillAlt         :call <SID>GotoBuffer('#', '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBangAlt     :call <SID>GotoBuffer('#', '!')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBack        :call <SID>GotoBuffer('bufback', '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBangBack    :call <SID>GotoBuffer('bufback', '!')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillForward     :call <SID>GotoBuffer('bufforward', '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBangForward :call <SID>GotoBuffer('bufforward', '!')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBun         :call <SID>BufKill('bun', '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBangBun     :call <SID>BufKill('bun', '!')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBd          :call <SID>BufKill('bd', '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBangBd      :call <SID>BufKill('bd', '!')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBw          :call <SID>BufKill('bw', '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillBangBw      :call <SID>BufKill('bw', '!')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮noremap <Plug>BufKillUndo        :call <SID>UndoKill()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-bufkill\plugin\bufkill.vim ⋮    exec 'nmap <silent> <unique> '.a:lhs.' '.a:rhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-better-whitespace\plugin\better-whitespace.vim ⋮        exe 'xmap <silent> '.g:better_whitespace_operator.' :StripWhitespace<CR>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-better-whitespace\plugin\better-whitespace.vim ⋮        exe 'nmap <silent> '.g:better_whitespace_operator.'<space> :<C-U>exe ".,+".v:count" StripWhitespace"<CR>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-better-whitespace\plugin\better-whitespace.vim ⋮        exe 'nmap <silent> '.g:better_whitespace_operator.'        :<C-U>set opfunc=<SID>StripWhitespaceMotion<CR>g@'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <buffer> <sid>(v) v
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <buffer> <sid>(V) V
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-%) :call vimtex#motion#find_matching_pair()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-%) :<c-u>call vimtex#motion#find_matching_pair(1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-%) <sid>(vimtex-%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-%) :execute "normal \<sid>(v)\<sid>(vimtex-%)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]]) :<c-u>call vimtex#motion#section(0,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-][) :<c-u>call vimtex#motion#section(1,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[]) :<c-u>call vimtex#motion#section(1,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[[) :<c-u>call vimtex#motion#section(0,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]]) :<c-u>call vimtex#motion#section(0,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-][) :<c-u>call vimtex#motion#section(1,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[]) :<c-u>call vimtex#motion#section(1,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[[) :<c-u>call vimtex#motion#section(0,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]]) <sid>(vimtex-]])
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-][) <sid>(vimtex-][)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[]) <sid>(vimtex-[])
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[[) <sid>(vimtex-[[)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]]) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]])"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-][) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-][)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[]) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[])"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[[) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[[)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]n) :<c-u>call vimtex#motion#math(1,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]N) :<c-u>call vimtex#motion#math(0,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[n) :<c-u>call vimtex#motion#math(1,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[N) :<c-u>call vimtex#motion#math(0,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]n) :<c-u>call vimtex#motion#math(1,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]N) :<c-u>call vimtex#motion#math(0,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[n) :<c-u>call vimtex#motion#math(1,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[N) :<c-u>call vimtex#motion#math(0,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]n) <sid>(vimtex-]n)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]N) <sid>(vimtex-]N)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[n) <sid>(vimtex-]n)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[N) <sid>(vimtex-]N)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]n) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]n)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]N) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]N)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[n) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[n)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[N) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[N)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]m) :<c-u>call vimtex#motion#environment(1,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]M) :<c-u>call vimtex#motion#environment(0,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[m) :<c-u>call vimtex#motion#environment(1,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[M) :<c-u>call vimtex#motion#environment(0,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]m) :<c-u>call vimtex#motion#environment(1,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]M) :<c-u>call vimtex#motion#environment(0,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[m) :<c-u>call vimtex#motion#environment(1,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[M) :<c-u>call vimtex#motion#environment(0,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]m) <sid>(vimtex-]m)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]M) <sid>(vimtex-]M)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[m) <sid>(vimtex-[m)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[M) <sid>(vimtex-[M)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]m) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]m)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]M) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]M)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[m) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[m)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[M) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[M)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]r) :<c-u>call vimtex#motion#frame(1,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]R) :<c-u>call vimtex#motion#frame(0,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[r) :<c-u>call vimtex#motion#frame(1,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[R) :<c-u>call vimtex#motion#frame(0,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]r) :<c-u>call vimtex#motion#frame(1,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]R) :<c-u>call vimtex#motion#frame(0,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[r) :<c-u>call vimtex#motion#frame(1,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[R) :<c-u>call vimtex#motion#frame(0,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]r) <sid>(vimtex-]r)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]R) <sid>(vimtex-]R)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[r) <sid>(vimtex-[r)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[R) <sid>(vimtex-[R)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]r) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]r)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]R) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]R)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[r) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[r)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[R) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[R)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]/) :<c-u>call vimtex#motion#comment(1,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-]*) :<c-u>call vimtex#motion#comment(0,0,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[/) :<c-u>call vimtex#motion#comment(1,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-[*) :<c-u>call vimtex#motion#comment(0,1,0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]/) :<c-u>call vimtex#motion#comment(1,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-]*) :<c-u>call vimtex#motion#comment(0,0,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[/) :<c-u>call vimtex#motion#comment(1,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xnoremap <silent><buffer>  <sid>(vimtex-[*) :<c-u>call vimtex#motion#comment(0,1,1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]/) <sid>(vimtex-]/)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-]*) <sid>(vimtex-]*)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[/) <sid>(vimtex-[/)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  xmap     <silent><buffer> <plug>(vimtex-[*) <sid>(vimtex-[*)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]/) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]/)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-]*) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-]*)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[/) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[/)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\motion.vim ⋮  onoremap <silent><buffer> <plug>(vimtex-[*) :execute "normal \<sid>(V)" . v:count1 . "\<sid>(vimtex-[*)"<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-base64\plugin\base64.vim ⋮  vnoremap <silent> <leader>atob :<c-u>call base64#v_atob()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-base64\plugin\base64.vim ⋮  vnoremap <silent> <leader>btoa :<c-u>call base64#v_btoa()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-base64\plugin\base64.vim ⋮  nnoremap <leader>btoa/ :%s/\v()/\=base64#encode(submatch(1))/<home><right><right><right><right><right><right>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-base64\plugin\base64.vim ⋮  nnoremap <leader>atob/ :%s/\v()/\=base64#decode(submatch(1))/<home><right><right><right><right><right><right>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\misc.vim ⋮  nnoremap <buffer> <plug>(vimtex-reload) :VimtexReload<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\misc.vim ⋮  nnoremap <silent><buffer><nowait> q :bwipeout<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\log.vim ⋮  nnoremap <buffer> <plug>(vimtex-log) :VimtexLog<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\info.vim ⋮  nnoremap <buffer> <plug>(vimtex-info)      :VimtexInfo<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\info.vim ⋮  nnoremap <buffer> <plug>(vimtex-info-full) :VimtexInfo!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\imaps.vim ⋮  nnoremap <buffer> <plug>(vimtex-imaps-list) :call vimtex#imaps#list()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\imaps.vim ⋮  nnoremap <silent><buffer><nowait> q     :bwipeout<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\imaps.vim ⋮  nnoremap <silent><buffer><nowait> <esc> :bwipeout<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\imaps.vim ⋮" The imap generator
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\imaps.vim ⋮  let l:map = deepcopy(a:map)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\imaps.vim ⋮    silent execute 'inoremap <silent><buffer><nowait>' l:leader . l:leader l:leader
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\imaps.vim ⋮  silent execute 'inoremap <silent><buffer><nowait><expr>' l:lhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\fold.vim ⋮    nnoremap <silent><buffer><nowait> zx :call vimtex#fold#refresh('zx')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\fold.vim ⋮    nnoremap <silent><buffer><nowait> zX :call vimtex#fold#refresh('zX')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\tagalong.vim\plugin\tagalong.vim ⋮nnoremap <silent> <Plug>TagalongReapply :call tagalong#Reapply()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\tagalong.vim\autoload\tagalong.vim ⋮        exe 'nnoremap <buffer><silent> ' . override_key .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\tagalong.vim\autoload\tagalong.vim ⋮      exe 'nnoremap <buffer><silent> ' . key .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\tabular\plugin\Tabular.vim ⋮  let map = s:TabularCommands
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\tabular\plugin\Tabular.vim ⋮    let map = b:TabularCommands
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮nnoremap <buffer><silent> [[ :call search(b:vader_label, 'bW')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮nnoremap <buffer><silent> [] :call search(b:vader_eos, 'bW')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮nnoremap <buffer><silent> ]] :call search(b:vader_label, 'W')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮nnoremap <buffer><silent> ][ :call search(b:vader_eos, 'W')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮vnoremap <buffer><silent> [[ <ESC>:execute "normal! gv"<BAR>call search(b:vader_label, 'bW')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮vnoremap <buffer><silent> [] <ESC>:execute "normal! gv"<BAR>call search(b:vader_eos, 'bW')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮vnoremap <buffer><silent> ]] <ESC>:execute "normal! gv"<BAR>call search(b:vader_label, 'W')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\ftplugin\vader.vim ⋮vnoremap <buffer><silent> ][ <ESC>:execute "normal! gv"<BAR>call search(b:vader_eos, 'W')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\autoload\vader\window.vim ⋮  nnoremap <silent> <buffer> <CR> :call <SID>action(line('.'))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\autoload\vader\window.vim ⋮  nnoremap <silent> <buffer> q :call <SID>quit()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\autoload\vader\window.vim ⋮  nnoremap <silent> <buffer> q :call <SID>quit()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\autoload\vader\window.vim ⋮  nnoremap <silent> <buffer> <CR> :call <SID>move()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vader.vim\autoload\vader\window.vim ⋮  nnoremap <silent> <buffer> q :tabclose<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-env-change)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-env-change-math)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-env-delete)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-env-delete-math)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-env-toggle)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-env-toggle-star)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-env-toggle-math)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nnoremap <silent><buffer><expr> <plug>(vimtex-env-surround-operator)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  nmap     <silent><buffer>       <plug>(vimtex-env-surround-line)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\env.vim ⋮  xnoremap <silent><buffer>       <plug>(vimtex-env-surround-visual)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\doc.vim ⋮  nnoremap <buffer> <plug>(vimtex-doc-package) :VimtexDocPackage<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier-reverse)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  xnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  xnoremap <silent><buffer> <plug>(vimtex-delim-toggle-modifier-reverse)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-delim-change-math)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-delim-delete)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  inoremap <silent><buffer><expr> <plug>(vimtex-delim-close)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\delim.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-delim-add-modifiers)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\context.vim ⋮  nnoremap <buffer> <plug>(vimtex-context-menu) :VimtexContextMenu<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮nnoremap <unique><script><silent> <Plug>(MakeDigraph)	    :set opfunc=unicode#GetDigraph<CR>g@
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮vnoremap <unique><script><silent> <Plug>(MakeDigraph)	    :<C-U>call unicode#GetDigraph(visualmode(), 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮nnoremap <unique><script><silent> <Plug>(UnicodeGA)	    :<C-U>UnicodeName<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮inoremap <unique><script><silent> <Plug>(DigraphComplete)   <C-R>=unicode#CompleteDigraph()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮inoremap <unique><script><silent> <Plug>(UnicodeComplete)   <C-R>=unicode#CompleteUnicode()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮inoremap <unique><script><silent> <Plug>(HTMLEntityComplete)   <C-R>=unicode#CompleteHTMLEntity()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮inoremap <unique><script><silent> <Plug>(UnicodeFuzzy) <C-\><C-O>:call unicode#Fuzzy()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮nnoremap <unique><script><silent> <Plug>(UnicodeSwapCompleteName) :<C-U>call <sid>ToggleUnicodeCompletion()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮        nmap <F4> <Plug>(MakeDigraph)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮        vmap <F4> <Plug>(MakeDigraph)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮        imap <C-X><C-G> <Plug>(DigraphComplete)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮        imap <C-X><C-Z> <Plug>(UnicodeComplete)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮        imap <C-X><C-B> <Plug>(HTMLEntityComplete)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮        imap <C-G><C-F> <Plug>(UnicodeFuzzy)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮        nmap <leader>un <Plug>(UnicodeSwapCompleteName)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\plugin\unicode.vim ⋮"        nmap ga <Plug>(UnicodeGA)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-compile)          :call vimtex#compiler#compile()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-compile-ss)       :call vimtex#compiler#compile_ss()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-compile-selected) :set opfunc=vimtex#compiler#compile_selected<cr>g@
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  xnoremap <buffer> <plug>(vimtex-compile-selected) :<c-u>call vimtex#compiler#compile_selected('visual')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-compile-output)   :call vimtex#compiler#output()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-stop)             :call vimtex#compiler#stop()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-stop-all)         :call vimtex#compiler#stop_all()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-clean)            :call vimtex#compiler#clean(0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-clean-full)       :call vimtex#compiler#clean(1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-status)           :call vimtex#compiler#status(0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <buffer> <plug>(vimtex-status-all)       :call vimtex#compiler#status(1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮  nnoremap <silent><buffer><nowait> q :bwipeout<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\compiler.vim ⋮    nnoremap <silent><buffer><nowait> <esc> :bwipeout<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\unicode.vim\autoload\unicode\html.vim ⋮    let s:html[0x027FC] = get(s:html, 0x027FC, []) + ["&xmap;"]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮"    map <buffer> <c-n> J
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮"    map <buffer> <c-p> K
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap = []
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['Help','?','Toggle quick help']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['Close','q','Close undotree panel']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['FocusTarget','<tab>','Set Focus back to the editor']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['ClearHistory','C','Clear undo history (with confirmation)']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['TimestampToggle','T','Toggle relative timestamp']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['DiffToggle','D','Toggle the diff panel']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['DiffMark','=','Set the diff marker']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['ClearDiffMark','M','Clear the diff marker']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['NextState','K','Move to the next undo state']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['PreviousState','J','Move to the previous undo state']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['NextSavedState','>','Move to the next saved state']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['PreviousSavedState','<','Move to the previous saved state']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['Redo','<c-r>','Redo']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['Undo','u','Undo']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['Enter','<2-LeftMouse>','Move to the current state']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮let s:keymap += [['Enter','<cr>','Move to the current state']]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮    for i in s:keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮        silent exec 'nmap '.map_options.i[1].' <plug>Undotree'.i[0]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮        silent exec 'nnoremap '.map_options.'<plug>Undotree'.i[0]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮        for i in s:keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮        let lineNr += len(s:keymap) + len(s:helpmore)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\undotree\autoload\undotree.vim ⋮        let index -= len(s:keymap) + len(s:helpmore)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\thesaurus_query.vim\plugin\thesaurus_query.vim ⋮    nnoremap <unique><silent> <Leader>cs :ThesaurusQueryReplaceCurrentWord<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\thesaurus_query.vim\plugin\thesaurus_query.vim ⋮    vnoremap <unique><silent> <Leader>cs "ky:ThesaurusQueryReplace <C-r>k<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\thesaurus_query.vim\plugin\thesaurus_query.vim ⋮    nnoremap <silent> <LocalLeader>cs :ThesaurusQueryReplaceCurrentWord<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\thesaurus_query.vim\plugin\thesaurus_query.vim ⋮    vnoremap <silent> <LocalLeader>cs "ky:ThesaurusQueryReplace <C-r>k<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-cmd-delete)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-cmd-change)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  inoremap <silent><buffer> <plug>(vimtex-cmd-create)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-cmd-create)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  xnoremap <silent><buffer> <plug>(vimtex-cmd-create)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-star)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-star-agn)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-frac)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  xnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-frac)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vimtex\autoload\vimtex\cmd.vim ⋮  nnoremap <silent><buffer> <plug>(vimtex-cmd-toggle-break)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\plugin\targets.vim ⋮                silent! execute printf("omap <expr> <unique> %s targets#e('o', '%s', '%s')", map_lhs, modifier, map_rhs)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\plugin\targets.vim ⋮                silent! execute printf("xmap <expr> <unique> %s targets#e('o', '%s', '%s')", map_lhs, modifier, map_rhs)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\plugin\targets.vim ⋮        onoremap <silent> @(targets) :<C-U>call targets#do()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\plugin\targets.vim ⋮        xnoremap <silent> @(targets) :<C-U>call targets#do()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\autoload\targets.vim ⋮" 'x' is for visual (as in :xnoremap, not in select mode)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\autoload\targets.vim ⋮    " trigger reselect if called from xmap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-visual-star-search\plugin\visual-star-search.vim ⋮xnoremap * :<C-u>call VisualStarSearchSet('/')<CR>/<C-R>=@/<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-visual-star-search\plugin\visual-star-search.vim ⋮xnoremap # :<C-u>call VisualStarSearchSet('?')<CR>?<C-R>=@/<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-visual-star-search\plugin\visual-star-search.vim ⋮  nnoremap <leader>* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-visual-star-search\plugin\visual-star-search.vim ⋮  vnoremap <leader>* :<C-u>call VisualStarSearchSet('/')<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **'<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮function! s:keymap(mode, action, dir) "{{{1
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'duplicate', '^')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'duplicate', 'v')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'move',      '^')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'move',      'v')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'move',      '<') " new
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'move',      '>') " new
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'blank',     '^')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('n', 'blank',     'v')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'duplicate', '^')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'duplicate', 'v')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'duplicate', '<')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'duplicate', '>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'move',      '^')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'move',      'v')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'move',      '<')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'move',      '>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'move1',     '<')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'move1',     '>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'blank',     '^')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮call s:keymap('x', 'blank',     'v')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮nnoremap <Plug>(textmanip-toggle-mode) :<C-u>call textmanip#mode('toggle')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮xnoremap <Plug>(textmanip-toggle-mode) :<C-u>call textmanip#mode('toggle')<CR>gv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮xnoremap <silent> <Plug>(textmanip-move-right-1col)   :<C-u>call <SID>obsolete('1col')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮xnoremap <silent> <Plug>(textmanip-move-right-1col-i) :<C-u>call <SID>obsolete('1col')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮xnoremap <silent> <Plug>(textmanip-move-right-1col-r) :<C-u>call <SID>obsolete('1col')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮xnoremap <silent> <Plug>(textmanip-move-left-1col)    :<C-u>call <SID>obsolete('1col')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮xnoremap <silent> <Plug>(textmanip-move-left-1col-i)  :<C-u>call <SID>obsolete('1col')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮xnoremap <silent> <Plug>(textmanip-move-left-1col-r)  :<C-u>call <SID>obsolete('1col')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  xmap <C-j> <Plug>(textmanip-move-down)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  xmap <C-k> <Plug>(textmanip-move-up)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  xmap <C-h> <Plug>(textmanip-move-left)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  xmap <C-l> <Plug>(textmanip-move-right)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  execute printf("nmap \<%s-d> <Plug>(textmanip-duplicate-down)", prefix)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  execute printf("nmap \<%s-D> <Plug>(textmanip-duplicate-up)",   prefix)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  execute printf("xmap \<%s-d> <Plug>(textmanip-duplicate-down)", prefix)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-textmanip\plugin\textmanip.vim ⋮  execute printf("xmap \<%s-D> <Plug>(textmanip-duplicate-up)",   prefix)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-tagbar\autoload\tagbar.vim ⋮    nnoremap <script> <silent> <buffer> <2-LeftMouse>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-tagbar\autoload\tagbar.vim ⋮    nnoremap <script> <silent> <buffer> <LeftRelease>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-tagbar\autoload\tagbar.vim ⋮    inoremap <script> <silent> <buffer> <2-LeftMouse>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-tagbar\autoload\tagbar.vim ⋮    inoremap <script> <silent> <buffer> <LeftRelease>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-tagbar\autoload\tagbar.vim ⋮                execute 'nnoremap' . map_options . key .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\autoload\targets\legacy.vim ⋮        silent! execute a:mapType . 'noremap <silent> <unique>' . a:aiAI . a:mapping
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\autoload\targets\legacy.vim ⋮        silent! execute a:mapType . 'noremap <silent> <unique>' . a:aiAI . a:nl . a:mapping
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\autoload\targets\factory.vim ⋮" genFuncs: required, map 'c', 'n', 'l' to generator
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\autoload\targets\factory.vim ⋮" modFuncs: optional, map 'i', 'a', 'I', 'A' to modify
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\targets.vim\autoload\health\targets.vim ⋮                    \ . a:map . ' → ' . arg . "\n"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\test\new\common\bootstrap.vim ⋮nnoremap q :qall!<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <silent> <Plug>SurroundRepeat .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap ds  <Plug>Dsurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap cs  <Plug>Csurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap cS  <Plug>CSurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap ys  <Plug>Ysurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap yS  <Plug>YSurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap yss <Plug>Yssurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap ySs <Plug>YSsurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  nmap ySS <Plug>YSsurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  xmap S   <Plug>VSurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮  xmap gS  <Plug>VgSurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮      imap    <C-S> <Plug>Isurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮    imap      <C-G>s <Plug>Isurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-surround\plugin\surround.vim ⋮    imap      <C-G>S <Plug>ISurround
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\test\issues\59\rebind.vim ⋮xmap u% <plug>(matchup-i%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\test\issues\59\rebind.vim ⋮omap u% <plug>(matchup-i%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\lua\treesitter-matchup\third-party\lru.lua ⋮    local map = {}
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    silent! execute 'omap' l:opforce.a:lhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮      silent execute a:mode . 'map <silent> ' a:lhs a:rhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  function! s:omap(mode, lhs, rhs, ...)  " issues/199
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮      silent execute a:mode . 'map <silent> ' a:lhs s:ignore_key . a:rhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮      call s:omap('o', '%', '<plug>(matchup-%)')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮      call s:omap('o', 'g%', '<plug>(matchup-g%)')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  nnoremap <silent><expr> <sid>(wise)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-g%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-g%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xnoremap <silent> <sid>(matchup-%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xmap     <silent> <plug>(matchup-%) <sid>(matchup-%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  onoremap <silent> <plug>(matchup-%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xnoremap <silent> <sid>(matchup-g%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xmap     <silent> <plug>(matchup-g%) <sid>(matchup-g%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  onoremap <silent> <plug>(matchup-g%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-]%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-[%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-]%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-[%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xnoremap <silent> <sid>(matchup-]%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xnoremap <silent> <sid>(matchup-[%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xmap     <plug>(matchup-]%) <sid>(matchup-]%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xmap     <plug>(matchup-[%) <sid>(matchup-[%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  onoremap <silent> <plug>(matchup-]%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  onoremap <silent> <plug>(matchup-[%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xnoremap <silent> <sid>(matchup-z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xmap     <silent> <plug>(matchup-z%) <sid>(matchup-z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  onoremap <silent> <plug>(matchup-z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-Z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    nnoremap <silent> <plug>(matchup-Z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xnoremap <silent> <sid>(matchup-Z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  xmap     <silent> <plug>(matchup-Z%) <sid>(matchup-Z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  onoremap <silent> <plug>(matchup-Z%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  inoremap <silent> <plug>(matchup-c_g%)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    let l:p1 = 'noremap <silent> <plug>(matchup-'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    let l:p2 = l:map . ') :<c-u>call matchup#text_obj#' . l:name
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  nnoremap <silent> <plug>(matchup-double-click)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮  nnoremap <plug>(matchup-reload) :<c-u>MatchupReload<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    let l:p1 = 'noremap <silent> <plug>(matchup-'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup.vim ⋮    let l:p2 = l:map . ') :<c-u>call matchup#surround#' . l:name
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ps1\indent\ps1.vim ⋮inoremap <buffer> # X#
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮  nmap <unique> <Leader>p <Plug>(Prettier)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(Prettier) :Prettier<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(PrettierAsync) :PrettierAsync<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(PrettierFragment) :PrettierFragment<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(PrettierPartial) :PrettierPartial<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(PrettierVersion) :PrettierVersion<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(PrettierCli) :PrettierCli<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(PrettierCliVersion) :PrettierCliVersion<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-prettier\plugin\prettier.vim ⋮nnoremap <silent> <Plug>(PrettierCliPath) :PrettierCliPath<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\matchparen.vim ⋮  nnoremap <silent> <plug>(matchup-hi-surround)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\custom.vim ⋮    execute 'nnoremap <silent> <plug>(matchup-custom-'.a:keys.')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\custom.vim ⋮    execute 'nmap' a:keys '<plug>(matchup-custom-'.a:keys.')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\custom.vim ⋮    execute 'xnoremap <silent>' l:sid.'(matchup-custom-'.l:k.')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\custom.vim ⋮    execute 'xmap <silent> <plug>(matchup-custom-'.a:keys.')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\custom.vim ⋮    execute 'xmap <silent>' a:keys '<plug>(matchup-custom-'.a:keys.')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\custom.vim ⋮    execute 'onoremap <silent> <plug>(matchup-custom-'.a:keys.')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-matchup\autoload\matchup\custom.vim ⋮      execute 'omap' a:keys '<plug>(matchup-custom-'.a:keys.')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-markdown\ftplugin\markdown.vim ⋮        execute 'nmap <buffer>' . a:lhs . ' <Plug>' . a:rhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-markdown\ftplugin\markdown.vim ⋮        execute 'vmap <buffer>' . a:lhs . ' <Plug>' . a:rhs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-markdown\ftplugin\markdown.vim ⋮nnoremap <Plug>Markdown_OpenUrlUnderCursor :call <sid>OpenUrlUnderCursor()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-markdown\ftplugin\markdown.vim ⋮nnoremap <Plug>Markdown_EditUrlUnderCursor :call <sid>EditUrlUnderCursor()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSet               :<C-u>if ! mark#MarkCurrentWord(v:count)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkPartialWord       :<C-u>if ! mark#MarkCurrentWord(v:count, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮vnoremap <silent> <Plug>MarkSet               :<C-u>if ! mark#DoMark(v:count, mark#GetVisualSelectionAsLiteralPattern())[0]<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮vnoremap <silent> <Plug>MarkIWhiteSet         :<C-u>if ! mark#DoMark(v:count, mark#GetVisualSelectionAsLiteralWhitespaceIndifferentPattern())[0]<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkRegex             :<C-u>if ! mark#MarkRegex(v:count, '')<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮vnoremap <silent> <Plug>MarkRegex             :<C-u>if ! mark#MarkRegex(v:count, mark#GetVisualSelectionAsRegexp())<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkClear             :<C-u>if ! mark#Clear(v:count)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkAllClear          :<C-u>call mark#ClearAll()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkConfirmAllClear   :<C-u>if confirm('Really delete all marks? This cannot be undone.', "&Yes\n&No") == 1<Bar>call mark#ClearAll()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkToggle            :<C-u>call mark#Toggle()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCurrentNext :<C-u>if ! mark#SearchCurrentMark(0)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCurrentPrev :<C-u>if ! mark#SearchCurrentMark(1)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchAnyNext     :<C-u>if ! mark#SearchAnyMark(0)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchAnyPrev     :<C-u>if ! mark#SearchAnyMark(1)<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchNext          :<C-u>if ! mark#SearchNext(0)<Bar>execute 'normal!' v:count1 . '*zv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchPrev          :<C-u>if ! mark#SearchNext(1)<Bar>execute 'normal!' v:count1 . '#zv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchOrCurNext     :<C-u>if ! mark#SearchNext(0,'mark#SearchCurrentMark')<Bar>execute 'normal!' v:count1 . '*zv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchOrCurPrev     :<C-u>if ! mark#SearchNext(1,'mark#SearchCurrentMark')<Bar>execute 'normal!' v:count1 . '#zv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchOrAnyNext     :<C-u>if ! mark#SearchNext(0,'mark#SearchAnyMark')<Bar>execute 'normal!' v:count1 . '*zv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchOrAnyPrev     :<C-u>if ! mark#SearchNext(1,'mark#SearchAnyMark')<Bar>execute 'normal!' v:count1 . '#zv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchAnyOrDefaultNext      :<C-u>if mark#IsEnabled() && mark#GetCount() > 0<Bar>if ! mark#SearchAnyMark(0)<Bar>echoerr ingo#err#Get()<Bar>endif<Bar>else<Bar>execute 'normal!' v:count1 . 'nzv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchAnyOrDefaultPrev      :<C-u>if mark#IsEnabled() && mark#GetCount() > 0<Bar>if ! mark#SearchAnyMark(1)<Bar>echoerr ingo#err#Get()<Bar>endif<Bar>else<Bar>execute 'normal!' v:count1 . 'Nzv'<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchGroupNext     :<C-u>if ! mark#SearchGroupMark(v:count, 1, 0, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchGroupPrev     :<C-u>if ! mark#SearchGroupMark(v:count, 1, 1, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchUsedGroupNext	:<C-u>if ! mark#SearchNextGroup(v:count1, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchUsedGroupPrev	:<C-u>if ! mark#SearchNextGroup(v:count1, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCascadeStartWithStop  :<C-u>if ! mark#cascade#Start(v:count, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"   <Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCascadeNextWithStop   :<C-u>if ! mark#cascade#Next(v:count1, 1, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCascadePrevWithStop   :<C-u>if ! mark#cascade#Next(v:count1, 1, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCascadeStartNoStop    :<C-u>if ! mark#cascade#Start(v:count, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"   <Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCascadeNextNoStop     :<C-u>if ! mark#cascade#Next(v:count1, 0, 0)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮nnoremap <silent> <Plug>MarkSearchCascadePrevNoStop     :<C-u>if ! mark#cascade#Next(v:count1, 0, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮			execute printf('nnoremap <silent> %s :<C-u>if ! mark#SearchGroupMark(%d, v:count1, %d, 1)<Bar>execute "normal! \<lt>C-\>\<lt>C-n>\<lt>Esc>"<Bar>echoerr ingo#err#Get()<Bar>endif<CR>', l:plugMappingName, l:cnt, l:isBackward)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮				execute printf('nmap <%sk%d> %s', l:keyModifier, l:cnt, l:plugMappingName)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader>m <Plug>MarkSet
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader>gm <Plug>MarkPartialWord
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	xmap <unique> <Leader>m <Plug>MarkSet
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader>r <Plug>MarkRegex
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	xmap <unique> <Leader>r <Plug>MarkRegex
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader>n <Plug>MarkClear
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader>* <Plug>MarkSearchCurrentNext
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader># <Plug>MarkSearchCurrentPrev
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader>/ <Plug>MarkSearchAnyNext
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> <Leader>? <Plug>MarkSearchAnyPrev
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> * <Plug>MarkSearchNext
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-mark\plugin\mark.vim ⋮	nmap <unique> # <Plug>MarkSearchPrev
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-peekaboo\plugin\peekaboo.vim ⋮nnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-peekaboo\plugin\peekaboo.vim ⋮xnoremap <silent> <Plug>(peekaboo) :<c-u>call peekaboo#aboo()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-peekaboo\plugin\peekaboo.vim ⋮inoremap <silent> <Plug>(peekaboo) <c-\><c-o>:<c-u>call peekaboo#aboo()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-peekaboo\plugin\peekaboo.vim ⋮  execute 'nmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  0)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-peekaboo\plugin\peekaboo.vim ⋮  execute 'xmap <buffer> <expr> '.prefix.    '"     peekaboo#peek(v:count1, ''"'',  1)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-peekaboo\plugin\peekaboo.vim ⋮  execute 'nmap <buffer> <expr> '.prefix.    '@     peekaboo#peek(v:count1, ''@'', 0)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-peekaboo\plugin\peekaboo.vim ⋮  execute 'imap <buffer> <expr> '.ins_prefix.'<c-r> peekaboo#peek(1, "\<c-r>",  0)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮nnoremap <Plug>(open-url-browser) :OpenURL <cfile><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮xnoremap <Plug>(open-url-browser) :<C-U>OpenURL <C-R>=open_url#get_selection()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮nnoremap <Plug>(open-url-search) :OpenSearchURL <cword><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮xnoremap <Plug>(open-url-search) :<C-U>OpenSearchURL <C-R>=open_url#get_selection()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮nnoremap <Plug>(open-url-search-so) :OpenSearchURL so <cword><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮xnoremap <Plug>(open-url-search-so) :<C-U>OpenSearchURL so <C-R>=open_url#get_selection()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮nnoremap <Plug>(open-url-search-google) :OpenSearchURL google <cword><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮xnoremap <Plug>(open-url-search-google) :<C-U>OpenSearchURL google <C-R>=open_url#get_selection()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮nnoremap <Plug>(open-url-search-wikipedia) :OpenSearchURL wikipedia <cword><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮xnoremap <Plug>(open-url-search-wikipedia) :<C-U>OpenSearchURL wikipedia <C-R>=open_url#get_selection()<CR><CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    nmap gB <Plug>(open-url-browser)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    xmap gB <Plug>(open-url-browser)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    nmap g<CR> <Plug>(open-url-search)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    xmap g<CR> <Plug>(open-url-search)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    nmap gW <Plug>(open-url-search-wikipedia)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    xmap gW <Plug>(open-url-search-wikipedia)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    nmap gG <Plug>(open-url-search-google)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-open-url\plugin\open_url.vim ⋮    xmap gG <Plug>(open-url-search-google)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-LanguageTool\autoload\languagetool.vim ⋮    map <silent> <buffer> <CR> :call <sid>JumpToCurrentError()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\autoload\ale\filetypes.vim ⋮    let l:map = {}
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\autoload\ale\filetypes.vim ⋮    let l:map = s:GetCachedExtensionMap()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\autoload\ale\completion.vim ⋮inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o><C-p>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\autoload\ale\completion.vim ⋮nnoremap <silent> <Plug>(ale_show_completion_menu) :call ale#completion#RestoreCompletionOptions()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\autoload\ale\completion.vim ⋮vnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\ale\autoload\ale\completion.vim ⋮onoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮    nnoremap <silent> <leader>k :call InterestingWords('n')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮    vnoremap <silent> <leader>k :call InterestingWords('v')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮    nnoremap <silent> <leader>K :call UncolorAllWords()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮    nnoremap <silent> n :call WordNavigation(1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮    nnoremap <silent> N :call WordNavigation(0)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮      nnoremap <silent> <unique> <script> <Plug>InterestingWords
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮      vnoremap <silent> <unique> <script> <Plug>InterestingWords
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮      nnoremap <silent> <unique> <script> <Plug>InterestingWordsClear
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮      nnoremap <silent> <unique> <script> <Plug>InterestingWordsForeward
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-interestingwords\plugin\interestingwords.vim ⋮      nnoremap <silent> <unique> <script> <Plug>InterestingWordsBackward
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\tests\compat\t1300-maparg.vim ⋮nnoremap <Plug>TestEasy simple
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\tests\compat\t1300-maparg.vim ⋮nnoremap <Plug>TestKeyNotation :<C-U>echo<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\tests\compat\t1300-maparg.vim ⋮nnoremap <Plug>TestBar :echo "<Bar><Bar>foo"<Bar>version <Bar> quit<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\tests\compat\t1300-maparg.vim ⋮nnoremap <Plug>TestLt echo "\<lt>Plug><lt>NONO"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\tests\compat\t1300-maparg.vim ⋮nnoremap <SID>(JustATest) gaga
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\tests\compat\t1300-maparg.vim ⋮nnoremap <Plug>TestSID :<CR><SID>(JustATest):<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮nnoremap <silent> <Plug>(openbrowser-open) :<C-u>call openbrowser#_keymap_open('n')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮xnoremap <silent> <Plug>(openbrowser-open) :<C-u>call openbrowser#_keymap_open('v')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮nnoremap <silent> <Plug>(openbrowser-open-incognito) :<C-u>call openbrowser#_keymap_open('n', 0, ['--incognito'])<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮xnoremap <silent> <Plug>(openbrowser-open-incognito) :<C-u>call openbrowser#_keymap_open('v', 0, ['--incognito'])<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮nnoremap <silent> <Plug>(openbrowser-search) :<C-u>call openbrowser#_keymap_search('n')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮xnoremap <silent> <Plug>(openbrowser-search) :<C-u>call openbrowser#_keymap_search('v')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮nnoremap <silent> <Plug>(openbrowser-smart-search) :<C-u>call openbrowser#_keymap_smart_search('n')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\open-browser.vim\plugin\openbrowser.vim ⋮xnoremap <silent> <Plug>(openbrowser-smart-search) :<C-u>call openbrowser#_keymap_smart_search('v')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\neomutt.vim\syntax\neomuttrc.vim ⋮	\ 'history-up', 'imap-fetch-mail', 'imap-logout-all', 'ispell', 'jump', 'kill-eol',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\buffer\scratch\converted.vim ⋮	execute printf('nnoremap <buffer> <silent> %s :<C-u>if ! ingo#buffer#scratch#converted#Toggle()<Bar>echoerr ingo#err#Get()<Bar>endif<CR>', l:toggleMapping)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\buffer\scratch\converted.vim ⋮	    execute printf('nnoremap <buffer> <silent> <nowait> %s :<C-u>let g:ingo#buffer#scratch#converted#record = b:IngoLibrary_scratch_converted_record<Bar>bwipe<Bar>call setbufvar(g:ingo#buffer#scratch#converted#record.originalBufNr, "&diff", g:ingo#buffer#scratch#converted#record.originalDiff)<Bar>unlet g:ingo#buffer#scratch#converted#record<CR>', l:quitMapping)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\buffer\scratch\converted.vim ⋮	    execute printf('nnoremap <buffer> <silent> <nowait> %s :<C-u>bwipe<CR>', l:quitMapping)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\cmdrangeconverter.vim ⋮"	nnoremap <Leader>foo :<C-u>.Foo<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\cmdrangeconverter.vim ⋮"	nnoremap <Leader>foo :Foo<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\cmdrangeconverter.vim ⋮"	:nnoremap <Leader>foo :call ingo#cmdrangeconverter#BufferToLineRange('Foo')<Bar>if ingo#err#IsSet()<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\cmdrangeconverter.vim ⋮"	:nnoremap <Leader>foo :<C-u>if ! ingo#cmdrangeconverter#LineToBufferRange('s///g')<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-Grammalecte\autoload\grammalecte.vim ⋮    map <silent> <buffer> <CR> :call <sid>JumpToCurrentError()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\window\cmdwin.vim ⋮"   :nnoremap <buffer> the a:mapping
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\window\cmdwin.vim ⋮	execute 'nnoremap <buffer> ' . l:mapping . ' ' . (empty(l:alternative) ? l:mapping : l:alternative)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\view.vim ⋮"   noremap  <expr> <silent>  <SID>(WinSaveView)		ingo#view#Save(0)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\view.vim ⋮"   inoremap <expr> <silent>  <SID>(WinSaveView)		ingo#view#Save(0)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\view.vim ⋮"   noremap  <expr> <silent>  <SID>(WinSaveViewWithMark)	ingo#view#Save(1)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\view.vim ⋮"   inoremap <expr> <silent>  <SID>(WinSaveViewWithMark)	ingo#view#Save(1)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\view.vim ⋮"   nnoremap <expr> <silent>  <SID>(WinRestView) ingo#view#Restore()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\view.vim ⋮"   nnoremap <script> <SID>(WinSaveView)<SID>MyMapping<SID>(WinRestView)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\gomod\mappings.vim ⋮nnoremap <silent> <Plug>(go-mod-fmt) :<C-u>call go#mod#Format()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\godoc.vim ⋮  nnoremap <buffer> <silent> K :GoDoc<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\godoc\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc) :<C-u>call go#doc#Open("new", "split")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\godoc\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-tab) :<C-u>call go#doc#Open("tabnew", "tabe")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\godoc\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-vertical) :<C-u>call go#doc#Open("vnew", "vsplit")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\godoc\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-split) :<C-u>call go#doc#Open("new", "split")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\godoc\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-browser) :<C-u>call go#doc#OpenBrowser()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> K :GoDoc<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> gd :GoDef<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> gD :GoDefType<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> <C-]> :GoDef<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> <C-LeftMouse> <LeftMouse>:GoDef<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> g<LeftMouse> <LeftMouse>:GoDef<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> <C-w><C-]> :<C-u>call go#def#Jump("split", 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> <C-w>] :<C-u>call go#def#Jump("split", 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮    nnoremap <buffer> <silent> <C-t> :<C-U>call go#def#StackPop(v:count1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  onoremap <buffer> <silent> af :<c-u>call go#textobj#Function('a')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  xnoremap <buffer> <silent> af :<c-u>call go#textobj#Function('a')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  onoremap <buffer> <silent> if :<c-u>call go#textobj#Function('i')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  xnoremap <buffer> <silent> if :<c-u>call go#textobj#Function('i')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  onoremap <buffer> <silent> ac :<c-u>call go#textobj#Comment('a')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  xnoremap <buffer> <silent> ac :<c-u>call go#textobj#Comment('a')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  onoremap <buffer> <silent> ic :<c-u>call go#textobj#Comment('i')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  xnoremap <buffer> <silent> ic :<c-u>call go#textobj#Comment('i')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('n', 'next')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  nnoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('n', 'prev')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  onoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('o', 'next')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  onoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('o', 'prev')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  xnoremap <buffer> <silent> ]] :<c-u>call go#textobj#FunctionJump('v', 'next')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go.vim ⋮  xnoremap <buffer> <silent> [[ :<c-u>call go#textobj#FunctionJump('v', 'prev')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\text\surroundings\Lines\Creator.vim ⋮    execute printf('nnoremap %s %s :<Home>execute ''<End><C-r><C-r>=v:count ? "" : "."<CR>%s''<CR>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\text\surroundings\Lines\Creator.vim ⋮    execute printf('xnoremap %s %s :<Home>execute "<End>" . ''%s''<CR>',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\text\surroundings\Lines\Creator.vim ⋮    \   'nnoremap ' . a:mapArgs, l:lineMappingKeys, a:mapName . 'Line',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\text\surroundings\Lines\Creator.vim ⋮    \   'xnoremap ' . a:mapArgs, a:keys,            a:mapName . 'Selection'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-run) :<C-u>call go#cmd#Run(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮  nnoremap <silent> <Plug>(go-run-vertical) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'vsplit', [])<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮  nnoremap <silent> <Plug>(go-run-split) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'split', [])<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮  nnoremap <silent> <Plug>(go-run-tab) :<C-u>call go#cmd#RunTerm(!g:go_jump_to_error, 'tabe', [])<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-build) :<C-u>call go#cmd#Build(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-generate) :<C-u>call go#cmd#Generate(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-install) :<C-u>call go#cmd#Install(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-test) :<C-u>call go#test#Test(!g:go_jump_to_error, 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-test-func) :<C-u>call go#test#Func(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-test-compile) :<C-u>call go#test#Test(!g:go_jump_to_error, 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-test-file) :<C-u>call go#test#File(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-coverage) :<C-u>call go#coverage#Buffer(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-coverage-clear) :<C-u>call go#coverage#Clear()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-coverage-toggle) :<C-u>call go#coverage#BufferToggle(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-coverage-browser) :<C-u>call go#coverage#Browser(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-files) :<C-u>call go#tool#Files()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-deps) :<C-u>call go#tool#Deps()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-info) :<C-u>call go#tool#Info(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-import) :<C-u>call go#import#SwitchImport(1, '', expand('<cword>'), '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-imports) :<C-u>call go#fmt#Format(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-fmt) :<C-u>call go#fmt#Format(0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-implements) :<C-u>call go#implements#Implements(-1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-referrers) :<C-u>call go#referrers#Referrers(-1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-sameids) :<C-u>call go#sameids#SameIds(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-sameids-toggle) :<C-u>call go#sameids#ToggleSameIds()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-rename) :<C-u>call go#rename#Rename(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-decls) :<C-u>call go#decls#Decls(0, '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-decls-dir) :<C-u>call go#decls#Decls(1, '')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def) :<C-u>call go#def#Jump('', 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-vertical) :<C-u>call go#def#Jump("vsplit", 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-split) :<C-u>call go#def#Jump("split", 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-tab) :<C-u>call go#def#Jump("tab", 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-type) :<C-u>call go#def#Jump('', 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-type-vertical) :<C-u>call go#def#Jump("vsplit", 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-type-split) :<C-u>call go#def#Jump("split", 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-type-tab) :<C-u>call go#def#Jump("tab", 1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-pop) :<C-u>call go#def#StackPop()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-stack) :<C-u>call go#def#Stack()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-def-stack-clear) :<C-u>call go#def#StackClear()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc) :<C-u>call go#doc#Open("new", "split")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-tab) :<C-u>call go#doc#Open("tabnew", "tabe")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-vertical) :<C-u>call go#doc#Open("vnew", "vsplit")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-split) :<C-u>call go#doc#Open("new", "split")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-doc-browser) :<C-u>call go#doc#OpenBrowser()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-metalinter) :<C-u>call go#lint#Gometa(!g:go_jump_to_error, 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-lint) :<C-u>call go#lint#Golint(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-vet) :<C-u>call go#lint#Vet(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-alternate-edit) :<C-u>call go#alternate#Switch(0, "edit")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-alternate-vertical) :<C-u>call go#alternate#Switch(0, "vsplit")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-alternate-split) :<C-u>call go#alternate#Switch(0, "split")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-iferr) :<C-u>call go#iferr#Generate()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-if-err) :<C-u>call go#iferr#Generate()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-diagnostics) :<C-u>call go#lint#Diagnostics(!g:go_jump_to_error)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮nnoremap <silent> <Plug>(go-fill-struct) :<C-u>call go#fillstruct#FillStruct()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\ftplugin\go\mappings.vim ⋮xnoremap <silent> <Plug>(go-extract) :<C-u>call go#extract#Extract(0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\register\pending.vim ⋮"   :normal) as part of the :onoremap, pass it (and any function arguments) to
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\register\pending.vim ⋮"       onoremap <silent> af :<C-u>call MyTextObject('a', 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\register\pending.vim ⋮"       onoremap <silent> af :<C-u>call ingo#register#pending#ExecuteOrFunc(function('MyTextObject'), 'a', 0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\register\pending.vim ⋮"   Instead of invoking :normal! as part of the :onoremap, pass its command
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\register\pending.vim ⋮"	onoremap iV :<C-u>normal! HVL<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\register\pending.vim ⋮"       onoremap iV :<C-u>call ingo#register#pending#NormalBang('HVL')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\err.vim ⋮"	nnoremap <Leader>f :call Foo#Bar()<Bar>if ingo#err#IsSet()<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\plugin\historyrecall.vim ⋮"   nnoremap <silent> <Plug>(HistoryRecallWhat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\plugin\historyrecall.vim ⋮"       nmap qX <Plug>(HistoryRecallWhat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\plugin\historyrecall.vim ⋮"   nnoremap <silent> <Plug>(HistoryRecallListWhat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\plugin\historyrecall.vim ⋮"       nmap qx <Plug>(HistoryRecallListWhat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\plugin\historyrecall.vim ⋮"   nnoremap <silent> <Plug>(HistoryRecallWhatRepeat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\motion\omap.vim ⋮" ingo/motion/omap.vim: Helper function to repeat special operator-pending mappings.
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\motion\omap.vim ⋮function! ingo#motion#omap#repeat( repeatMapping, operator, count )
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\motion\omap.vim ⋮" text and leave insert mode. We define a :noremap so that any user mappings do
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\motion\omap.vim ⋮inoremap <Plug>(IngoLibraryOmapRepeatReinsert) <C-r>.<Esc>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-ingo-library\autoload\ingo\mapmaker.vim ⋮    execute 'nnoremap <expr>' a:mapArgs a:mapKeys 'ingo#mapmaker#OpfuncExpression(''<SID>' . l:rangeCommandOperator . ''')'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\doc.vim ⋮      noremap <buffer> <silent> <CR> :<C-U>close<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\doc.vim ⋮      noremap <buffer> <silent> <Esc> :<C-U>close<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\doc.vim ⋮      noremap <buffer> <silent> q :<C-U>close<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\doc.vim ⋮  noremap <buffer> <silent> <CR> :<C-U>close<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\doc.vim ⋮  noremap <buffer> <silent> <Esc> :<C-U>close<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\doc.vim ⋮  nnoremap <buffer> <silent> <Esc>[ <Esc>[
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\def.vim ⋮  noremap <buffer> <silent> <CR>  :<C-U>call go#def#SelectStackEntry()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\def.vim ⋮  noremap <buffer> <silent> <Esc> :<C-U>call go#ui#CloseWindow()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\def.vim ⋮  noremap <buffer> <silent> q     :<C-U>call go#ui#CloseWindow()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  for k in map(split(execute('nmap <Plug>(go-debug-'), "\n"), 'matchstr(v:val, "^n\\s\\+\\zs\\S\\+")')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮    nmap <buffer> <silent> <cr> :<c-u>call <SID>expand_var()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮    nmap <buffer> q <Plug>(go-debug-stop)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮    nmap <buffer> <cr> :<c-u>call <SID>goto_file()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮    nmap <buffer> q <Plug>(go-debug-stop)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮    nmap <buffer> <silent> <cr> :<c-u>call go#debug#Goroutine()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮    nmap <buffer> q <Plug>(go-debug-stop)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-breakpoint) :<C-u>call go#debug#Breakpoint()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-continue)   :<C-u>call go#debug#Stack('continue')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-stop)       :<C-u>call go#debug#Stop()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-next)       :<C-u>call go#debug#Stack('next')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-step)       :<C-u>call go#debug#Stack('step')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-stepout)    :<C-u>call go#debug#Stack('stepOut')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-print)      :<C-u>call go#debug#Print(expand('<cword>'))<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮  nnoremap <silent> <Plug>(go-debug-halt)       :<C-u>call go#debug#Stack('halt')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮      let l:mapping = 'autocmd BufWinEnter *.go nmap <buffer>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-go\autoload\go\debug.vim ⋮    let l:command     = [a:maparg['mode'], (get(a:maparg, 'noremap', 0) ? 'nore' : ''), 'map']
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮xnoremap <silent> <Plug>(GitGutterTextObjectInnerVisual)  :<C-U>call gitgutter#hunk#text_object(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮xnoremap <silent> <Plug>(GitGutterTextObjectOuterVisual)  :<C-U>call gitgutter#hunk#text_object(0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\<C-U>execute v:count1 . 'GitGutterNextHunk'\<CR>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterNextHunk to \<lt>Plug>(GitGutterNextHunk)')\<CR>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\<C-U>execute v:count1 . 'GitGutterPrevHunk'\<CR>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterPrevHunk to \<lt>Plug>(GitGutterPrevHunk)')\<CR>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮xnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮xnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\plugin\gitgutter.vim ⋮nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\plugin\startify.vim ⋮nnoremap <silent><plug>(startify-open-buffers) :<c-u>call startify#open_buffers()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    nmap <buffer> [c <Plug>(GitGutterPrevHunk)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    nmap <buffer> ]c <Plug>(GitGutterNextHunk)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    xmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    nmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    nmap <buffer> <Leader>hu <Plug>(GitGutterUndoHunk)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    nmap <buffer> <Leader>hp <Plug>(GitGutterPreviewHunk)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    omap <buffer> ic <Plug>(GitGutterTextObjectInnerPending)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    omap <buffer> ac <Plug>(GitGutterTextObjectOuterPending)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    xmap <buffer> ic <Plug>(GitGutterTextObjectInnerVisual)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter.vim ⋮    xmap <buffer> ac <Plug>(GitGutterTextObjectOuterVisual)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> i             :enew <bar> startinsert<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> <insert>      :enew <bar> startinsert<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> b             :call startify#set_mark('B')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> s             :call startify#set_mark('S')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> t             :call startify#set_mark('T')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> v             :call startify#set_mark('V')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> B             :call startify#set_batchmode('B')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> S             :call startify#set_batchmode('S')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> T             :call startify#set_batchmode('T')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> V             :call startify#set_batchmode('V')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> <cr>          :call startify#open_buffers()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> <LeftMouse>   :call <sid>leftmouse()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> <2-LeftMouse> :call startify#open_buffers()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><nowait><silent> <MiddleMouse> :enew <bar> execute 'normal! "'.(v:register=='"'?'*':v:register).'gp'<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><expr> n ' j'[v:searchforward].'n'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮  nnoremap <buffer><expr> N 'j '[v:searchforward].'N'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-startify\autoload\startify.vim ⋮    execute 'nnoremap <buffer><silent><nowait>' entry.index
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮"   nnoremap <silent> <Plug>MyMap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮nnoremap <silent> <Plug>(RepeatDot)      :<C-U>if !repeat#run(v:count)<Bar>echoerr repeat#errmsg()<Bar>endif<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮nmap <silent><expr><script> <Plug>(RepeatUndo)     repeat#wrap('u',v:count)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮nmap <silent><expr><script> <Plug>(RepeatUndoLine) repeat#wrap('U',v:count)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮nmap <silent><expr><script> <Plug>(RepeatRedo)     repeat#wrap("\022",v:count)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮    nmap . <Plug>(RepeatDot)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮    nmap u <Plug>(RepeatUndo)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮    nmap U <Plug>(RepeatUndoLine)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-repeat\autoload\repeat.vim ⋮    nmap <C-R> <Plug>(RepeatRedo)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('n', '<a-n>', require('illuminate').goto_next_reference, { desc = "Move to next reference" })
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('n', '<a-p>', require('illuminate').goto_prev_reference, { desc = "Move to previous reference" })
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('o', '<a-i>', require('illuminate').textobj_select)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('x', '<a-i>', require('illuminate').textobj_select)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter\hunk.vim ⋮        nnoremap <buffer> <silent> <Esc> :<C-U>call gitgutter#hunk#close_hunk_preview_window()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-full\opt\vim-gitgutter\autoload\gitgutter\hunk.vim ⋮    nnoremap <buffer> <silent> <Esc> :<C-U>execute b:source_window . "wincmd w"<Bar>pclose<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\smartsign_spec.vim ⋮        map / <Plug>(easymotion-sn)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\operator_pending_spec.vim ⋮        omap f <Plug>(easymotion-f)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\operator_pending_spec.vim ⋮        omap w <Plug>(easymotion-w)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\operator_pending_spec.vim ⋮        omap b <Plug>(easymotion-b)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\easymotion_spec.vim ⋮        map ; <Plug>(easymotion-next)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\easymotion_spec.vim ⋮        map , <Plug>(easymotion-prev)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\easymotion_spec.vim ⋮        map / <Plug>(easymotion-sn)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\easymotion_spec.vim ⋮        map <Leader>w <Plug>(easymotion-iskeyword-w)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\easymotion_spec.vim ⋮        map <Leader>b <Plug>(easymotion-iskeyword-b)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap a <Nop>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>w <Plug>(easymotion-iskeyword-w)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>b <Plug>(easymotion-iskeyword-b)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>e <Plug>(easymotion-iskeyword-e)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>ge <Plug>(easymotion-iskeyword-ge)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>W <Plug>(easymotion-W)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>B <Plug>(easymotion-B)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>E <Plug>(easymotion-E)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\t\compare_movements_spec.vim ⋮        nmap <Leader>gE <Plug>(easymotion-gE)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮        silent exec 'noremap  <silent><Plug>(easymotion-'.name.')' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮        silent exec 'xnoremap <silent><Plug>(easymotion-'.name.')' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮    " noremap  <silent><Plug>(easymotion-f2) :<C-u>call EasyMotion#S(2,1,0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮    " xnoremap <silent><Plug>(easymotion-f2) <Esc>:<C-u>call EasyMotion#S(2,1,0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮nnoremap <silent> <Plug>(easymotion-overwin-f) :<C-u>call EasyMotion#OverwinF(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮nnoremap <silent> <Plug>(easymotion-overwin-f2) :<C-u>call EasyMotion#OverwinF(2)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮nnoremap <silent> <Plug>(easymotion-overwin-line) :<C-u>call EasyMotion#overwin#line()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮nnoremap <silent> <Plug>(easymotion-overwin-w) :<C-u>call EasyMotion#overwin#w()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮noremap  <silent><Plug>(easymotion-next)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮xnoremap <silent><Plug>(easymotion-next)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮noremap  <silent><Plug>(easymotion-prev)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮xnoremap <silent><Plug>(easymotion-prev)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮noremap  <silent><Plug>(easymotion-repeat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮xnoremap <silent><Plug>(easymotion-repeat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮noremap  <silent><Plug>(easymotion-dotrepeat)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮noremap  <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(0)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮xnoremap <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮        exec 'map ' . g:EasyMotion_leader_key . ' <Plug>(easymotion-prefix)'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮            map <Leader><Leader> <Plug>(easymotion-prefix)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮                silent exec 'map <silent> ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\plugin\EasyMotion.vim ⋮                silent exec 'map <silent> ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  "   nmap <F6> :call SetSuperTabCompletionType("<c-p>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  "    imap <c-space> <c-r>=SuperTabAlternateCompletion("<c-p>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  "      imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-p>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  "      imap <nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-p>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    exec "inoremap <silent> <tab> " . snipmate
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    nmap <silent> <buffer> <cr> :call <SID>SetCompletionType()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    nmap <silent> <buffer> <c-]> :call <SID>SetCompletionType()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  " if the user has g:SuperTabNoCompleteAfter set, then re-map <bs> so that
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    imap <buffer> <bs> <c-r>=<SID>CompletionReset("\<lt>bs>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    imap <buffer> <c-h> <c-r>=<SID>CompletionReset("\<lt>c-h>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮      exec 'imap <buffer> ' . c . ' <c-r>=<SID>CompletionReset("' . c . '")<cr>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    imap <buffer> <bs> <c-r>=<SID>CompletionReset("\<lt>bs>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    imap <buffer> <c-h> <c-r>=<SID>CompletionReset("\<lt>c-h>")<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  let map = a:map
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  if map =~ '<Plug>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮    let map = substitute(map, '.\{-}\(<Plug>\w\+\).*', plug_map, '')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  exec 'inoremap ' . g:SuperTabMappingTabLiteral . ' <tab>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  inoremap <silent> <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  imap <script> <Plug>SuperTabForward <c-r>=SuperTab('n')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  imap <script> <Plug>SuperTabBackward <c-r>=SuperTab('p')<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  exec 'imap ' . g:SuperTabMappingForward . ' <Plug>SuperTabForward'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮  exec 'imap ' . g:SuperTabMappingBackward . ' <Plug>SuperTabBackward'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮      let map = maparg('<cr>', 'i')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮      let cr = !(map =~? '\(^\|[^)]\)<cr>' || map =~ 'ExpandCr')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮      let map = s:ExpandMap(map)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮      exec "inoremap <script> <cr> <c-r>=<SID>SelectCompletion(" . cr . ")<cr>" . map
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\supertab\plugin\supertab.vim ⋮      inoremap <silent> <cr> <c-r>=<SID>SelectCompletion(1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\quick-scope\plugin\quick_scope.vim ⋮    for mapmode in ['onoremap', 'xnoremap']
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\quick-scope\plugin\quick_scope.vim ⋮    execute printf('nnoremap <silent> <Plug>(QuickScope%s) :<C-U>call quick_scope#Ready() \| execute "normal!" v:count1 . quick_scope#Aim("%s") \| call quick_scope#Reload() \| call quick_scope#DoubleTap()<CR>', motion, motion)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\quick-scope\plugin\quick_scope.vim ⋮    for mapmode in ['nmap', 'omap', 'xmap']
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\quick-scope\plugin\quick_scope.vim ⋮for mapmode in ['nnoremap', 'onoremap', 'xnoremap']
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\quick-scope\plugin\quick_scope.vim ⋮nnoremap <silent> <plug>(QuickScopeToggle) :call quick_scope#Toggle()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\quick-scope\plugin\quick_scope.vim ⋮xnoremap <silent> <plug>(QuickScopeToggle) :<c-u>call quick_scope#Toggle()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . '<CR> ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'vnoremap <buffer> ' . l:silent . '<CR> ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . 'o ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'vnoremap <buffer> ' . l:silent . 'o ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . '<S-CR> ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'vnoremap <buffer> ' . l:silent . '<S-CR> ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . 'O ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'vnoremap <buffer> ' . l:silent . 'O ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . 't ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'vnoremap <buffer> ' . l:silent . 't ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . 'v ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . 'p ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  vnoremap <buffer> <silent> p
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . 'u ' . l:cmd . 'MRU<CR>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  execute 'nnoremap <buffer> ' . l:silent . '<2-LeftMouse> ' .
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  nnoremap <buffer> <silent> d
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\mru\plugin\mru.vim ⋮  nnoremap <buffer> <silent> q :close<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\quick-scope\autoload\quick_scope.vim ⋮  execute 'nnoremap <silent> <c-c> <c-c>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Keymapping.vim ⋮\		"noremap" : 0,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Keymapping.vim ⋮		return s:unmapping(a:keymapping, s:_get_key(map_conf), map_conf.noremap) . next_input
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\context.vim\plugin\context.vim ⋮        nnoremap <silent> <expr> <C-Y> context#util#map('<C-Y>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\context.vim\plugin\context.vim ⋮        nnoremap <silent> <expr> <C-E> context#util#map('<C-E>')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\context.vim\plugin\context.vim ⋮        nnoremap <silent> <expr> zz    context#util#map('zz')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\context.vim\plugin\context.vim ⋮        nnoremap <silent> <expr> zb    context#util#map('zb')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\context.vim\plugin\context.vim ⋮    nnoremap <silent> <expr> zt context#util#map_zt()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\context.vim\plugin\context.vim ⋮    nnoremap <silent> <expr> H  context#util#map_H()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdtree\lib\nerdtree\key_map.vim ⋮    exec 'nnoremap <buffer> <silent> '. self.key . premap . ':call nerdtree#ui_glue#invokeKeyMap("'. keymapInvokeString .'")<cr>'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdtree\lib\nerdtree\key_map.vim ⋮"If a keymap has the scope of 'all' then it will be called if no other keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdtree\lib\nerdtree\key_map.vim ⋮"FUNCTION: KeyMap.Add(keymap) {{{1
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdtree\lib\nerdtree\key_map.vim ⋮function! s:KeyMap.Add(keymap)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdtree\lib\nerdtree\key_map.vim ⋮    let s:keyMaps[a:keymap.key . a:keymap.scope] = a:keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdcommenter\plugin\nerdcommenter.vim ⋮    " 'noremap <silent> <Plug>NERDCommenterComment :call nerdcommenter#Comment("n", "Comment")'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdcommenter\plugin\nerdcommenter.vim ⋮    let plug_start = 'noremap <silent> ' . plug . ' :call nerdcommenter#Comment("'
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdcommenter\plugin\nerdcommenter.vim ⋮                execute mode . 'map <leader>' . a:combo . ' ' . plug
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdcommenter\plugin\nerdcommenter.vim ⋮inoremap <silent> <Plug>NERDCommenterInsert <C-\><C-O>:call nerdcommenter#Comment('i', "Insert")<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\nerdcommenter\plugin\nerdcommenter.vim ⋮nnoremap <Plug>NERDCommenterAltDelims :call nerdcommenter#SwitchToAlternativeDelimiters(1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮" noremap is a bit misleading here if you are unused to vim mapping.
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮" this case <SID>TogBG. The <script> argument modifies the noremap scope in 
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮noremap <SID>TogBG  :call <SID>TogBG()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮        exe "silent! nmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮        exe "silent! imap <unique> ".a:mapActivation." <Plug>ToggleBackground"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-tomorrow\autoload\togglebg.vim ⋮        exe "silent! vmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮\			"noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Modules\KeyMapping.vim ⋮		\   'noremap' : c['noremap'],
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮" noremap is a bit misleading here if you are unused to vim mapping.
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮" this case <SID>TogBG. The <script> argument modifies the noremap scope in 
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮noremap <SID>TogBG  :call <SID>TogBG()<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮        exe "silent! nmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮        exe "silent! imap <unique> ".a:mapActivation." <Plug>ToggleBackground"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-colo\opt\vim-colors-solarized\autoload\togglebg.vim ⋮        exe "silent! vmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\vital\_easymotion\Over\Commandline\Base.vim ⋮	let key.noremap = 1
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\init.vim ⋮          \ 'keymap': 'Keymap:',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\init.vim ⋮  call airline#parts#define_text('keymap', '')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\init.vim ⋮    let g:airline_section_a = airline#section#create_left(['mode', 'crypt', 'paste', 'keymap', 'spell', 'capslock', 'xkblayout', 'iminsert'])
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions.vim ⋮  if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions.vim ⋮    call airline#extensions#keymap#init(s:ext)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions.vim ⋮    call add(s:loaded_ext, 'keymap')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\EasyMotion\helper.vim ⋮    let map = printf("<Plug>(%s)", name)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\EasyMotion\helper.vim ⋮        let command = "nnoremap"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\EasyMotion\helper.vim ⋮        let command = "nmap"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-easymotion\autoload\EasyMotion\command_line.vim ⋮\           "noremap" : 1,
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-characterize\plugin\characterize.vim ⋮nnoremap <silent><script> <Plug>(characterize) :<C-U>Characterize<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-characterize\plugin\characterize.vim ⋮  nmap ga <Plug>(characterize)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-characterize\autoload\characterize.vim ⋮      \ "\u27fc": '&longmapsto; &xmap;',
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-*)   asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 1, 'is_whole' : 1})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-g*)  asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 1, 'is_whole' : 0})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-z*)  asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 0, 'is_whole' : 1})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-gz*) asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 0, 'is_whole' : 0})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-#)   asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 1, 'is_whole' : 1})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-g#)  asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 1, 'is_whole' : 0})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-z#)  asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 0, 'is_whole' : 1})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-asterisk\plugin\asterisk.vim ⋮noremap <expr><silent> <Plug>(asterisk-gz#) asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 0, 'is_whole' : 0})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\cursormode.vim ⋮    let map = g:cursormode#{g:colors_name}#color_map
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮if !has('keymap')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮function! airline#extensions#keymap#status()
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮  if (get(g:, 'airline#extensions#keymap#enabled', 1) && has('keymap'))
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮    let short_codes = get(g:, 'airline#extensions#keymap#short_codes', {})
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮    let label = get(g:, 'airline#extensions#keymap#label', g:airline_symbols.keymap)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮    let default = get(g:, 'airline#extensions#keymap#default', '')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮    let keymap = &keymap
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮    if has_key(short_codes, keymap)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮      let keymap = short_codes[keymap]
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮    return printf('%s', (!empty(keymap) && &iminsert ? (label . keymap) :
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮function! airline#extensions#keymap#init(ext)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\keymap.vim ⋮  call airline#parts#define_function('keymap', 'airline#extensions#keymap#status')
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮                silent! execute 'nmap <unique> '.a:keys.' '.a:plug
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <silent> <SID>ToggleTabs :call airline#extensions#tabline#xtabline#toggle_tabs()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <silent> <SID>ToggleFiltering :call airline#extensions#tabline#xtabline#toggle_buffers()<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <silent> <expr> <SID>SelectBuffer g:xtabline_changing_buffer ? "\<C-c>" : ":<C-u>call airline#extensions#tabline#xtabline#select_buffer(v:count)\<cr>"
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <silent> <expr> <SID>NextBuffer airline#extensions#tabline#xtabline#next_buffer(v:count1)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <silent> <expr> <SID>PrevBuffer airline#extensions#tabline#xtabline#prev_buffer(v:count1)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮    nnoremap <silent> <SID>ReopenLastTab :XTabReopen<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        map <unique> <leader>cdc <Plug>XTablineCdCurrent
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        map <unique> <leader>cdd <Plug>XTablineCdDown1
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        map <unique> <leader>cd2 <Plug>XTablineCdDown2
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        map <unique> <leader>cd3 <Plug>XTablineCdDown3
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        map <unique> <leader>cdh <Plug>XTablineCdHome
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\xtabline.vim ⋮        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\tabs.vim ⋮      exe printf('noremap <silent> <Plug>AirlineSelectTab%d :%dtabn<CR>', i%10, i)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\tabs.vim ⋮        exe printf('noremap <silent> <Plug>AirlineSelectTab%d :%dtabn<CR>', i, i-10)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\tabs.vim ⋮  noremap <silent> <Plug>AirlineSelectPrevTab gT
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\tabs.vim ⋮  noremap <silent> <Plug>AirlineSelectNextTab :<C-U>exe repeat(':tabn\|', v:count1)<cr>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\formatters\unique_tail.vim ⋮  let map = {}
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\buffers.vim ⋮        exe printf('noremap <silent> <Plug>AirlineSelectTab%d :call <SID>select_tab(%d)<CR>', i%10, i-1)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\buffers.vim ⋮        exe printf('noremap <silent> <Plug>AirlineSelectTab%02d :call <SID>select_tab(%d)<CR>', i, i-start_idx)
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\buffers.vim ⋮    noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>
D:\Dropbox\JH\core\IT\onGitHub\vimfiles\vim\packs\packs-cp-all\opt\vim-airline\autoload\airline\extensions\tabline\buffers.vim ⋮    noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>

maps in  C:\Users\jnbh\AppData\Local\nvim-data\lazy

C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree.lua ⋮  require("nvim-tree.keymap").setup(opts)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\plugin\init.lua ⋮  vim.keymap.set(modes, lhs, rhs, { silent = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮inoremap <silent> <Plug>(vsnip-expand-or-jump) <Esc>:<C-u>call <SID>expand_or_jump()<CR>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮inoremap <silent> <Plug>(vsnip-expand) <Esc>:<C-u>call <SID>expand()<CR>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮inoremap <silent> <Plug>(vsnip-jump-next) <Esc>:<C-u>call <SID>jump(1)<CR>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮inoremap <silent> <Plug>(vsnip-jump-prev) <Esc>:<C-u>call <SID>jump(-1)<CR>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮nnoremap <silent> <Plug>(vsnip-select-text) :set operatorfunc=<SID>vsnip_select_text_normal<CR>g@
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮xnoremap <silent> <Plug>(vsnip-select-text) :<C-u>call <SID>vsnip_visual_text(visualmode())<CR>gv
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮nnoremap <silent> <Plug>(vsnip-cut-text) :set operatorfunc=<SID>vsnip_cut_text_normal<CR>g@
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\plugin\vsnip.vim ⋮xnoremap <silent> <Plug>(vsnip-cut-text) :<C-u>call <SID>vsnip_visual_text(visualmode())<CR>gv"_c
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-lspconfig\lua\lspconfig\health.lua ⋮  vim.cmd [[nnoremap <buffer> q <c-w>q]]
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\util.lua ⋮return {inc = inc, dec = dec, clamp = clamp, echo = echo, ["replace-keycodes"] = replace_keycodes, ["get-cursor-pos"] = get_cursor_pos, get_enterable_windows = get_enterable_windows, get_focusable_windows = get_focusable_windows, ["get-eq-class-of"] = get_eq_class_of, ["->representative-char"] = __3erepresentative_char, ["get-input"] = get_input, ["get-input-by-keymap"] = get_input_by_keymap}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\user.lua ⋮        vim.keymap.set(mode, lhs, rhs, {silent = true, desc = desc})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\user.lua ⋮  vim.keymap.set(modes, fwd_key, _10_, {silent = true, desc = "Repeat leap"})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\user.lua ⋮  return vim.keymap.set(modes, bwd_key, _11_, {silent = true, desc = _12_})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\user.lua ⋮        vim.keymap.set(mode, lhs, rhs, {silent = true, desc = desc})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\user.lua ⋮        vim.keymap.set(mode, lhs, rhs, {silent = true, desc = desc})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\user.lua ⋮      vim.keymap.set(mode, lhs, rhs, {silent = true})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\main.lua ⋮local get_input_by_keymap = _local_2_["get-input-by-keymap"]
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\main.lua ⋮local map = vim.tbl_map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\highlight.lua ⋮local map = vim.tbl_map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\leap.nvim\lua\leap\beacons.lua ⋮local map = vim.tbl_map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\view.lua ⋮  require("nvim-tree.keymap").on_attach(M.get_bufnr())
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  local keymap = vim.api.nvim_buf_get_keymap(scratch_bufnr, "")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  return keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮      noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<C-]>",          api.tree.change_root_to_node,       opts("CD"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<C-e>",          api.node.open.replace_tree_buffer,  opts("Open: In Place"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<C-k>",          api.node.show_info_popup,           opts("Info"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<C-r>",          api.fs.rename_sub,                  opts("Rename: Omit Filename"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<C-t>",          api.node.open.tab,                  opts("Open: New Tab"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<C-v>",          api.node.open.vertical,             opts("Open: Vertical Split"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<C-x>",          api.node.open.horizontal,           opts("Open: Horizontal Split"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<BS>",           api.node.navigate.parent_close,     opts("Close Directory"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<CR>",           api.node.open.edit,                 opts("Open"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<Tab>",          api.node.open.preview,              opts("Open Preview"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", ">",              api.node.navigate.sibling.next,     opts("Next Sibling"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<",              api.node.navigate.sibling.prev,     opts("Previous Sibling"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", ".",              api.node.run.cmd,                   opts("Run Command"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "-",              api.tree.change_root_to_parent,     opts("Up"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "a",              api.fs.create,                      opts("Create File Or Directory"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "bd",             api.marks.bulk.delete,              opts("Delete Bookmarked"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "bt",             api.marks.bulk.trash,               opts("Trash Bookmarked"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "bmv",            api.marks.bulk.move,                opts("Move Bookmarked"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "B",              api.tree.toggle_no_buffer_filter,   opts("Toggle Filter: No Buffer"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "c",              api.fs.copy.node,                   opts("Copy"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "C",              api.tree.toggle_git_clean_filter,   opts("Toggle Filter: Git Clean"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "[c",             api.node.navigate.git.prev,         opts("Prev Git"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "]c",             api.node.navigate.git.next,         opts("Next Git"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "d",              api.fs.remove,                      opts("Delete"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "D",              api.fs.trash,                       opts("Trash"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "E",              api.tree.expand_all,                opts("Expand All"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "e",              api.fs.rename_basename,             opts("Rename: Basename"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "]e",             api.node.navigate.diagnostics.next, opts("Next Diagnostic"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "[e",             api.node.navigate.diagnostics.prev, opts("Prev Diagnostic"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "F",              api.live_filter.clear,              opts("Live Filter: Clear"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "f",              api.live_filter.start,              opts("Live Filter: Start"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "g?",             api.tree.toggle_help,               opts("Help"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "gy",             api.fs.copy.absolute_path,          opts("Copy Absolute Path"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "ge",             api.fs.copy.basename,               opts("Copy Basename"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "H",              api.tree.toggle_hidden_filter,      opts("Toggle Filter: Dotfiles"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "I",              api.tree.toggle_gitignore_filter,   opts("Toggle Filter: Git Ignore"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "J",              api.node.navigate.sibling.last,     opts("Last Sibling"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "K",              api.node.navigate.sibling.first,    opts("First Sibling"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "L",              api.node.open.toggle_group_empty,   opts("Toggle Group Empty"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "M",              api.tree.toggle_no_bookmark_filter, opts("Toggle Filter: No Bookmark"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "m",              api.marks.toggle,                   opts("Toggle Bookmark"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "o",              api.node.open.edit,                 opts("Open"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "O",              api.node.open.no_window_picker,     opts("Open: No Window Picker"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "p",              api.fs.paste,                       opts("Paste"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "P",              api.node.navigate.parent,           opts("Parent Directory"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "q",              api.tree.close,                     opts("Close"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "r",              api.fs.rename,                      opts("Rename"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "R",              api.tree.reload,                    opts("Refresh"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "s",              api.node.run.system,                opts("Run System"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "S",              api.tree.search_node,               opts("Search"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "u",              api.fs.rename_full,                 opts("Rename: Full Path"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "U",              api.tree.toggle_custom_filter,      opts("Toggle Filter: Hidden"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "W",              api.tree.collapse_all,              opts("Collapse"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "x",              api.fs.cut,                         opts("Cut"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "y",              api.fs.copy.filename,               opts("Copy Name"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "Y",              api.fs.copy.relative_path,          opts("Copy Relative Path"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<2-LeftMouse>",  api.node.open.edit,                 opts("Open"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\keymap.lua ⋮  vim.keymap.set("n", "<2-RightMouse>", api.tree.change_root_to_node,       opts("CD"))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\autoload\vsnip\snippet\parser.vim ⋮let s:map = s:Combinator.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\help.lua ⋮local keymap = require("nvim-tree.keymap")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\help.lua ⋮---@param map table keymap.get_keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\help.lua ⋮  local head_rhs2 = string.format("sort by %s: s", M.config.sort_by == "key" and "description" or "keymap")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\help.lua ⋮  -- formatted lhs and desc from active keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\help.lua ⋮  local map = keymap.get_keymap()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\help.lua ⋮    vim.keymap.set("n", k, v.fn, {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\help.lua ⋮      noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\api.lua ⋮local keymap = require("nvim-tree.keymap")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\api.lua ⋮Api.config.mappings.get_keymap = wrap(keymap.get_keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\api.lua ⋮Api.config.mappings.get_keymap_default = wrap(keymap.get_keymap_default)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-tree.lua\lua\nvim-tree\api.lua ⋮Api.config.mappings.default_on_attach = keymap.default_on_attach
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\.vimrc ⋮imap <expr><C-j>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-j>'
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\.vimrc ⋮imap <expr><Tab>   vsnip#available(1)  ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-vsnip\.vimrc ⋮imap <expr><S-Tab> vsnip#available(-1) ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('n', '<a-n>', require('illuminate').goto_next_reference, { desc = "Move to next reference" })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('n', '<a-p>', require('illuminate').goto_prev_reference, { desc = "Move to previous reference" })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('o', '<a-i>', require('illuminate').textobj_select)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\vim-illuminate\plugin\illuminate.vim ⋮            vim.keymap.set('x', '<a-i>', require('illuminate').textobj_select)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\view\init.lua ⋮  vim.keymap.set("n", ViewConfig.keys.abort, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\view\init.lua ⋮  vim.keymap.set("n", "gx", "K", { buffer = self.buf, remap = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\view\float.lua ⋮  vim.keymap.set(mode or "n", key, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\trouble.nvim\lua\trouble\view\window.lua ⋮---@param opts? string|vim.keymap.set.Opts|{mode?:string}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\trouble.nvim\lua\trouble\view\window.lua ⋮  ---@cast opts vim.keymap.set.Opts
C:\Users\jnbh\AppData\Local\nvim-data\lazy\trouble.nvim\lua\trouble\view\window.lua ⋮    error("Cannot create a keymap for an invalid window")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\trouble.nvim\lua\trouble\view\window.lua ⋮  vim.keymap.set(mode, key, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\manage\task\init.lua ⋮  local map = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\plugin\telescope.lua ⋮vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\plugin\telescope.lua ⋮  { silent = true, noremap = true }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\core\handler\keys.lua ⋮---@field noremap? boolean
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\core\handler\keys.lua ⋮    vim.keymap.set(keys.mode, lhs, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\core\handler\keys.lua ⋮    pcall(vim.keymap.del, keys.mode, keys.lhs, { buffer = buf or nil })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lazy.nvim\lua\lazy\core\handler\keys.lua ⋮    vim.keymap.set(keys.mode, keys.lhs, keys.rhs, opts)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-surround\lua\nvim-surround\config.lua ⋮-- Check if a keymap should be added before setting it.
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-surround\lua\nvim-surround\config.lua ⋮---@param args table The arguments to set the keymap.
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-surround\lua\nvim-surround\config.lua ⋮    -- If the keymap is disabled
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-surround\lua\nvim-surround\config.lua ⋮        -- Otherwise disable the global keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-surround\lua\nvim-surround\config.lua ⋮    vim.keymap.set(args.mode, args.lhs, args.rhs, args.opts)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\lua\scrollview.lua ⋮      -- c54f347d63bcca97ead673d01ac6b59914bb04e5/src/keymap.h#L84-L88,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\lua\scrollview\signs\spell.lua ⋮  if api.nvim_create_autocmd == nil or vim.keymap == nil then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewDisable) <cmd>ScrollViewDisable<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewDisable) <cmd>ScrollViewDisable<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewEnable)  <cmd>ScrollViewEnable<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewEnable)  <cmd>ScrollViewEnable<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewFirst)   <cmd>ScrollViewFirst<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewFirst)   <cmd>ScrollViewFirst<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewLast)    <cmd>ScrollViewLast<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewLast)    <cmd>ScrollViewLast<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewLegend)  <cmd>ScrollViewLegend<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewLegend)  <cmd>ScrollViewLegend<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewLegend!) <cmd>ScrollViewLegend!<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewLegend!) <cmd>ScrollViewLegend!<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewNext)    <cmd>ScrollViewNext<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewNext)    <cmd>ScrollViewNext<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewPrev)    <cmd>ScrollViewPrev<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewPrev)    <cmd>ScrollViewPrev<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewRefresh) <cmd>ScrollViewRefresh<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewRefresh) <cmd>ScrollViewRefresh<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮noremap  <silent> <plug>(ScrollViewToggle)  <cmd>ScrollViewToggle<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-scrollview\autoload\scrollview.vim ⋮inoremap <silent> <plug>(ScrollViewToggle)  <cmd>ScrollViewToggle<cr>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\harpoon\lua\harpoon\extensions\init.lua ⋮                vim.keymap.set("n", "" .. i, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\harpoon\lua\harpoon\buffer.lua ⋮    harpoon.logger:log("select by keymap '<CR>'")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\harpoon\lua\harpoon\buffer.lua ⋮    harpoon.logger:log("toggle by keymap '" .. key .. "'")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\harpoon\lua\harpoon\buffer.lua ⋮    vim.keymap.set("n", "q", function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\harpoon\lua\harpoon\buffer.lua ⋮    vim.keymap.set("n", "<Esc>", function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\harpoon\lua\harpoon\buffer.lua ⋮    vim.keymap.set("n", "<CR>", function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\tests\base\test_inputs.lua ⋮  -- check it works with keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\tests\base\test_inputs.lua ⋮  -- check it works with keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far.lua ⋮---@field keymap KeymapDef
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\mappings.lua ⋮--- To disable a keymap, put `[map] = false`<br>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\mappings.lua ⋮  if opts.noremap == nil then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\mappings.lua ⋮    opts.noremap = true
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\mappings.lua ⋮      vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\mappings.lua ⋮  vim.keymap.set(mode, key_bind, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\mappings.lua ⋮    -- We need to copy it so noremap and silent won't be part of the table ref after the first bind
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\mappings.lua ⋮  local map = function(modes, key_bind, key_func, opts)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮---@param keymap KeymapDef
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮function M.setBufKeymap(buf, desc, keymap, callback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮      { noremap = true, desc = desc, callback = callback, nowait = true }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮  if keymap.i and keymap.i ~= '' then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮    setMapping('i', keymap.i)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮  if keymap.n and keymap.n ~= '' then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮    setMapping('n', keymap.n)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮---@param keymap KeymapDef
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮function M.getActionMapping(keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\utils.lua ⋮  local lhs = keymap.n
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\builtin\__internal.lua ⋮    for _, keymap in pairs(keymaps) do
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\builtin\__internal.lua ⋮      local keymap_key = keymap.buffer .. keymap.mode .. keymap.lhs -- should be distinct for every keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\builtin\__internal.lua ⋮        if opts.show_plug or not string.find(keymap.lhs, "<Plug>") then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\builtin\__internal.lua ⋮          table.insert(keymaps_table, keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\builtin\__internal.lua ⋮          max_len_lhs = math.max(max_len_lhs, #utils.display_termcodes(keymap.lhs))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\builtin\init.lua ⋮--- Lists normal mode keymappings, runs the selected keymap on `<cr>`
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\builtin\init.lua ⋮---@field modes table: a list of short-named keymap modes to search (default: { "n", "i", "c", "x" })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\render\help.lua ⋮    return { text = action.text, lhs = utils.getActionMapping(action.keymap) }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\inputs.lua ⋮    noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\inputs.lua ⋮    noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\inputs.lua ⋮    noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\inputs.lua ⋮    noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\inputs.lua ⋮    noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.help,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.replace,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.syncLocations,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.syncLine,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.syncNext,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.syncPrev,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.syncFile,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.historyOpen,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.historyAdd,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.refresh,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.gotoLocation,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.openLocation,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.openNextLocation,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.openPrevLocation,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.applyNext,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.applyPrev,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.qflist,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.abort,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.close,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.swapEngine,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.toggleShowCommand,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.previewLocation,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.swapReplacementInterpreter,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.nextInput,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮      keymap = keymaps.prevInput,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\farBuffer.lua ⋮    utils.setBufKeymap(buf, action.text, action.keymap, action.action)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\sqlite.lua\lua\sqlite\utils.lua ⋮M.map = function(t, f)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\sqlite.lua\lua\sqlite\tbl\extend.lua ⋮tbl.map = function(func, query) end
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\actions\set.lua ⋮  local map = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\actions\init.lua ⋮--- You can just map `actions.select_default + actions.center`
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\actions\generate.lua ⋮---@field close_with_action boolean: registered action will close keymap float (default: true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\actions\generate.lua ⋮---@field normal_hl string: winhl of "Normal" for keymap hints floating window (default: "TelescopePrompt")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\actions\generate.lua ⋮---@field border_hl string: winhl of "Normal" for keymap borders (default: "TelescopePromptBorder")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\actions\generate.lua ⋮---@field winblend number: pseudo-transparency of keymap hints floating window
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope.nvim\lua\telescope\actions\generate.lua ⋮---@field zindex number: z-index of keymap hints floating window (default: 100)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\snipe.nvim\lua\snipe\menu.lua ⋮    vim.keymap.set(mode, key, cb, { nowait = true, buffer = self.buf })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\snipe.nvim\lua\snipe\menu.lua ⋮    vim.keymap.set("n", tag, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\snipe.nvim\lua\snipe\init.lua ⋮  vim.keymap.set("n", Config.navigate.close_buffer, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\snipe.nvim\lua\snipe\init.lua ⋮  vim.keymap.set("n", Config.navigate.open_vsplit, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\snipe.nvim\lua\snipe\init.lua ⋮  vim.keymap.set("n", Config.navigate.open_split, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\snipe.nvim\lua\snipe\init.lua ⋮  vim.keymap.set("n", Config.navigate.change_tag, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\actions\historyOpen.lua ⋮      { text = 'Pick Entry', keymap = keymaps.pickHistoryEntry },
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\actions\help.lua ⋮    local shortcut = utils.getActionMapping(action.keymap) or '(unbound)'
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\actions\help.lua ⋮    local shortcut = utils.getActionMapping(action.keymap) or '(unbound)'
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\actions\help.lua ⋮    { noremap = true, nowait = true, silent = true }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\grug-far.nvim\lua\grug-far\actions\help.lua ⋮    { noremap = true, nowait = true, silent = true }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\gitsigns.nvim\test\gs_helpers.lua ⋮          vim.keymap.set(map[1], map[2], map[3], { buffer = bufnr })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\gitsigns.nvim\test\gitsigns_spec.lua ⋮        local res = split(helpers.api.nvim_exec2('nmap <buffer>', { output = true }).output, '\n')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope-frecency.nvim\lua\frecency\picker.lua ⋮    vim.keymap.set("i", "<Tab>", "pumvisible() ? '<C-n>' : '<C-x><C-u>'", { buffer = bufnr, expr = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\telescope-frecency.nvim\lua\frecency\picker.lua ⋮    vim.keymap.set("i", "<S-Tab>", "pumvisible() ? '<C-p>' : ''", { buffer = bufnr, expr = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\gitsigns.nvim\lua\gitsigns\blame.lua ⋮--- @param opts vim.keymap.set.Opts
C:\Users\jnbh\AppData\Local\nvim-data\lazy\gitsigns.nvim\lua\gitsigns\blame.lua ⋮  vim.keymap.set(mode, lhs, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\gitsigns.nvim\lua\gitsigns\blame.lua ⋮  vim.keymap.set('n', '<CR>', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\gitsigns.nvim\lua\gitsigns\popup.lua ⋮  vim.keymap.set('n', 'q', '<cmd>quit!<cr>', { silent = true, buffer = bufnr })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view.lua ⋮      keymap.listen('i', c, function(...)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view.lua ⋮        self.event:emit('keymap', ...)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮  self.keymap = type(self.keymap) == "table" and self.keymap or {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮  self.keymap.fzf = type(self.keymap.fzf) == "table" and self.keymap.fzf or {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮  self.keymap.builtin = type(self.keymap.builtin) == "table" and self.keymap.builtin or {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮    for k, v in pairs(self.keymap.fzf) do
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮  local function funcref_str(keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮    return ([[<Cmd>lua require('fzf-lua.%s').%s<CR>]]):format(keymap.module, keymap.fnc)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮  for key, action in pairs(self.keymap.builtin) do
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮    local keymap = keymap_tbl[action]
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮    if keymap and not utils.tbl_isempty(keymap) and action ~= false then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮      vim.keymap.set("t", key, funcref_str(keymap), { nowait = true, buffer = self.fzf_bufnr })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮  if self.actions["esc"] == actions.dummy_abort and not self.keymap.builtin["<esc>"] then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮    vim.keymap.set("t", "<Esc>", "<Esc>", { buffer = self.fzf_bufnr, nowait = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮  self.keymap = o.keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\win.lua ⋮    for k, v in pairs(self.keymap[m]) do
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\utils.lua ⋮  local map = m
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\utils.lua ⋮      map = map[key]
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\test\helpers.lua ⋮        keymap = { fzf = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\wildmenu_entries_view.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\wildmenu_entries_view.lua ⋮      vim.api.nvim_feedkeys(keymap.backspace(string.sub(api.get_current_line(), self.offset, cursor[2])) .. word, 'int', true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\native_entries_view.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\native_entries_view.lua ⋮      feedkeys.call(keymap.t(string.rep('<C-n>', option.count)), 'n', callback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\native_entries_view.lua ⋮      feedkeys.call(keymap.t(string.rep('<Down>', option.count)), 'n', callback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\native_entries_view.lua ⋮      feedkeys.call(keymap.t(string.rep('<C-p>', option.count)), 'n', callback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\native_entries_view.lua ⋮      feedkeys.call(keymap.t(string.rep('<Up>', option.count)), 'n', callback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\custom_entries_view.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\custom_entries_view.lua ⋮        vim.api.nvim_feedkeys(keymap.t('<Cmd>redraw<CR>'), 'ni', false)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\custom_entries_view.lua ⋮        vim.api.nvim_feedkeys(keymap.backspace(string.sub(api.get_current_line(), self.offset, cursor[2])) .. word, 'int', true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\custom_entries_view.lua ⋮        table.insert(keys, keymap.indentkeys())
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\custom_entries_view.lua ⋮        table.insert(keys, keymap.backspace(string.sub(api.get_current_line(), self.offset, cursor[2])))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\view\custom_entries_view.lua ⋮        table.insert(keys, keymap.indentkeys(vim.bo.indentkeys))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\plenary.nvim\tests\minimal_init.vim ⋮nnoremap ,,x :luafile %<CR>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\plenary.nvim\plugin\plenary.vim ⋮nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR>
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮  local function add_keymap(keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮    if type(keymap.rhs) == "string" and #keymap.rhs == 0 then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮    if type(keymap.lhs) == "string" and type(opts.ignore_patterns) == "table" then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮        local pattern, lhs = p:lower(), vim.trim(keymap.lhs:lower())
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮    keymap.str = format({
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮      mode = utils.ansi_codes[modes[keymap.mode] or "blue"](keymap.mode),
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮      lhs  = keymap.lhs:gsub("%s", "<Space>"),
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮      desc = keymap.desc and string.gsub(keymap.desc, "\n%s+", "\r"),
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮      rhs  = keymap.rhs or string.format("%s", keymap.callback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮    local k = string.format("[%s:%s:%s]", keymap.buffer, keymap.mode, keymap.lhs)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮    keymaps[k] = keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮    for _, keymap in pairs(global) do
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮      add_keymap(keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮    for _, keymap in pairs(buf_local) do
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮      add_keymap(keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\nvim.lua ⋮  local header_str = format({ mode = "m", lhs = "keymap", desc = "description", rhs = "detail" })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\providers\buffers.lua ⋮    local map = { var = "variable.builtin" }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\snippet.lua ⋮P.map = function(parser, map)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮describe('keymap', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      assert.are.equal(keymap.t(key), vim.api.nvim_replace_termcodes(key, true, true, true))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      assert.are.equal(keymap.t(key .. key), vim.api.nvim_replace_termcodes(key .. key, true, true, true))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      assert.are.equal(keymap.t(key .. key .. key), vim.api.nvim_replace_termcodes(key .. key .. key, true, true, true))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮    assert.are.equal(keymap.to_keymap('\n'), '<CR>')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮    assert.are.equal(keymap.to_keymap('<CR>'), '<CR>')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮    assert.are.equal(keymap.to_keymap('|'), '<Bar>')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        vim.api.nvim_buf_set_keymap(0, 'i', '<Plug>(pairs)', '()<Left>', { noremap = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        vim.api.nvim_buf_set_keymap(0, 'i', '(', '<Plug>(pairs)', { noremap = false })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        local fallback = keymap.fallback(0, 'i', keymap.get_map('i', '('))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        local fallback = keymap.fallback(0, 'i', keymap.get_map('i', '('))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮            vim.api.nvim_feedkeys('()' .. keymap.t('<Left>'), 'int', true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        local fallback = keymap.fallback(0, 'i', keymap.get_map('i', '('))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮          noremap = false,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮            return '()' .. keymap.t('<Left>')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        local fallback = keymap.fallback(0, 'i', keymap.get_map('i', '('))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      --   local fallback = keymap.fallback(0, 'c', keymap.get_map('c', '<Tab>'))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮          noremap = false,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        local fallback = keymap.fallback(0, 'i', keymap.get_map('i', '('))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮          noremap = false,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        local fallback = keymap.fallback(0, 'i', keymap.get_map('i', '('))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮            noremap = false,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮              return keymap.t('()<Left>')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮          local fallback = keymap.fallback(0, 'i', keymap.get_map('i', '('))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      keymap.listen('i', '<c-n>', function(_, fallback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      vim.api.nvim_feedkeys(keymap.t('iaiueo<CR>a<C-n><C-n>'), 'tx', true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      keymap.listen('i', '<M-j>', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        vim.api.nvim_feedkeys(keymap.t('<C-n>'), 'int', true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      vim.api.nvim_feedkeys(keymap.t('iaiueo<CR>a<M-j><M-j>'), 'tx', true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮        noremap = false,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      keymap.listen('i', '<CR>', function(_, fallback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap_spec.lua ⋮      feedkeys.call(keymap.t('i<CR>'), 'tx')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮local keymap = {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.t = function(keys)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.normalize = vim.fn.has('nvim-0.8') == 1 and function(keys)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    local normalize_buf = buffer.ensure('cmp.util.keymap.normalize')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    vim.api.nvim_buf_set_keymap(normalize_buf, 't', keys, '<Plug>(cmp.utils.keymap.normalize)', {})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮      if keymap.t(map.rhs) == keymap.t('<Plug>(cmp.utils.keymap.normalize)') then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.to_keymap = setmetatable({
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.undobreak = function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  return keymap.t('<C-g>u')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.undojoin = function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  return keymap.t('<C-g>U')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.backspace = function(count)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  table.insert(keys, keymap.t(string.rep('<BS>', count)))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.delete = function(count)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  table.insert(keys, keymap.t(string.rep('<Del>', count)))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.indentkeys = function(expr)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  return string.format(keymap.t('<Cmd>set indentkeys=%s<CR>'), expr and vim.fn.escape(expr, '| \t\\') or '')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.equals = function(a, b)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  return keymap.normalize(a) == keymap.normalize(b)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.listen = function(mode, lhs, callback)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  lhs = keymap.normalize(keymap.to_keymap(lhs))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  local existing = keymap.get_map(mode, lhs)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  if existing.desc == 'cmp.utils.keymap.set_map' then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  local fallback = keymap.fallback(bufnr, mode, existing)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  keymap.set_map(bufnr, mode, lhs, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.fallback = function(bufnr, mode, map)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮      keymap.set_map(bufnr, mode, fallback_lhs, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮        return keymap.solve(bufnr, mode, map).keys
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮        noremap = map.noremap,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮      vim.api.nvim_feedkeys(keymap.t(fallback_lhs), 'im', true)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮      local solved = keymap.solve(bufnr, mode, map)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.solve = function(bufnr, mode, map)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  local lhs = keymap.t(map.lhs)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  local rhs = keymap.t(map.rhs)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮      rhs = vim.api.nvim_eval(keymap.t(map.rhs))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  if map.noremap then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    keymap.set_map(bufnr, mode, recursive, lhs, {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮      noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    return { keys = keymap.t(recursive) .. string.gsub(rhs, '^' .. vim.pesc(lhs), ''), mode = 'im' }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.get_map = function(mode, lhs)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  lhs = keymap.normalize(lhs)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    if keymap.equals(map.lhs, lhs) then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮        noremap = map.noremap == 1,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    if keymap.equals(map.lhs, lhs) then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮        noremap = map.noremap == 1,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮    noremap = true,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮keymap.set_map = function(bufnr, mode, lhs, rhs, opts)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮  opts.desc = 'cmp.utils.keymap.set_map'
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\keymap.lua ⋮return keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮    feedkeys.call(keymap.t('iaiueo<Esc>'), 'nx', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮    assert.are.equal(reg, keymap.t('aiueo'))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮    feedkeys.call(keymap.t('iaiueo '), 'nx')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮    feedkeys.call(keymap.t('aaiueoaiueo'), 'nx')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮    feedkeys.call(keymap.t('iaiueo'), 'nx')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮    feedkeys.call(keymap.t('a<BS><BS>'), 'nx')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮        feedkeys.call(keymap.t('<BS><BS><BS><BS><BS>'), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮        feedkeys.call(keymap.t('abcde'), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮        feedkeys.call(keymap.t('<BS><BS><BS><BS><BS>'), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys_spec.lua ⋮        feedkeys.call(keymap.t('12345'), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮      table.insert(queue, { keymap.t('<Cmd>setlocal lazyredraw<CR>'), 'n' })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮      table.insert(queue, { keymap.t('<Cmd>setlocal textwidth=0<CR>'), 'n' })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮      table.insert(queue, { keymap.t('<Cmd>setlocal backspace=nostop<CR>'), 'n' })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮      table.insert(queue, { keymap.t('<Cmd>setlocal %slazyredraw<CR>'):format(vim.o.lazyredraw and '' or 'no'), 'n' })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮      table.insert(queue, { keymap.t('<Cmd>setlocal textwidth=%s<CR>'):format(vim.bo.textwidth or 0), 'n' })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮      table.insert(queue, { keymap.t('<Cmd>setlocal backspace=%s<CR>'):format(vim.go.backspace or 2), 'n' })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\feedkeys.lua ⋮      table.insert(queue, { keymap.t('<Cmd>lua require"cmp.utils.feedkeys".run(%s)<CR>'):format(id), 'n', true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\async.lua ⋮---Wait and callback for consuming next keymap.
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t('i\t1234567890'), 'nx', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      keymap.set_map(0, 'c', '<Plug>(cmp-spec-spy)', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      end, { expr = true, noremap = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t(':\t1234567890'), 'n')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t('<Plug>(cmp-spec-spy)'), 'x')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t('iあいうえお'), 'nx', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      keymap.set_map(0, 'c', '<Plug>(cmp-spec-spy)', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      end, { expr = true, noremap = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t(':あいうえお'), 'n')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t('<Plug>(cmp-spec-spy)'), 'x')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t('i\t1234567890<Left><Left>'), 'nx', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      keymap.set_map(0, 'c', '<Plug>(cmp-spec-spy)', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      end, { expr = true, noremap = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t(':\t1234567890<Left><Left>'), 'n')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\utils\api_spec.lua ⋮      feedkeys.call(keymap.t('<Plug>(cmp-spec-spy)'), 'x')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\init.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\init.lua ⋮      feedkeys.call(keymap.t(string.rep('<C-n>', option.count)), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\init.lua ⋮      feedkeys.call(keymap.t(string.rep('<Down>', option.count)), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\init.lua ⋮      feedkeys.call(keymap.t(string.rep('<C-p>', option.count)), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\init.lua ⋮      feedkeys.call(keymap.t(string.rep('<Up>', option.count)), 'in')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core_spec.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core_spec.lua ⋮        local state = confirm(keymap.t('i***AEO***<Left><Left><Left><Left><Left>'), 'IU', {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core_spec.lua ⋮        local state = confirm(keymap.t('ios.'), '', {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core_spec.lua ⋮        local state = confirm(keymap.t('i***AEO***<Left><Left><Left><Left><Left>'), 'IU', {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core_spec.lua ⋮          local state = confirm(keymap.t('i%s:%s%s:%s<Left><Left><Left>'):format(char, char, char, char), char, {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core_spec.lua ⋮        local state = confirm(keymap.t(':***AEO***<Left><Left><Left><Left><Left>'), 'IU', {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮  self.view.event:on('keymap', function(...)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮    if keymap.equals(key, keys) and mapping[mode] then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮  local chars = keymap.t(keys)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮      keymap.listen(mode, keys, function(...)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮    feedkeys.call(keymap.backspace(pretext) .. common_string, 'n')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮  feedkeys.call(keymap.indentkeys(), 'n')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮    table.insert(keys, keymap.backspace(ctx.cursor_before_line:sub(e.offset)))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮    table.insert(keys, keymap.undobreak())
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮      table.insert(keys, keymap.backspace(ctx.cursor_before_line:sub(e.offset)))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮      table.insert(keys, keymap.backspace(ctx.cursor_line:sub(completion_item.textEdit.range.start.character + 1, ctx.cursor.col - 1)))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮      table.insert(keys, keymap.delete(ctx.cursor_line:sub(ctx.cursor.col, completion_item.textEdit.range['end'].character)))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\core.lua ⋮  feedkeys.call(keymap.indentkeys(vim.bo.indentkeys), 'n')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\config.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\config.lua ⋮      normalized[keymap.normalize(k)] = mapping(v, { 'i' })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\telescope.lua ⋮  keymap     = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\telescope.lua ⋮    keymap = { builtin = { ["<C-d>"] = false } },
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\hide.lua ⋮  keymap   = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\hide.lua ⋮        opts.keymap.builtin["<Esc>"] = "hide"
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\hide.lua ⋮        -- While we can use `keymap.builtin.<esc>` (to hide) this is better
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\hide.lua ⋮        vim.keymap.set({ "t", "n" }, "<Esc>", function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\hide.lua ⋮      opts.keymap.fzf.resize = "transform:" .. shell.raw_action(function(_, _, _)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\profiles\fzf-vim.lua ⋮  keymap = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\config\mapping.lua ⋮local keymap = require('cmp.utils.keymap')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\config\mapping.lua ⋮    normalized_base[keymap.normalize(k)] = v
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\config\mapping.lua ⋮    normalized_override[keymap.normalize(k)] = v
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-cmp\lua\cmp\config\mapping.lua ⋮      local map = {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\previewer\builtin.lua ⋮    local map = {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\previewer\builtin.lua ⋮  vim.keymap.set("", "i", function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\previewer\builtin.lua ⋮  if entry.vmap then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\previewer\builtin.lua ⋮    -- keymap is vimL, there is no source file info
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\previewer\builtin.lua ⋮    local lines = utils.strsplit(entry.vmap:match("[^%s]+$"), "\n")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\path.lua ⋮  local mode, keymap = string.match(str, "^(.-)│(.-)│")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\path.lua ⋮  if not mode or not keymap then return {} end
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\path.lua ⋮  mode, keymap = vim.trim(mode), vim.trim(keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\path.lua ⋮  local out, vmap, cmd = nil, nil, string.format("verbose %smap %s", mode, keymap)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\path.lua ⋮    _, vmap = next(vim.tbl_map(function(x) return #x > 0 and x or nil end, out))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\path.lua ⋮    if out[i]:match(utils.lua_regex_escape(keymap)) then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\path.lua ⋮  return entry and M.entry_to_file(entry, opts) or { mode = mode, key = keymap, vmap = vmap } or {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\fzf.lua ⋮    -- versions (not perfect could still hang) we map <C-c> to <Esc> locally
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\fzf.lua ⋮      vim.keymap.set("t", "<C-c>", "<Esc>", { buffer = 0 })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\defaults.lua ⋮  keymap        = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮  opts.keymap = opts.keymap or {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮  opts.keymap.fzf = opts.keymap.fzf or {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮    if opts.actions[k] == nil and (opts.keymap.fzf[k] == nil or opts.keymap.fzf[k] == "abort")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮      utils.map_set(opts, "keymap.fzf.zero", previewer:zero())
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮  local binds = opts.keymap.fzf
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮      opts.keymap.fzf[k] = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮  opts.keymap.fzf.load = (function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮    -- setup({ keymap = { fzf = { true, load = function() _G._fzf_load_called = true end } } }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮    if type(opts.keymap.fzf.load) == "function" then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮      opts.keymap.fzf.load = "execute-silent:" ..
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮          shell.raw_action(opts.keymap.fzf.load, nil, opts.debug)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮    if rebind and type(opts.keymap.fzf.load) == "string" then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮      return string.format("%s+%s", rebind, opts.keymap.fzf.load)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮      return rebind or opts.keymap.fzf.load
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\core.lua ⋮      opts.keymap.fzf[k] = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮    elseif index == "keymap" then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮  opts.keymap = keymap_tolower(eval(opts.keymap, opts), exclude_case_sensitive_alt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮  globals.keymap = keymap_tolower(eval(globals.keymap, opts), exclude_case_sensitive_alt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮    "winopts", "keymap", "fzf_opts", "fzf_colors", "fzf_tmux_opts", "hls"
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮  [actions.keymap_apply]         = "keymap-apply",
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮  [actions.keymap_edit]          = "keymap-edit",
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮  [actions.keymap_split]         = "keymap-split",
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮  [actions.keymap_vsplit]        = "keymap-vsplit",
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\config.lua ⋮  [actions.keymap_tabedit]       = "keymap-tabedit",
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\cmd.lua ⋮    keymap   = false,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\actions.lua ⋮    --   keymap = { fzf = { ["backward-eof"] = "print(_myaction)+accept" } },
C:\Users\jnbh\AppData\Local\nvim-data\lazy\fzf-lua\lua\fzf-lua\actions.lua ⋮  -- extract lhs in the keymap. The lhs can't contain a whitespace.
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit.lua ⋮--   vim.keymap.set('n', '<leader>gcc', neogit.action('commit', 'commit', { '--verbose', '--all' }))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\plenary.nvim\lua\plenary\popup\init.lua ⋮      { noremap = true }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\plenary.nvim\lua\plenary\iterators.lua ⋮  local map = {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\popups\help\actions.lua ⋮    local keymap = status_mappings[cmd]
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\popups\help\actions.lua ⋮    if not keymap or keymap == "<nop>" then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\popups\help\actions.lua ⋮      keymap = popup_mappings[cmd]
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\popups\help\actions.lua ⋮    if type(keymap) == "table" and next(keymap) then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\popups\help\actions.lua ⋮      return { { name = name, keys = keymap, cmp = table.concat(keymap):lower(), fn = fn } }
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\vcs\flag_option.lua ⋮---@field keymap string
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\vcs\flag_option.lua ⋮---@field keymap string
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\vcs\flag_option.lua ⋮---@param keymap string
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\vcs\flag_option.lua ⋮function FlagOption:init(keymap, flag_name, desc, opt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\vcs\flag_option.lua ⋮  self.keymap = keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\vcs\file.lua ⋮        vim.keymap.set(mapping[1], mapping[2], mapping[3], map_opt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\ui\panels\help_panel.lua ⋮    vim.keymap.set(mapping[1], mapping[2], mapping[3], map_opt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\ui\panels\help_panel.lua ⋮  vim.keymap.set("n", "<cr>", function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\ui\panels\help_panel.lua ⋮      utils.err(("help_panel :: Unknown keymap group '%s'!"):format(group))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\lib\record.lua ⋮local map = vim.tbl_map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\lib\popup\ui.lua ⋮local map = util.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\scene\views\file_history\render.lua ⋮      comp:add_text(" " .. option.keymap .. " ", "DiffviewSecondary")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\scene\views\file_history\render.lua ⋮      comp:add_text(" " .. option.keymap .. " ", "DiffviewSecondary")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\scene\views\file_history\option_panel.lua ⋮    vim.keymap.set(mapping[1], mapping[2], mapping[3], opt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\scene\views\file_history\option_panel.lua ⋮      vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\scene\views\file_history\option_panel.lua ⋮        v.keymap,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\scene\views\file_history\file_history_panel.lua ⋮    vim.keymap.set(mapping[1], mapping[2], mapping[3], opt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\scene\views\diff\file_panel.lua ⋮    vim.keymap.set(mapping[1], mapping[2], mapping[3], opt)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\lib\git\log.lua ⋮    local map = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\lib\buffer.lua ⋮      vim.keymap.set("n", key, fn, opts)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\lib\buffer.lua ⋮          vim.keymap.set(mode, k, fn, opts)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\tests\manual_progress.lua ⋮vim.keymap.set("n", "R", function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\buffers\status\ui.lua ⋮local map = util.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\config.lua ⋮  for name, keymap in pairs(M._config.keymaps) do
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\config.lua ⋮    if type(name) == "string" and type(keymap) == "table" then
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\config.lua ⋮        keymap,
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\arg_parser.lua ⋮  self.map = {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\diffview.nvim\lua\diffview\arg_parser.lua ⋮    self.map[#self.map + 1] = flag
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\plugin\Comment.lua ⋮local K = vim.keymap.set
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\plugin\Comment.lua ⋮---    vim.keymap.set('n', 'gcc', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\plugin\Comment.lua ⋮---    vim.keymap.set('n', 'gc', '<Plug>(comment_toggle_linewise)')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\plugin\Comment.lua ⋮---    vim.keymap.set('x', 'gc', '<Plug>(comment_toggle_linewise_visual)')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\buffers\git_command_history.lua ⋮local map = util.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\progress.lua ⋮  vim.keymap.set("n", "c", cancel, { buffer = self.bufnr, nowait = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\progress.lua ⋮  vim.keymap.set("n", "C", cancel, { buffer = self.bufnr, nowait = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\progress.lua ⋮  vim.keymap.set("n", "m", minimize, { buffer = self.bufnr, nowait = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\progress.lua ⋮  vim.keymap.set("n", "M", minimize, { buffer = self.bufnr, nowait = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\confirmation.lua ⋮  -- We used to use [C]ancel to cancel, so preserve the old keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\confirmation.lua ⋮    vim.keymap.set("n", cancel_key, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\confirmation.lua ⋮  -- We used to use [O]k to confirm, so preserve the old keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\mutator\confirmation.lua ⋮    vim.keymap.set("n", confirm_key, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\keymap_util.lua ⋮    -- We support passing in a `callback` key, or using the 1 index as the rhs of the keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\keymap_util.lua ⋮    -- remove all the keys that we can't pass as options to `vim.keymap.set`
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\keymap_util.lua ⋮      vim.keymap.set(mode or "", k, rhs, vim.tbl_extend("keep", { buffer = bufnr }, opts))
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\keymap_util.lua ⋮  vim.keymap.set("n", "q", "<cmd>close<CR>", { buffer = bufnr })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\keymap_util.lua ⋮  vim.keymap.set("n", "<c-c>", "<cmd>close<CR>", { buffer = bufnr })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\config.lua ⋮  -- Keymaps in oil buffer. Can be any value that `vim.keymap.set` accepts OR a table of keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\config.lua ⋮  -- Set to `false` to remove a keymap
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\config.lua ⋮    -- We don't want to deep merge the keymaps, we want any keymap defined by the user to override
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\buffers\diff\ui.lua ⋮local map = util.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\buffers\common.lua ⋮local map = util.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\init.lua ⋮        local K = vim.keymap.set
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set('n', '<C-_>', api.toggle.linewise.current)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set('n', '<C-\\>', api.toggle.blockwise.current)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set('x', '<leader>c', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set('x', '<leader>b', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set('x', '<leader>c', function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\Comment.nvim\lua\Comment\api.lua ⋮---vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\neogit\lua\neogit\buffers\commit_view\ui.lua ⋮local map = util.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\oil.nvim\lua\oil\adapters\ssh.lua ⋮    vim.keymap.set("n", "gf", M.goto_file, { buffer = bufnr })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\cmp-treesitter\lua\cmp_treesitter\lru.lua ⋮  local map = {}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\mason.nvim\tests\mason-core\ui_spec.lua ⋮            local set_keymap = spy.on(vim.keymap, "set")
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-treesitter\scripts\format-queries.lua ⋮  local map = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\bufferline.nvim\lua\bufferline\hover.lua ⋮local fn, api, map = vim.fn, vim.api, vim.keymap.set
C:\Users\jnbh\AppData\Local\nvim-data\lazy\bufferline.nvim\lua\bufferline\config.lua ⋮---@param map {[string]: {fg: string, bg: string}}
C:\Users\jnbh\AppData\Local\nvim-data\lazy\boole.nvim\lua\boole.lua ⋮        vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\boole.nvim\lua\boole.lua ⋮        vim.keymap.set(
C:\Users\jnbh\AppData\Local\nvim-data\lazy\mason.nvim\lua\mason-core\ui\init.lua ⋮---@param key string The keymap to register to. Example: "<CR>".
C:\Users\jnbh\AppData\Local\nvim-data\lazy\mason.nvim\lua\mason-core\ui\init.lua ⋮---@param effect string The effect to call when keymap is triggered by the user.
C:\Users\jnbh\AppData\Local\nvim-data\lazy\mason.nvim\lua\mason-core\ui\display.lua ⋮                vim.keymap.set("n", keybind.key, function()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-treesitter\lua\nvim-treesitter\indent.lua ⋮  local map = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-treesitter\lua\nvim-treesitter\incremental_selection.lua ⋮        vim.keymap.set(mode, mapping, rhs, { buffer = bufnr, silent = true, desc = FUNCTION_DESCRIPTIONS[funcname] })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\nvim-treesitter\lua\nvim-treesitter\incremental_selection.lua ⋮      local ok, err = pcall(vim.keymap.del, mode, mapping, { buffer = bufnr })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\mason.nvim\lua\mason-core\functional\list.lua ⋮_.map = fun.curryN(vim.tbl_map, 2)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\mason.nvim\lua\mason-core\functional\init.lua ⋮_.map = list.map
C:\Users\jnbh\AppData\Local\nvim-data\lazy\LuaSnip\tests\integration\select_spec.lua ⋮			vim.keymap.set({"x"}, "p", ls.select_keys, {silent = true})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\LuaSnip\tests\integration\select_spec.lua ⋮			vim.keymap.set({"x"}, "p", ls.cut_keys, {silent = true})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\LuaSnip\tests\integration\select_spec.lua ⋮			vim.keymap.set({"x"}, "y", [[<Esc><cmd>lua ls.pre_yank("d")<cr>gv"dy<cmd>lua ls.post_yank("d")<cr>]], {silent = true})
C:\Users\jnbh\AppData\Local\nvim-data\lazy\LuaSnip\plugin\luasnip.lua ⋮	vim.keymap.set(mode, lhs, rhs, { silent = true, desc = desc or "" })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\LuaSnip\lua\luasnip\config.lua ⋮					[[xnoremap <silent>  %s  %s]],
C:\Users\jnbh\AppData\Local\nvim-data\lazy\LuaSnip\Examples\snippets.lua ⋮	-- SELECT_RAW or TM_SELECTED_TEXT (mapped via xmap).
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\test\minimal_test.lua ⋮vim.keymap.set('n', 'gd', '<cmd>Lspsaga peek_definition<CR>')
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\codeaction\init.lua ⋮    vim.keymap.set(mode, key, action, options)
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\callhierarchy.lua ⋮function ch:keymap()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\callhierarchy.lua ⋮      self:keymap()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\layout\float.lua ⋮      map = border_map()[ui.border]
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\layout\float.lua ⋮      map = ui.border_sep
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\layout\float.lua ⋮      map = border_map()['solid']
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\util.lua ⋮  opts.noremap = true
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\typehierarchy.lua ⋮function ch:keymap()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\typehierarchy.lua ⋮      self:keymap()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lualine.nvim\lua\lualine\utils\notices.lua ⋮  vim.api.nvim_buf_set_keymap(bufnr, 'n', 'q', '<Cmd>bd<CR>', { noremap = true, silent = true })
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lualine.nvim\lua\lualine\utils\mode.lua ⋮Mode.map = {
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\symbol\outline.lua ⋮function ot:keymap()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\lspsaga.nvim\lua\lspsaga\symbol\outline.lua ⋮  self:keymap()
C:\Users\jnbh\AppData\Local\nvim-data\lazy\LuaSnip\lua\luasnip\extras\_lambda.lua ⋮local map = vim.tbl_map

