" Joseph Harriott - Tue 30 Aug 2022
" ---------------------------------

" $vimfiles/plugin/plugin.vim
" here I have things that I might, rarely, want to comment out
" keep this file in your plugin directory so's it's automatically sourced at startup

function! UnComment()
  " set filetype=
  " normal Vip<Esc>
  normal Vip
  " normal <Esc>
  escape
  '<,'>s/%/‚Äª/
  " s/%/‚Äª/
  " set filetype=tex
endfunction

""> buffer - finish a Git commit message
autocmd BufRead,BufNewFile /.git/COMMIT_EDITMSG/ nnoremap <F4> :wa<CR>:q<CR>
autocmd BufRead,BufNewFile /.git/COMMIT_EDITMSG/ inoremap <F4> <Esc>:wa<CR>:q<CR>

""> buffer - nnn temporary files
" clear nnn selections:
autocmd BufRead,BufNewFile /tmp/.nnn* nnoremap <buffer> <C-e> ggVGd:wq <CR>

" finish an nnn file rename:
autocmd BufRead,BufNewFile /tmp/.nnn* nnoremap <F4> :wa<CR>:q<CR>
autocmd BufRead,BufNewFile /tmp/.nnn* inoremap <F4> <Esc>:wa<CR>:q<CR>

""> buffer - packing msgFilterRules.dat
" These hooks aren't in an  ftplugin/dat.vim  because there's no such default filetype.

" pack msgFilterRules.dat "name" lines:
autocmd BufRead,BufNewFile *msgFilterRules.dat nnoremap <buffer> <F12> :%s#^name="\v(.*$)\n(^.*$)\n(^.*$)\n(^.*$)\n(^.*$)\n(^.*$)#name="\1‚ñë\2‚ñë\3‚ñë\4‚ñë\5‚ñë\6#g <bar> nohlsearch <CR>
" unpack msgFilterRules.dat "name" lines:
autocmd BufRead,BufNewFile *msgFilterRules.dat nnoremap <buffer> <S-F12> :%s#^name="\v(.*)‚ñë(.*)‚ñë(.*)‚ñë(.*)‚ñë(.*)‚ñë(.*)$#name="\1\r\2\r\3\r\4\r\5\r\6#g<CR>

""> buffer - refresh
" writes all changed buffers and reloads the current one
nnoremap <F5> :wa<CR>:edit<CR>
inoremap <F5> <Esc>:wa<CR>:e<CR>
vnoremap <F5> <Esc>:wa<CR>:e<CR>

""> buffer - split window to a buffer
nnoremap <leader>sb :buffers<CR>:sbuffer<Space>

""> clear registers b-z
command! WipeReg for i in range(98,122) | silent! call setreg(nr2char(i), []) | endfor

""> easy q macro
noremap Q @q

" qq  starts recording
" end recording in normal/visual with q
" (:reg q  shows what's been saved)
" [count]Q plays back

""> format - clear fancy glyphs
" - left & right double & single quotes (as these aren't mapped to a keyboard key)
"   en dash, which can be copied from websites
"   more...
if v:lang =~ 'fr'
  " AZERTY
  nnoremap <leader>√© :call ClearFancyGlyphs()<cr>
else
  nnoremap <leader>2 :call ClearFancyGlyphs()<cr>
endif
function! ClearFancyGlyphs()
  " nuls
  :sil!%s/¬†/ /g
  :sil!%s/‚Äã//g
  :sil!%s/‚Äå//g
  :sil!%s/‚Äç//g
  :sil!%s/‚Äé//g
  :sil!%s/‚Äè//g
  " punctuations
  :sil!%s/¬¥/'/g
  :sil!%s/ÀÆ/"/g
  :sil!%s/[‡∏Å-‡πõ]/-/g  " Thai characters
  :sil!%s/‚Äú/"/g
  :sil!%s/‚Äù/"/g
  :sil!%s/‚Ä≥/"/g
  :sil!%s/ÔºÇ/"/g
  :sil!%s/ ª/'/g
  :sil!%s/‚Äò/'/g
  :sil!%s/‚Äô/'/g
  :sil!%s/‚Äë/-/g
  :sil!%s/‚Äì/-/g
  :sil!%s/‚Äî/-/g
  :sil!%s/‚Äï/-/g
  :sil!%s/‚Äê/-/g
  :sil!%s/¬≠//g  " remove soft hyphen
  :sil!%s/‚Ä¶/.../g
  :sil!%s/Ôºå/,/g
  :sil!%s/Ôºö/:/g
  :sil!%s/Ôºü/?/g
  " various
  :sil!%s/‚îÇ/|/g
  :sil!%s/‚ü®/</g
  :sil!%s/‚ü©/>/g
  :sil!%s/‚Üí/-->/g
  :sil!%s/‚ßπ/\\/g  " normalise big backslash
endfunction

""> format - clear mathematical alphanumeric symbols
nnoremap <leader><leader>2 :call ClearMAS()<cr>
function! ClearMAS()
  :sil!s/\vùêÄ|ùê¥|ùë®|ùñ†|ùóî|ùòà|ùòº|ùíú|ùìê|ùîÑ|ùï¨|ùô∞|ùî∏/A/g
  :sil!s/\vùêÅ|ùêµ|ùë©|ùñ°|ùóï|ùòâ|ùòΩ|‚Ñ¨|ùìë|ùîÖ|ùï≠|ùô±|ùîπ/B/g
  :sil!s/\vùêÇ|ùê∂|ùë™|ùñ¢|ùóñ|ùòä|ùòæ|ùíû|ùìí|‚Ñ≠|ùïÆ|ùô≤|‚ÑÇ/C/g
  :sil!s/\vùêÉ|ùê∑|ùë´|ùñ£|ùóó|ùòã|ùòø|ùíü|ùìì|ùîá|ùïØ|ùô≥|ùîª/D/g
  :sil!s/\vùêÑ|ùê∏|ùë¨|ùñ§|ùóò|ùòå|ùôÄ|‚Ñ∞|ùìî|ùîà|ùï∞|ùô¥|ùîº/E/g
  :sil!s/\vùêÖ|ùêπ|ùë≠|ùñ•|ùóô|ùòç|ùôÅ|‚Ñ±|ùìï|ùîâ|ùï±|ùôµ|ùîΩ/F/g
  :sil!s/\vùêÜ|ùê∫|ùëÆ|ùñ¶|ùóö|ùòé|ùôÇ|ùí¢|ùìñ|ùîä|ùï≤|ùô∂|ùîæ/G/g
  :sil!s/\vùêá|ùêª|ùëØ|ùñß|ùóõ|ùòè|ùôÉ|‚Ñã|ùìó|‚Ñå|ùï≥|ùô∑|‚Ñç/H/g
  :sil!s/\vùêà|ùêº|ùë∞|ùñ®|ùóú|ùòê|ùôÑ|‚Ñê|ùìò|‚Ñë|ùï¥|ùô∏|ùïÄ/I/g
  :sil!s/\vùêâ|ùêΩ|ùë±|ùñ©|ùóù|ùòë|ùôÖ|ùí•|ùìô|ùîç|ùïµ|ùôπ|ùïÅ/J/g
  :sil!s/\vùêä|ùêæ|ùë≤|ùñ™|ùóû|ùòí|ùôÜ|ùí¶|ùìö|ùîé|ùï∂|ùô∫|ùïÇ/K/g
  :sil!s/\vùêã|ùêø|ùë≥|ùñ´|ùóü|ùòì|ùôá|‚Ñí|ùìõ|ùîè|ùï∑|ùôª|ùïÉ/L/g
  :sil!s/\vùêå|ùëÄ|ùë¥|ùñ¨|ùó†|ùòî|ùôà|‚Ñ≥|ùìú|ùîê|ùï∏|ùôº|ùïÑ/M/g
  :sil!s/\vùêç|ùëÅ|ùëµ|ùñ≠|ùó°|ùòï|ùôâ|ùí©|ùìù|ùîë|ùïπ|ùôΩ|‚Ñï/N/g
  :sil!s/\vùêé|ùëÇ|ùë∂|ùñÆ|ùó¢|ùòñ|ùôä|ùí™|ùìû|ùîí|ùï∫|ùôæ|ùïÜ/O/g
  :sil!s/\vùêè|ùëÉ|ùë∑|ùñØ|ùó£|ùòó|ùôã|ùí´|ùìü|ùîì|ùïª|ùôø|‚Ñô/P/g
  :sil!s/\vùêê|ùëÑ|ùë∏|ùñ∞|ùó§|ùòò|ùôå|ùí¨|ùì†|ùîî|ùïº|ùöÄ|‚Ñö/Q/g
  :sil!s/\vùêë|ùëÖ|ùëπ|ùñ±|ùó•|ùòô|ùôç|‚Ñõ|ùì°|‚Ñú|ùïΩ|ùöÅ|‚Ñù/R/g
  :sil!s/\vùêí|ùëÜ|ùë∫|ùñ≤|ùó¶|ùòö|ùôé|ùíÆ|ùì¢|ùîñ|ùïæ|ùöÇ|ùïä/S/g
  :sil!s/\vùêì|ùëá|ùëª|ùñ≥|ùóß|ùòõ|ùôè|ùíØ|ùì£|ùîó|ùïø|ùöÉ|ùïã/T/g
  :sil!s/\vùêî|ùëà|ùëº|ùñ¥|ùó®|ùòú|ùôê|ùí∞|ùì§|ùîò|ùñÄ|ùöÑ|ùïå/U/g
  :sil!s/\vùêï|ùëâ|ùëΩ|ùñµ|ùó©|ùòù|ùôë|ùí±|ùì•|ùîô|ùñÅ|ùöÖ|ùïç/V/g
  :sil!s/\vùêñ|ùëä|ùëæ|ùñ∂|ùó™|ùòû|ùôí|ùí≤|ùì¶|ùîö|ùñÇ|ùöÜ|ùïé/W/g
  :sil!s/\vùêó|ùëã|ùëø|ùñ∑|ùó´|ùòü|ùôì|ùí≥|ùìß|ùîõ|ùñÉ|ùöá|ùïè/X/g
  :sil!s/\vùêò|ùëå|ùíÄ|ùñ∏|ùó¨|ùò†|ùôî|ùí¥|ùì®|ùîú|ùñÑ|ùöà|ùïê/Y/g
  :sil!s/\vùêô|ùëç|ùíÅ|ùñπ|ùó≠|ùò°|ùôï|ùíµ|ùì©|‚Ñ®|ùñÖ|ùöâ|‚Ñ§/Z/g
  :sil!s/\vùêö|ùëé|ùíÇ|ùñ∫|ùóÆ|ùò¢|ùôñ|ùí∂|ùì™|ùîû|ùñÜ|ùöä|ùïí/a/g
  :sil!s/\vùêõ|ùëè|ùíÉ|ùñª|ùóØ|ùò£|ùôó|ùí∑|ùì´|ùîü|ùñá|ùöã|ùïì/b/g
  :sil!s/\vùêú|ùëê|ùíÑ|ùñº|ùó∞|ùò§|ùôò|ùí∏|ùì¨|ùî†|ùñà|ùöå|ùïî/c/g
  :sil!s/\vùêù|ùëë|ùíÖ|ùñΩ|ùó±|ùò•|ùôô|ùíπ|ùì≠|ùî°|ùñâ|ùöç|ùïï/d/g
  :sil!s/\vùêû|ùëí|ùíÜ|ùñæ|ùó≤|ùò¶|ùôö|‚ÑØ|ùìÆ|ùî¢|ùñä|ùöé|ùïñ/e/g
  :sil!s/\vùêü|ùëì|ùíá|ùñø|ùó≥|ùòß|ùôõ|ùíª|ùìØ|ùî£|ùñã|ùöè|ùïó/f/g
  :sil!s/\vùê†|ùëî|ùíà|ùóÄ|ùó¥|ùò®|ùôú|‚Ñä|ùì∞|ùî§|ùñå|ùöê|ùïò/g/g
  :sil!s/\vùê°|‚Ñé|ùíâ|ùóÅ|ùóµ|ùò©|ùôù|ùíΩ|ùì±|ùî•|ùñç|ùöë|ùïô/h/g
  :sil!s/\vùê¢|ùëñ|ùíä|ùóÇ|ùó∂|ùò™|ùôû|ùíæ|ùì≤|ùî¶|ùñé|ùöí|ùïö/i/g
  :sil!s/\vùê£|ùëó|ùíã|ùóÉ|ùó∑|ùò´|ùôü|ùíø|ùì≥|ùîß|ùñè|ùöì|ùïõ/j/g
  :sil!s/\vùê§|ùëò|ùíå|ùóÑ|ùó∏|ùò¨|ùô†|ùìÄ|ùì¥|ùî®|ùñê|ùöî|ùïú/k/g
  :sil!s/\vùê•|ùëô|ùíç|ùóÖ|ùóπ|ùò≠|ùô°|ùìÅ|ùìµ|ùî©|ùñë|ùöï|ùïù/l/g
  :sil!s/\vùê¶|ùëö|ùíé|ùóÜ|ùó∫|ùòÆ|ùô¢|ùìÇ|ùì∂|ùî™|ùñí|ùöñ|ùïû/m/g
  :sil!s/\vùêß|ùëõ|ùíè|ùóá|ùóª|ùòØ|ùô£|ùìÉ|ùì∑|ùî´|ùñì|ùöó|ùïü/n/g
  :sil!s/\vùê®|ùëú|ùíê|ùóà|ùóº|ùò∞|ùô§|‚Ñ¥|ùì∏|ùî¨|ùñî|ùöò|ùï†/o/g
  :sil!s/\vùê©|ùëù|ùíë|ùóâ|ùóΩ|ùò±|ùô•|ùìÖ|ùìπ|ùî≠|ùñï|ùöô|ùï°/p/g
  :sil!s/\vùê™|ùëû|ùíí|ùóä|ùóæ|ùò≤|ùô¶|ùìÜ|ùì∫|ùîÆ|ùññ|ùöö|ùï¢/q/g
  :sil!s/\vùê´|ùëü|ùíì|ùóã|ùóø|ùò≥|ùôß|ùìá|ùìª|ùîØ|ùñó|ùöõ|ùï£/r/g
  :sil!s/\vùê¨|ùë†|ùíî|ùóå|ùòÄ|ùò¥|ùô®|ùìà|ùìº|ùî∞|ùñò|ùöú|ùï§/s/g
  :sil!s/\vùê≠|ùë°|ùíï|ùóç|ùòÅ|ùòµ|ùô©|ùìâ|ùìΩ|ùî±|ùñô|ùöù|ùï•/t/g
  :sil!s/\vùêÆ|ùë¢|ùíñ|ùóé|ùòÇ|ùò∂|ùô™|ùìä|ùìæ|ùî≤|ùñö|ùöû|ùï¶/u/g
  :sil!s/\vùêØ|ùë£|ùíó|ùóè|ùòÉ|ùò∑|ùô´|ùìã|ùìø|ùî≥|ùñõ|ùöü|ùïß/v/g
  :sil!s/\vùê∞|ùë§|ùíò|ùóê|ùòÑ|ùò∏|ùô¨|ùìå|ùîÄ|ùî¥|ùñú|ùö†|ùï®/w/g
  :sil!s/\vùê±|ùë•|ùíô|ùóë|ùòÖ|ùòπ|ùô≠|ùìç|ùîÅ|ùîµ|ùñù|ùö°|ùï©/x/g
  :sil!s/\vùê≤|ùë¶|ùíö|ùóí|ùòÜ|ùò∫|ùôÆ|ùìé|ùîÇ|ùî∂|ùñû|ùö¢|ùï™/y/g
  :sil!s/\vùê≥|ùëß|ùíõ|ùóì|ùòá|ùòª|ùôØ|ùìè|ùîÉ|ùî∑|ùñü|ùö£|ùï´/z/g
endfunction

""> format - date abbreviations
iabbrev <expr> d8- strftime("%y-%m-%d")
iabbrev <expr> d8a strftime("%Y-%m-%d-%a")
iabbrev <expr> d8c strftime("%y%m%d")
iabbrev <expr> d8d strftime("%a %d %b %Y")
iabbrev <expr> d8l strftime("%Hh%M %a %d %b %Y")
iabbrev <expr> d8m strftime("%y%m%d-%Hh%Mm")
iabbrev <expr> d8p strftime("%Y-%m-%d %H:%M")
iabbrev <expr> d8s strftime("%d/%m/%y")
iabbrev <expr> d8t strftime("%y%m%d(%Hh%Mm%S)")

""> format - date in French
if has('unix')
  noremap <leader>yp :lan fr_FR.UTF-8<CR>:pu=strftime('%A %d %b %Y')<CR>:lan en_GB.UTF-8<CR>
elseif has('win32')
  noremap <leader>yp :lan tim French<CR>:pu=strftime('%A %d %b %Y')<CR>:lan tim English_United Kingdom<CR>
endif

""> format - capitalised last entered letter
" useful for AZERTY - particularly accented letters
if v:lang=~'fr'|inoremap ¬≤ <Esc>~a|endif

""> format - strip Thunderbird address book csv down to just emails
" decorations:  >, .\{-} <

function! TbCsv()
  normal vip
  '<,'>s/^\(.\{-},\)\{,4}/
  '<,'>s/,.*/
endfunction

""> format - percent code
" convert url parenthesis, and various diacritics to percent code
" to switch the order of these substitutions, use  s#/\(.\{-}\)/\(.\{-}\)/#/\2/\1/#g

"">> from
" 9 here means convert back to parentheses (eg for a quoted url in tex):
nnoremap <leader>9 :call PercentUnicode()<cr>
function! PercentUnicode()
    :keepp s/%26/\&/eg
    :keepp s/%27/'/eg
    :keepp s/%28/(/e
    :keepp s/%29/)/e
    :keepp s/%C3%82/√Ç/eg
    :keepp s/%C3%A0/√†/eg
    :keepp s/%C3%A2/√¢/eg
    :keepp s/%C3%A4/√§/eg
    :keepp s/%C3%A3/√£/eg
    :keepp s/%C4%81/ƒÅ/eg
    :keepp s/%C2%BA/¬∫/eg
    :keepp s/%C3%98/√ò/eg
    :keepp s/%C3%A7/√ß/eg
    :keepp s/%C3%A8/√®/eg
    :keepp s/%C3%A9/√©/eg
    :keepp s/%C3%AA/√™/eg
    :keepp s/%C3%8E/√é/eg
    :keepp s/%C3%AE/√Æ/eg
    :keepp s/%C3%B3/√≥/eg
    :keepp s/%C3%B4/√¥/eg
    :keepp s/%C3%B6/√∂/eg
    :keepp s/%C3%BB/√ª/eg
    :keepp s/%C3%BC/√º/eg
    :keepp s/%C4%B1/ƒ±/eg
    :keepp s/%C5%81/≈Å/eg
    :keepp s/%C5%84/≈Ñ/eg
    :keepp s/%C5%93/≈ì/eg
    :keepp s/%C5%AB/≈´/eg
    :keepp s/%E2%80%93/‚Äì/eg
    :keepp s/%E2%80%94/‚Äî/eg
endfunction
" if you need to work on a range, use  :<selection>call PercentUnicode()

"">> to
" 5 here means convert to % code (my general preference):
if v:lang =~ 'fr'
  " AZERTY
  nnoremap <leader>( :call UnicodePercent()<cr>
else
  nnoremap <leader>5 :call UnicodePercent()<cr>
endif
function! UnicodePercent()
    :keepp s/&/%26/eg
    :keepp s/'/%27/eg
    :keepp s/(/%28/e
    :keepp s/)/%29/e
    :keepp s/√Ç/%C3%82/eg
    :keepp s/√†/%C3%A0/eg
    :keepp s/√¢/%C3%A2/eg
    :keepp s/√§/%C3%A4/eg
    :keepp s/√£/%C3%A3/eg
    :keepp s/ƒÅ/%C4%81/eg
    :keepp s/¬∫/%C2%BA/eg
    :keepp s/√ò/%C3%98/eg
    :keepp s/√ß/%C3%A7/eg
    :keepp s/√®/%C3%A8/eg
    :keepp s/√©/%C3%A9/eg
    :keepp s/√™/%C3%AA/eg
    :keepp s/√é/%C3%8E/eg
    :keepp s/√Æ/%C3%AE/eg
    :keepp s/√≥/%C3%B3/eg
    :keepp s/√¥/%C3%B4/eg
    :keepp s/√∂/%C3%B6/eg
    :keepp s/√ª/%C3%BB/eg
    :keepp s/√º/%C3%BC/eg
    :keepp s/ƒ±/%C4%B1/eg
    :keepp s/≈Å/%C5%81/eg
    :keepp s/≈Ñ/%C5%84/eg
    :keepp s/≈ì/%C5%93/eg
    :keepp s/≈´/%C5%AB/eg
    :keepp s/‚Äì/%E2%80%93/eg
    :keepp s/‚Äî/%E2%80%94/eg
endfunction

""> format - remove square bracketed text
" as in Wikipedia articles
if v:lang =~ 'fr'
  nnoremap <leader><leader>( :s/\m\[.\{-}]//g<CR>
else
  nnoremap <leader>[ :s/\m\[.\{-}]//g<CR>
endif

""> format - TwiddleCase
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

""> format - underline
" (http://vim.wikia.com/wiki/Underline_using_dashes_automatically)
" eg :Underline ~+-  gives underlining like ~+-~+-~+-~+-~+-~+-
function! s:Underline(chars)
  let chars = empty(a:chars) ? '-' : a:chars
  let nr_columns = virtcol('$') - 1
  let uline = repeat(chars, (nr_columns / len(chars)) + 1)
  put =strpart(uline, 0, nr_columns)
endfunction
command! -nargs=? Underline call s:Underline(<q-args>)
" map:
nnoremap <leader>U :Underline

""> ft aesl - Thymio's Aseba code
" I suppose that sgml filetype might be more appropriate,
" but I use xml filetype because it has folding
autocmd BufNewFile,BufRead *.aesl setlocal filetype=xml

""> ft Emacs history
autocmd BufNewFile,BufRead ~/.emacs.d/history setlocal filetype=lisp

""> ft defaults
set shiftwidth=4
set tabstop=4
set textwidth=99

""> ft LaTeX syntax folding
" On before opening a buffer:
let g:tex_fold_enabled=1
" Check for Pandoc template:
autocmd BufReadPre *.cls,*.dtx,*.sty,*.tex,*.toc let b:PandocLaTeX = 0
autocmd BufReadPre *templates/*.latex let b:PandocLaTeX = 1

"">> md4pdfLog.tex
" turn off syntax folding for the long log files from md4pdf.ps1
autocmd BufNewFile,BufRead *-md4pdfLog.tex setlocal fdm=manual

""> ft vifm
autocmd BufNewFile,BufRead /usr/share/vifm/vifm-help.txt setlocal ft=man

""> ft vimscript
" lesser indentation of continuation line
let g:vim_indent_cont = &sw

""> ftplugin/xml.vim
" XML syntax folding on:
let g:xml_syntax_folding = 1

""> grab my settings
function! GrabWrite(toGrab)
  " only to be called from within a parent function that has just before opened an empty buffer
  silent execute 'Bufferize ' . a:toGrab
  blast
  normal! ggVGd
  bdelete
  blast
  normal! p
  write
endfunction

"">> called from  $vimfiles/grab/all.sh
function! GrabCommands()
  exe 'edit '.g:vimfiles.'/grabbed/commands.txt'
  normal! VGd
  call GrabWrite("command")
endfunction

function! GrabFnMaps()
  exe 'edit '.g:vimfiles.'/grabbed/FnMaps.txt'
  normal! ggVGd
  call GrabWrite("map|map!")
  v/<.\=.\=F.*>/d
  nohlsearch
  write
endfunction

function! GrabPlugMaps()
  exe 'edit '.g:vimfiles.'/grabbed/PlugMaps.txt'
  normal! ggVGd
  call GrabWrite("map|map!")
  v/<Plug>/d
  nohlsearch
  write
endfunction

" grab runtimepath
function! GrabRtp()
  exe 'edit '.g:vimfiles.'/grabbed/runtimepath.txt'
  normal! ggVGd
  call GrabWrite("echo &runtimepath")
  %s/,/\r/g
  nohlsearch
  write
endfunction

function! GrabScriptnames()
  exe 'edit '.g:vimfiles.'/grabbed/scriptnames-'.hostname().'.txt'
  normal! ggVGd
  call GrabWrite("scriptnames")
endfunction

function! GrabSimpleMaps()
  exe 'edit '.g:vimfiles.'/grabbed/simpleMaps.txt'
  normal! ggVGd
  call GrabWrite("map|map!")
  silent! exe 'g/<.\=.\=F.*>/d'
  silent! exe 'g/<Plug>/d'
  silent! exe 'g/<SNR>/d'
  g/¬†/d " non-breaking space
  nohlsearch
  write
endfunction

""> layout
" new buffer split vertically
nnoremap <leader>vn :vnew<CR>

""> clearmatches
" see  $jtCP/Vim/plugins/csv_vim-HiColumnLeaky/issue.md
inoremap <leader><f5> :call clearmatches()<cr>
nnoremap <leader><f5> :call clearmatches()<cr>

""> layout - tabline
" set showtabline=1
" because it's somehow sometimes set to 2
" overriden by  vim-airline  extension  tabline

""> layout - toggle centering current line
nnoremap <Leader>zz :let &scrolloff=999-&scrolloff<CR>

""> layout - toggle relativenumber
nnoremap <silent><leader>rn :set rnu! rnu? <CR>

""> maxmempattern
" set mmp=90000  " for $TeNo/TN/JH-DailyLife/Health/Ingest/Regimes.md
set mmp=800000
" set mmp=2000000  " = unlimited

""> neomutt
autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* setlocal textwidth=0

"">> quit safely when written
function! BackupQuit()
  wa
  " precautionary save, incase something goes wrong with the send:
  exec 'sav' $HOME.'/.cache/mutt/sends/'.strftime('%Y-%m-%d-%H:%M:%S').'.txt'
  q
endfunction
autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* nnoremap <buffer> <F4> :call BackupQuit()<CR>
autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* inoremap <buffer> <F4> <Esc>:call BackupQuit()<CR>

"">> overcome $VIMRUNTIME/filetype.vim
autocmd BufNewFile,BufRead muttrc-* setlocal filetype=neomuttrc
" required for  muttrc-gmx
" (see $DJH/technos/IT1/cross-platform/Vim/muttrc-123)

"">> tidy an inmail
" swap out any crap (and go back to top):
"  next line
    autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* silent! %s/¬Ö//g | go
"  non-breaking whitespaces
    autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* silent! %s/¬†/ /g | go
"  'private use one'
    autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* silent! %s/¬ë/'/g | go
"  'private use two'
    autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* silent! %s/¬í/'/g | go
"  unneeded blanks
    autocmd BufRead,BufNewFile ~/.cache/mutt/tmp/neomutt-* silent! %s/^> */>/g | go

""> neovim - DiffOrig
if has('nvim')
  command DiffOrig vert new | set buftype=nofile | read ++edit # | 0d_ | diffthis | wincmd p | diffthis
endif
""> neovim - quit fcrontab
if has('nvim')
  autocmd BufRead,BufNewFile fcr-* nnoremap <buffer> <F4> :call BackupQuit()<CR>
  autocmd BufRead,BufNewFile fcr-* inoremap <buffer> <F4> <Esc>:call BackupQuit()<CR>
endif

""> neovim - quit noname
if has('nvim')
  " for some edge cases
  function! QuitNoName()
    if len(getbufinfo({'buflisted':1})) == 1
      q!
    endif
  endfunction
  " noremap <F12> :call QuitNoName() <CR>
endif

""> searching - clear search highlights
nnoremap <leader>n :nohlsearch<CR>
vnoremap <leader>n <Esc>:nohlsearch<CR>

""> searching - get lower-case text of last search term in empty buffer
" for tweaking, eg "Find find in finding."
function! TweakLS()
  new
  normal! "/p
  sil! s/\\<//  " remove \<
  sil! s/\\>//  " remove \>
  normal! gue
endfunction
nnoremap <leader>/ :call TweakLS()<CR>

""> searching - grepping
" Strip the current selection & store it in the l then s register:
function! StripStoreCurSel()
  let l:lastvimsearch = getreg('/')
  " remove the '\V' (very nomagic) prefix, if it's there:
  let @l = substitute(l:lastvimsearch, "^\\\\V", "", "")
  " remove any leading hyphens that somehow cause chaos in Ggrep:
  let @h = substitute(@l, "^-\\+", "", "")
  " remove '\<' & '\>' (:s#\(^\\<\|\\>$\)##g):
  let @s = substitute(@h, "\\(^\\\\<\\|\\\\>$\\)", "", "g")
endfunction

" cd to file's and vimgrep for last search
nnoremap <leader>vg :call VimgrepSelection()<CR>
function! VimgrepSelection()
  cd %:p:h
  call StripStoreCurSel()
  let l:filetypes = '*.{cls,md,dw,sh,sty,tex,txt,vim}'
  execute 'silent! vimgrep #'.@l.'#j '.l:filetypes' **/'.l:filetypes
  copen
endfunction

" search in my QuickReference notes
nnoremap <leader><leader>q :call VimgrepQRs()<CR>
function! VimgrepQRs()
  call StripStoreCurSel()
  execute 'silent! vimgrep #'.@l.'#j '.$misc.'/CP/QR/*.md '.$misc.'/linux/QR/*.md '.$OSAB.'/QR.md'
  copen
endfunction

""> searching - incsearch
set incsearch
nnoremap <leader>is :call IncSearchToggle()<cr>
let g:incsearchSet = 1
function! IncSearchToggle()
  if g:incsearchSet
    set noincsearch
    let g:incsearchSet = 0
    echo 'noincsearch'
  else
    set incsearch
    let g:incsearchSet = 1
    echo 'incsearch'
  endif
endfunction

""> searching - parenthesis matching
if !exists("g:loaded_matchparen")
  autocmd VimEnter * NoMatchParen  "turn off parenthesis matching at start
endif
" and <leader>pt toggles it:
nnoremap <leader>pt :call ParenthsToggle()<cr>
let g:parenthesismatch = 0
function! ParenthsToggle()
  if g:parenthesismatch
    NoMatchParen
    let g:parenthesismatch = 0
    let g:parenthesismatch
  else
    DoMatchParen
    let g:parenthesismatch = 1
    let g:parenthesismatch
  endif
endfunction

""> searching - re-open the quickfix-window
" eg to look again at results of vimgrep
" noremap <leader>q :copen<CR>
" now using  ListToggle

""> searching - search within a visual selection
"  before calling this you need to search for something, then
"   either before or any number of times after calling this function,
"     you need to visually select an area
"   the search will appear highlighted only within your visual selections
"   next search returns to normal
function! ConvertSearchForVisualSelection()
  let @/ = '\%V'.getreg('/') " reassign the current search
  echo 'last search is now active only in your escaped visual selection'
endfunction
nnoremap <leader>vs :call ConvertSearchForVisualSelection()<CR>
vnoremap <leader>vs <Esc>:call ConvertSearchForVisualSelection()<CR>
" maybe should leverage  vis.vim

""> searching - select to end of line in unix
if has('unix')
  nnoremap <leader>v v$hy
endif

""> shell - filepath into register f
nnoremap <leader>f :let@f=@%<CR>

""> shell - last modification time
nnoremap <silent><leader><F11> :echo strftime('%c',getftime(expand('%')))<cr>
inoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>
vnoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>

""> shell - netrw
let g:netrw_banner = 0
let g:netrw_liststyle = 2
nnoremap <leader>- :Hexplore<cr>

""> shell - open in Emacs
nnoremap <S-F11> :call OpenInEmacs()<CR>
inoremap <S-F11> <Esc><S-F11>

""> shell - working directory to file's
nnoremap <leader>d :cd %:p:h<CR>:pwd<CR>

""> shell - write all changed buffers
nnoremap <F2> :wa<CR>
inoremap <F2> <Esc>:wa<CR>
vnoremap <F2> <Esc>:wa<CR>

""> shell - write & close buffer
nnoremap <F4> :wa<CR>:bd<CR>
inoremap <F4> <Esc>:wa<CR>:bd<CR>
vnoremap <F4> <Esc>:wa<CR>:bd<CR>

""> syntax sync fromstart
" highlighting sometimes disappears on some longer complex files after loading
"  long dw's
"  markdowns
"   $ITstack/unix_like-Android/phones.md
"   $TeNo/md-JH-DailyLife/roles/healing.md
"   my various  .../QR.md
nnoremap <S-F5> :syntax sync fromstart<CR>
inoremap <S-F5> <Esc><S-F5>

