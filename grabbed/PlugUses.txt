../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-*)   asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 1, 'is_whole' : 1})
../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-g*)  asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 1, 'is_whole' : 0})
../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-z*)  asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 0, 'is_whole' : 1})
../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-gz*) asterisk#do(mode(1), {'direction' : 1, 'do_jump' : 0, 'is_whole' : 0})
../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-#)   asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 1, 'is_whole' : 1})
../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-g#)  asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 1, 'is_whole' : 0})
../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-z#)  asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 0, 'is_whole' : 1})
../pack/packs-cp/opt/vim-asterisk/plugin/asterisk.vim:noremap <expr><silent> <Plug>(asterisk-gz#) asterisk#do(mode(1), {'direction' : 0, 'do_jump' : 0, 'is_whole' : 0})
../pack/packs-cp/opt/vim-asterisk/README.md:map *   <Plug>(asterisk-*)
../pack/packs-cp/opt/vim-asterisk/README.md:map #   <Plug>(asterisk-#)
../pack/packs-cp/opt/vim-asterisk/README.md:map g*  <Plug>(asterisk-g*)
../pack/packs-cp/opt/vim-asterisk/README.md:map g#  <Plug>(asterisk-g#)
../pack/packs-cp/opt/vim-asterisk/README.md:map z*  <Plug>(asterisk-z*)
../pack/packs-cp/opt/vim-asterisk/README.md:map gz* <Plug>(asterisk-gz*)
../pack/packs-cp/opt/vim-asterisk/README.md:map z#  <Plug>(asterisk-z#)
../pack/packs-cp/opt/vim-asterisk/README.md:map gz# <Plug>(asterisk-gz#)
../pack/packs-cp/opt/vim-asterisk/README.md:map *  <Plug>(asterisk-z*)
../pack/packs-cp/opt/vim-asterisk/README.md:map #  <Plug>(asterisk-z#)
../pack/packs-cp/opt/vim-asterisk/README.md:map g* <Plug>(asterisk-gz*)
../pack/packs-cp/opt/vim-asterisk/README.md:map g# <Plug>(asterisk-gz#)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map *   <Plug>(asterisk-*)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map #   <Plug>(asterisk-#)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map g*  <Plug>(asterisk-g*)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map g#  <Plug>(asterisk-g#)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map z*  <Plug>(asterisk-z*)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map gz* <Plug>(asterisk-gz*)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map z#  <Plug>(asterisk-z#)
../pack/packs-cp/opt/vim-asterisk/test/.themisrc:map gz# <Plug>(asterisk-gz#)
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-#)	asterisk.txt	/*<Plug>(asterisk-#)*
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-g#)	asterisk.txt	/*<Plug>(asterisk-g#)*
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-gstar)	asterisk.txt	/*<Plug>(asterisk-gstar)*
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-gz#)	asterisk.txt	/*<Plug>(asterisk-gz#)*
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-gzstar)	asterisk.txt	/*<Plug>(asterisk-gzstar)*
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-star)	asterisk.txt	/*<Plug>(asterisk-star)*
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-z#)	asterisk.txt	/*<Plug>(asterisk-z#)*
../pack/packs-cp/opt/vim-asterisk/doc/tags:<Plug>(asterisk-zstar)	asterisk.txt	/*<Plug>(asterisk-zstar)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		\     'mappings' : ['<Plug>(asterisk-']
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-*)  					*<Plug>(asterisk-star)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-#)     					*<Plug>(asterisk-#)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-g*) 					*<Plug>(asterisk-gstar)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-g#)    					*<Plug>(asterisk-g#)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-z*) 					*<Plug>(asterisk-zstar)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-z#)    					*<Plug>(asterisk-z#)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-gz*) 					*<Plug>(asterisk-gzstar)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:<Plug>(asterisk-gz#)   					*<Plug>(asterisk-gz#)*
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map *   <Plug>(asterisk-*)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map #   <Plug>(asterisk-#)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g*  <Plug>(asterisk-g*)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g#  <Plug>(asterisk-g#)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map z*  <Plug>(asterisk-z*)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map gz* <Plug>(asterisk-gz*)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map z#  <Plug>(asterisk-z#)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map gz# <Plug>(asterisk-gz#)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map *  <Plug>(asterisk-z*)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map #  <Plug>(asterisk-z#)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g* <Plug>(asterisk-gz*)
../pack/packs-cp/opt/vim-asterisk/doc/asterisk.txt:		map g# <Plug>(asterisk-gz#)
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzy-/) incsearch#go(<SID>config_fuzzy())
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzy-?) incsearch#go(<SID>config_fuzzy({'command': '?'}))
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzy-stay) incsearch#go(<SID>config_fuzzy({'is_stay': 1}))
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyword-/) incsearch#go(<SID>config_fuzzyword())
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyword-?) incsearch#go(<SID>config_fuzzyword({'command': '?'}))
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyword-stay) incsearch#go(<SID>config_fuzzyword({'is_stay': 1}))
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyspell-/) incsearch#go(<SID>config_fuzzyspell())
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyspell-?) incsearch#go(<SID>config_fuzzyspell({'command': '?'}))
../pack/packs-cp/opt/incsearch-fuzzy.vim/plugin/incsearch/fuzzy.vim:noremap <silent><expr> <Plug>(incsearch-fuzzyspell-stay) incsearch#go(<SID>config_fuzzyspell({'is_stay': 1}))
../pack/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z/ <Plug>(incsearch-fuzzy-/)
../pack/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z? <Plug>(incsearch-fuzzy-?)
../pack/packs-cp/opt/incsearch-fuzzy.vim/README.md:map zg/ <Plug>(incsearch-fuzzy-stay)
../pack/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z/ <Plug>(incsearch-fuzzyspell-/)
../pack/packs-cp/opt/incsearch-fuzzy.vim/README.md:map z? <Plug>(incsearch-fuzzyspell-?)
../pack/packs-cp/opt/incsearch-fuzzy.vim/README.md:map zg/ <Plug>(incsearch-fuzzyspell-stay)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-browser) :OpenURL <cfile><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-browser) :<C-U>OpenURL <C-R>=open_url#get_selection()<CR><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search) :OpenSearchURL <cword><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search) :<C-U>OpenSearchURL <C-R>=open_url#get_selection()<CR><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search-so) :OpenSearchURL so <cword><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search-so) :<C-U>OpenSearchURL so <C-R>=open_url#get_selection()<CR><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search-google) :OpenSearchURL google <cword><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search-google) :<C-U>OpenSearchURL google <C-R>=open_url#get_selection()<CR><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:nnoremap <Plug>(open-url-search-wikipedia) :OpenSearchURL wikipedia <cword><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:xnoremap <Plug>(open-url-search-wikipedia) :<C-U>OpenSearchURL wikipedia <C-R>=open_url#get_selection()<CR><CR>
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-browser)', 'n')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap gB <Plug>(open-url-browser)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-browser)', 'x')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap gB <Plug>(open-url-browser)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search)', 'n')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap g<CR> <Plug>(open-url-search)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search)', 'x')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap g<CR> <Plug>(open-url-search)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-wikipedia)', 'n')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap gW <Plug>(open-url-search-wikipedia)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-wikipedia)', 'x')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap gW <Plug>(open-url-search-wikipedia)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-google)', 'n')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    nmap gG <Plug>(open-url-search-google)
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:  if !hasmapto('<Plug>(open-url-search-google)', 'x')
../pack/packs-cp/opt/vim-open-url/plugin/open_url.vim:    xmap gG <Plug>(open-url-search-google)
../pack/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-browser)`
../pack/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search)`
../pack/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search-so)`
../pack/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search-google)`
../pack/packs-cp/opt/vim-open-url/README.md:* `<Plug>(open-url-search-wikipedia)`
../pack/packs-cp/opt/vim-open-url/README.md:remapping `<Plug>` mappings (Default: `1`)
../pack/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-browser)`
../pack/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search)`
../pack/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search-so)`        " Unmapped by default
../pack/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search-google)`
../pack/packs-cp/opt/vim-open-url/doc/open-url.txt:    `<Plug>(open-url-search-wikipedia)`
../pack/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:nnoremap <silent> <Plug>(dirvish_up) :<C-U>exe 'Dirvish %:p'.repeat(':h',v:count1)<CR>
../pack/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:nnoremap <silent> <Plug>(dirvish_split_up) :<C-U>exe 'split +Dirvish\ %:p'.repeat(':h',v:count1)<CR>
../pack/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:nnoremap <silent> <Plug>(dirvish_vsplit_up) :<C-U>exe 'vsplit +Dirvish\ %:p'.repeat(':h',v:count1)<CR>
../pack/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:if mapcheck('-', 'n') ==# '' && !hasmapto('<Plug>(dirvish_up)', 'n')
../pack/packs-cp/opt/vim-dirvish/plugin/dirvish.vim:  nmap - <Plug>(dirvish_up)
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:if !hasmapto('<Plug>(dirvish_quit)', 'n')
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> gq <Plug>(dirvish_quit)'
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:if !hasmapto('<Plug>(dirvish_arg)', 'n')
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> x <Plug>(dirvish_arg)'
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'xmap '.s:nowait.'<buffer> x <Plug>(dirvish_arg)'
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:if !hasmapto('<Plug>(dirvish_K)', 'n')
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> K <Plug>(dirvish_K)'
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'xmap '.s:nowait.'<buffer> K <Plug>(dirvish_K)'
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:nnoremap <buffer><silent> <Plug>(dirvish_up) :<C-U>exe "Dirvish %:h".repeat(":h",v:count1)<CR>
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:nnoremap <buffer><silent> <Plug>(dirvish_split_up) :<C-U>exe 'split +Dirvish\ %:h'.repeat(':h',v:count1)<CR>
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:nnoremap <buffer><silent> <Plug>(dirvish_vsplit_up) :<C-U>exe 'vsplit +Dirvish\ %:h'.repeat(':h',v:count1)<CR>
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:if !hasmapto('<Plug>(dirvish_up)', 'n')
../pack/packs-cp/opt/vim-dirvish/ftplugin/dirvish.vim:  execute 'nmap '.s:nowait.'<buffer> - <Plug>(dirvish_up)'
../pack/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:nnoremap <silent> <Plug>(dirvish_quit) :<C-U>call <SID>buf_close()<CR>
../pack/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:nnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args([getline('.')])<CR>
../pack/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:xnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args(getline("'<", "'>"))<CR>
../pack/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:nnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info([getline('.')],!!v:count)<CR>
../pack/packs-cp/opt/vim-dirvish/autoload/dirvish.vim:xnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info(getline("'<", "'>"),!!v:count)<CR>
../pack/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_up)
../pack/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_quit)
../pack/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_up)
../pack/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_split_up)
../pack/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_vsplit_up)
../pack/packs-cp/opt/vim-dirvish/doc/dirvish.txt:    <Plug>(dirvish_arg)
../pack/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG
../pack/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a
../pack/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv
../pack/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:        exe "silent! nmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
../pack/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:        exe "silent! imap <unique> ".a:mapActivation." <Plug>ToggleBackground"
../pack/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:        exe "silent! vmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
../pack/packs-cp/opt/vim-colors-tomorrow/autoload/togglebg.vim:if !exists("no_plugin_maps") && !hasmapto('<Plug>ToggleBackground')
../pack/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:nnoremap <unique> <script> <Plug>ToggleBackground <SID>TogBG
../pack/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:inoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>a
../pack/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:vnoremap <unique> <script> <Plug>ToggleBackground <ESC><SID>TogBG<ESC>gv
../pack/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:        exe "silent! nmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
../pack/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:        exe "silent! imap <unique> ".a:mapActivation." <Plug>ToggleBackground"
../pack/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:        exe "silent! vmap <unique> ".a:mapActivation." <Plug>ToggleBackground"
../pack/packs-cp/opt/vim-colors-solarized/autoload/togglebg.vim:if !exists("no_plugin_maps") && !hasmapto('<Plug>ToggleBackground')
../pack/packs-cp/opt/fern.vim/README.md:  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:select)   :<C-u>call <SID>call('diff', 'select', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:split)    :<C-u>call <SID>call('diff', 'split', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:vsplit)   :<C-u>call <SID>call('diff', 'vsplit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:tabedit)  :<C-u>call <SID>call('diff', 'tabedit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:above)    :<C-u>call <SID>call('diff', 'leftabove split', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:left)     :<C-u>call <SID>call('diff', 'leftabove vsplit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:below)    :<C-u>call <SID>call('diff', 'rightbelow split', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:right)    :<C-u>call <SID>call('diff', 'rightbelow vsplit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:top)      :<C-u>call <SID>call('diff', 'topleft split', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:leftest)  :<C-u>call <SID>call('diff', 'topleft vsplit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:bottom)   :<C-u>call <SID>call('diff', 'botright split', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:rightest) :<C-u>call <SID>call('diff', 'botright vsplit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-error)   :<C-u>call <SID>call('diff', 'edit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-split)   :<C-u>call <SID>call('diff', 'edit/split', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-vsplit)  :<C-u>call <SID>call('diff', 'edit/vsplit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-tabedit) :<C-u>call <SID>call('diff', 'edit/tabedit', v:false)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:select:vert)   :<C-u>call <SID>call('diff', 'select', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:split:vert)    :<C-u>call <SID>call('diff', 'split', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:vsplit:vert)   :<C-u>call <SID>call('diff', 'vsplit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:tabedit:vert)  :<C-u>call <SID>call('diff', 'tabedit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:above:vert)    :<C-u>call <SID>call('diff', 'leftabove split', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:left:vert)     :<C-u>call <SID>call('diff', 'leftabove vsplit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:below:vert)    :<C-u>call <SID>call('diff', 'rightbelow split', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:right:vert)    :<C-u>call <SID>call('diff', 'rightbelow vsplit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:top:vert)      :<C-u>call <SID>call('diff', 'topleft split', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:leftest:vert)  :<C-u>call <SID>call('diff', 'topleft vsplit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:bottom:vert)   :<C-u>call <SID>call('diff', 'botright split', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:rightest:vert) :<C-u>call <SID>call('diff', 'botright vsplit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-error:vert)   :<C-u>call <SID>call('diff', 'edit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-split:vert)   :<C-u>call <SID>call('diff', 'edit/split', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-vsplit:vert)  :<C-u>call <SID>call('diff', 'edit/vsplit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nnoremap <buffer><silent> <Plug>(fern-action-diff:edit-or-tabedit:vert) :<C-u>call <SID>call('diff', 'edit/tabedit', v:true)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \ <Plug>(fern-action-diff:side)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:left)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:right)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \ <Plug>(fern-action-diff:side:vert)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:left:vert)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:        \   "\<Plug>(fern-action-diff:right:vert)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff:edit) <Plug>(fern-action-diff:edit-or-error)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff:edit:vert) <Plug>(fern-action-diff:edit-or-error:vert)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff) <Plug>(fern-action-diff:edit)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/diff.vim:  nmap <buffer><silent> <Plug>(fern-action-diff:vert) <Plug>(fern-action-diff:edit:vert)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:select)   :<C-u>call <SID>call('open', 'select')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:split)    :<C-u>call <SID>call('open', 'split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:vsplit)   :<C-u>call <SID>call('open', 'vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:tabedit)  :<C-u>call <SID>call('open', 'tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:above)    :<C-u>call <SID>call('open', 'leftabove split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:left)     :<C-u>call <SID>call('open', 'leftabove vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:below)    :<C-u>call <SID>call('open', 'rightbelow split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:right)    :<C-u>call <SID>call('open', 'rightbelow vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:top)      :<C-u>call <SID>call('open', 'topleft split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:leftest)  :<C-u>call <SID>call('open', 'topleft vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:bottom)   :<C-u>call <SID>call('open', 'botright split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:rightest) :<C-u>call <SID>call('open', 'botright vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-error)   :<C-u>call <SID>call('open', 'edit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-split)   :<C-u>call <SID>call('open', 'edit/split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-vsplit)  :<C-u>call <SID>call('open', 'edit/vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:edit-or-tabedit) :<C-u>call <SID>call('open', 'edit/tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \ <Plug>(fern-action-open:side)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open:left)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open:right)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open:right)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \ <Plug>(fern-action-open-or-enter)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-enter)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \ <Plug>(fern-action-open-or-expand)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-open)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:        \   "\<Plug>(fern-action-expand)",
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nmap <buffer><silent> <Plug>(fern-action-open:edit) <Plug>(fern-action-open:edit-or-error)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:  nmap <buffer><silent> <Plug>(fern-action-open) <Plug>(fern-action-open:edit)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> <C-m> <Plug>(fern-action-open-or-enter)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> l <Plug>(fern-action-open-or-expand)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> s <Plug>(fern-action-open:select)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> e <Plug>(fern-action-open)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> E <Plug>(fern-action-open:side)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/open.vim:    nmap <buffer><nowait> t <Plug>(fern-action-open:tabedit)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-debug)         :<C-u>call <SID>call('debug')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reload:all)    :<C-u>call <SID>call('reload_all')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reload:cursor) :<C-u>call <SID>call('reload_cursor')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-expand:stay)   :<C-u>call <SID>call('expand_stay')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-expand:in)     :<C-u>call <SID>call('expand_in')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-collapse)      :<C-u>call <SID>call('collapse')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reveal)        :<C-u>call <SID>call('reveal')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-reveal=)       :<C-u>call <SID>call_without_guard('reveal')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-focus:parent)  :<C-u>call <SID>call('focus_parent')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-enter)         :<C-u>call <SID>call('enter')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nnoremap <buffer><silent> <Plug>(fern-action-leave)         :<C-u>call <SID>call('leave')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nmap <buffer> <Plug>(fern-action-reload) <Plug>(fern-action-reload:all)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:  nmap <buffer> <Plug>(fern-action-expand) <Plug>(fern-action-expand:in)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <F5> <Plug>(fern-action-reload)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <C-m> <Plug>(fern-action-enter)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> <C-h> <Plug>(fern-action-leave)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> l <Plug>(fern-action-expand)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> h <Plug>(fern-action-collapse)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/node.vim:    nmap <buffer><nowait> i <Plug>(fern-action-reveal)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:  nnoremap <buffer><silent> <Plug>(fern-action-cancel) :<C-u>call <SID>call('cancel')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:  nnoremap <buffer><silent> <Plug>(fern-action-redraw) :<C-u>call <SID>call('redraw')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:    nmap <buffer><nowait> <C-c> <Plug>(fern-action-cancel)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/tree.vim:    nmap <buffer><nowait> <C-l> <Plug>(fern-action-redraw)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:label) :<C-u>call <SID>call('yank', 'label')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:badge) :<C-u>call <SID>call('yank', 'badge')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:bufname) :<C-u>call <SID>call('yank', 'bufname')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:  nmap <buffer> <Plug>(fern-action-yank) <Plug>(fern-action-yank:bufname)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/yank.vim:    nmap <buffer><nowait> y <Plug>(fern-action-yank)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nnoremap <buffer><silent> <Plug>(fern-action-zoom) :<C-u>call <SID>call('zoom')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nnoremap <buffer><silent> <Plug>(fern-action-zoom:reset) :<C-u>call <SID>call('zoom_reset')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nmap <buffer><silent> <Plug>(fern-action-zoom:half) 4<Plug>(fern-action-zoom)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:  nmap <buffer><silent> <Plug>(fern-action-zoom:full) 9<Plug>(fern-action-zoom)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:    nmap <buffer><nowait> z <Plug>(fern-action-zoom)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/drawer.vim:    nmap <buffer><nowait> Z <Plug>(fern-action-zoom:reset)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-hidden:set)    :<C-u>call <SID>call('hidden_set')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-hidden:unset)  :<C-u>call <SID>call('hidden_unset')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-hidden:toggle) :<C-u>call <SID>call('hidden_toggle')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-include)       :<C-u>call <SID>call('include')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-exclude)       :<C-u>call <SID>call('exclude')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-include=)      :<C-u>call <SID>call_without_guard('include')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nnoremap <buffer><silent> <Plug>(fern-action-exclude=)      :<C-u>call <SID>call_without_guard('exclude')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:  nmap <buffer> <Plug>(fern-action-hidden) <Plug>(fern-action-hidden:toggle)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:    nmap <buffer><nowait> !  <Plug>(fern-action-hidden)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:    nmap <buffer><nowait> fi <Plug>(fern-action-include)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/filter.vim:    nmap <buffer><nowait> fe <Plug>(fern-action-exclude)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/wait.vim:        \ <Plug>(fern-wait-viewer:ready)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/wait.vim:  nmap <buffer> <Plug>(fern-wait) <Plug>(fern-wait-viewer:ready)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:clear)  :<C-u>call <SID>call('mark_clear')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:set)    :<C-u>call <SID>call('mark_set')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:unset   :<C-u>call <SID>call('mark_unset')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nnoremap <buffer><silent> <Plug>(fern-action-mark:toggle) :<C-u>call <SID>call('mark_toggle')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vnoremap <buffer><silent> <Plug>(fern-action-mark:set)    :call <SID>call('mark_set')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vnoremap <buffer><silent> <Plug>(fern-action-mark:unset)  :call <SID>call('mark_unset')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vnoremap <buffer><silent> <Plug>(fern-action-mark:toggle) :call <SID>call('mark_toggle')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  nmap <buffer> <Plug>(fern-action-mark) <Plug>(fern-action-mark:toggle)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:  vmap <buffer> <Plug>(fern-action-mark) <Plug>(fern-action-mark:toggle)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    nmap <buffer><nowait> <C-j> <Plug>(fern-action-mark)j
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    nmap <buffer><nowait> <C-k> k<Plug>(fern-action-mark)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    nmap <buffer><nowait> -     <Plug>(fern-action-mark)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping/mark.vim:    vmap <buffer><nowait> -     <Plug>(fern-action-mark)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-copy)  :<C-u>call <SID>call('clipboard_copy')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-move)  :<C-u>call <SID>call('clipboard_move')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-paste) :<C-u>call <SID>call('clipboard_paste')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-clear) :<C-u>call <SID>call('clipboard_clear')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:    nmap <buffer><nowait> C <Plug>(fern-action-clipboard-copy)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:    nmap <buffer><nowait> M <Plug>(fern-action-clipboard-move)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/clipboard.vim:    nmap <buffer><nowait> P <Plug>(fern-action-clipboard-paste)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:select)   :<C-u>call <SID>call('rename', 'select')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:split)    :<C-u>call <SID>call('rename', 'split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:vsplit)   :<C-u>call <SID>call('rename', 'vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:tabedit)  :<C-u>call <SID>call('rename', 'tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:above)    :<C-u>call <SID>call('rename', 'leftabove split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:left)     :<C-u>call <SID>call('rename', 'leftabove vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:below)    :<C-u>call <SID>call('rename', 'rightbelow split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:right)    :<C-u>call <SID>call('rename', 'rightbelow vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:top)      :<C-u>call <SID>call('rename', 'topleft split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:leftest)  :<C-u>call <SID>call('rename', 'topleft vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:bottom)   :<C-u>call <SID>call('rename', 'botright split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:rightest) :<C-u>call <SID>call('rename', 'botright vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-error)   :<C-u>call <SID>call('rename', 'edit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-split)   :<C-u>call <SID>call('rename', 'edit/split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-vsplit)  :<C-u>call <SID>call('rename', 'edit/vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-tabedit) :<C-u>call <SID>call('rename', 'edit/tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename:edit) <Plug>(fern-action-rename:edit-or-error)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename) <Plug>(fern-action-rename:split)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping/rename.vim:    nmap <buffer><nowait> R <Plug>(fern-action-rename)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-leaf)   :<C-u>call <SID>call('new_leaf')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-branch) :<C-u>call <SID>call('new_branch')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-copy)       :<C-u>call <SID>call('copy')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-move)       :<C-u>call <SID>call('move')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-remove)     :<C-u>call <SID>call('remove')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-edit-leaf)  :<C-u>call <SID>call('edit_leaf')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> N <Plug>(fern-action-new-leaf)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> K <Plug>(fern-action-new-branch)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> c <Plug>(fern-action-copy)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> m <Plug>(fern-action-move)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> D <Plug>(fern-action-remove)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/dict/mapping.vim:    nmap <buffer><nowait> e <Plug>(fern-action-edit-leaf)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/grep.vim:  nnoremap <buffer><silent> <Plug>(fern-action-grep)  :<C-u>call <SID>call('grep')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/grep.vim:  nnoremap <buffer><silent> <Plug>(fern-action-grep=) :<C-u>call <SID>call_without_guard('grep')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/ex.vim:  nnoremap <buffer><silent> <Plug>(fern-action-ex)  :<C-u>call <SID>call('ex')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/ex.vim:  nnoremap <buffer><silent> <Plug>(fern-action-ex=) :<C-u>call <SID>call_without_guard('ex')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-cd:root)  :<C-u>call <SID>call('cd_root', 'cd')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-lcd:root) :<C-u>call <SID>call('cd_root', 'lcd')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-tcd:root) :<C-u>call <SID>call('cd_root', 'tcd')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-cd:cursor)  :<C-u>call <SID>call('cd_cursor', 'cd')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-lcd:cursor) :<C-u>call <SID>call('cd_cursor', 'lcd')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nnoremap <buffer><silent> <Plug>(fern-action-tcd:cursor) :<C-u>call <SID>call('cd_cursor', 'tcd')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nmap <buffer> <Plug>(fern-action-cd) <Plug>(fern-action-cd:cursor)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nmap <buffer> <Plug>(fern-action-lcd) <Plug>(fern-action-lcd:cursor)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/cd.vim:  nmap <buffer> <Plug>(fern-action-tcd) <Plug>(fern-action-tcd:cursor)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/yank.vim:  nnoremap <buffer><silent> <Plug>(fern-action-yank:path) :<C-u>call <SID>call('yank_path')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/yank.vim:  nmap <buffer> <Plug>(fern-action-yank) <Plug>(fern-action-yank:path)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-copy)  :<C-u>call <SID>call('clipboard_copy')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-move)  :<C-u>call <SID>call('clipboard_move')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-paste) :<C-u>call <SID>call('clipboard_paste')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:  nnoremap <buffer><silent> <Plug>(fern-action-clipboard-clear) :<C-u>call <SID>call('clipboard_clear')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:    nmap <buffer><nowait> C <Plug>(fern-action-clipboard-copy)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:    nmap <buffer><nowait> M <Plug>(fern-action-clipboard-move)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/clipboard.vim:    nmap <buffer><nowait> P <Plug>(fern-action-clipboard-paste)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/system.vim:  nnoremap <buffer><silent> <Plug>(fern-action-open:system) :<C-u>call <SID>call('open_system')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/system.vim:    nmap <buffer><nowait> x <Plug>(fern-action-open:system)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:select)   :<C-u>call <SID>call('rename', 'select')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:split)    :<C-u>call <SID>call('rename', 'split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:vsplit)   :<C-u>call <SID>call('rename', 'vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:tabedit)  :<C-u>call <SID>call('rename', 'tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:above)    :<C-u>call <SID>call('rename', 'leftabove split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:left)     :<C-u>call <SID>call('rename', 'leftabove vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:below)    :<C-u>call <SID>call('rename', 'rightbelow split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:right)    :<C-u>call <SID>call('rename', 'rightbelow vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:top)      :<C-u>call <SID>call('rename', 'topleft split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:leftest)  :<C-u>call <SID>call('rename', 'topleft vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:bottom)   :<C-u>call <SID>call('rename', 'botright split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:rightest) :<C-u>call <SID>call('rename', 'botright vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-error)   :<C-u>call <SID>call('rename', 'edit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-split)   :<C-u>call <SID>call('rename', 'edit/split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-vsplit)  :<C-u>call <SID>call('rename', 'edit/vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nnoremap <buffer><silent> <Plug>(fern-action-rename:edit-or-tabedit) :<C-u>call <SID>call('rename', 'edit/tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename:edit) <Plug>(fern-action-rename:edit-or-error)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:  nmap <buffer><silent> <Plug>(fern-action-rename) <Plug>(fern-action-rename:split)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/rename.vim:    nmap <buffer><nowait> R <Plug>(fern-action-rename)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:select)   :<C-u>call <SID>call('terminal', 'select')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:split)    :<C-u>call <SID>call('terminal', 'split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:vsplit)   :<C-u>call <SID>call('terminal', 'vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:tabedit)  :<C-u>call <SID>call('terminal', 'tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:above)    :<C-u>call <SID>call('terminal', 'leftabove split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:left)     :<C-u>call <SID>call('terminal', 'leftabove vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:below)    :<C-u>call <SID>call('terminal', 'rightbelow split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:right)    :<C-u>call <SID>call('terminal', 'rightbelow vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:top)      :<C-u>call <SID>call('terminal', 'topleft split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:leftest)  :<C-u>call <SID>call('terminal', 'topleft vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:bottom)   :<C-u>call <SID>call('terminal', 'botright split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:rightest) :<C-u>call <SID>call('terminal', 'botright vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-error)   :<C-u>call <SID>call('terminal', 'edit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-split)   :<C-u>call <SID>call('terminal', 'edit/split')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-vsplit)  :<C-u>call <SID>call('terminal', 'edit/vsplit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nnoremap <buffer><silent> <Plug>(fern-action-terminal:edit-or-tabedit) :<C-u>call <SID>call('terminal', 'edit/tabedit')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:        \ <Plug>(fern-action-terminal:side)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:        \   "\<Plug>(fern-action-terminal:left)",
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:        \   "\<Plug>(fern-action-terminal:right)",
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nmap <buffer><silent> <Plug>(fern-action-terminal:edit) <Plug>(fern-action-terminal:edit-or-error)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping/terminal.vim:  nmap <buffer><silent> <Plug>(fern-action-terminal) <Plug>(fern-action-terminal:edit)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-path)  :<C-u>call <SID>call('new_path')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-file)  :<C-u>call <SID>call('new_file')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-dir)   :<C-u>call <SID>call('new_dir')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-path=) :<C-u>call <SID>call_without_guard('new_path')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-file=) :<C-u>call <SID>call_without_guard('new_file')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-new-dir=)  :<C-u>call <SID>call_without_guard('new_dir')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-copy)      :<C-u>call <SID>call('copy')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-move)      :<C-u>call <SID>call('move')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-trash)     :<C-u>call <SID>call('trash')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-trash=)    :<C-u>call <SID>call_without_guard('trash')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-remove)    :<C-u>call <SID>call('remove')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:  nnoremap <buffer><silent> <Plug>(fern-action-remove=)   :<C-u>call <SID>call_without_guard('remove')<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> N <Plug>(fern-action-new-file)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> K <Plug>(fern-action-new-dir)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> c <Plug>(fern-action-copy)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> m <Plug>(fern-action-move)
../pack/packs-cp/opt/fern.vim/autoload/fern/scheme/file/mapping.vim:    nmap <buffer><nowait> D <Plug>(fern-action-trash)
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nnoremap <buffer><silent> <Plug>(fern-replacer-p) :<C-u>call <SID>map_paste(0)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nnoremap <buffer><silent> <Plug>(fern-replacer-P) :<C-u>call <SID>map_paste(-1)<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nnoremap <buffer><silent> <Plug>(fern-replacer-warn) :<C-u>call <SID>map_warn()<CR>
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  inoremap <buffer><silent><expr> <Plug>(fern-replacer-warn) <SID>map_warn()
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> p <Plug>(fern-replacer-p)
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> P <Plug>(fern-replacer-P)
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> o <Plug>(fern-replacer-warn)
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  nmap <buffer> O <Plug>(fern-replacer-warn)
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  imap <buffer> <C-m> <Plug>(fern-replacer-warn)
../pack/packs-cp/opt/fern.vim/autoload/fern/internal/replacer.vim:  imap <buffer> <Return> <Plug>(fern-replacer-warn)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:        \ printf('<Plug>(%s)', a:old),
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:        \ printf('<Plug>(%s)', a:new),
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:  silent execute printf('nmap <buffer> <Plug>(%s) <Plug>(%s)', a:old, a:new)
../pack/packs-cp/opt/fern.vim/autoload/fern/mapping.vim:  return printf("\<Plug>(%s)", a:new)
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-choice) :<C-u>call <SID>_map_choice()<CR>',
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-repeat) :<C-u>call <SID>_map_repeat()<CR>',
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-help) :<C-u>call <SID>_map_help(0)<CR>',
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ 'nnoremap <buffer><silent> <Plug>(%s-action-help:all) :<C-u>call <SID>_map_help(1)<CR>',
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  if !hasmapto(printf('<Plug>(%s-action-choice)', s:prefix), 'n')
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:          \ 'nmap <buffer> a <Plug>(%s-action-choice)',
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  if !hasmapto(printf('<Plug>(%s-action-repeat)', s:prefix), 'n')
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:          \ 'nmap <buffer> . <Plug>(%s-action-repeat)',
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  if !hasmapto(printf('<Plug>(%s-action-help)', s:prefix), 'n')
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:          \ 'nmap <buffer> ? <Plug>(%s-action-help)',
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  let pattern1 = printf('^<Plug>(%s-action-\zs.*\ze)$', s:prefix)
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  let pattern2 = printf('^<Plug>(%s-action-', s:prefix)
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  call filter(rs1, { _, v -> v[0] !~# '^<Plug>' || v[0] =~# pattern2 })
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  let ms = split(execute(printf('nmap <Plug>(%s-action-', s:prefix)), '\n')
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:  call map(ms, { _, v -> matchstr(v, '^<Plug>(\zs.*\ze)$') })
../pack/packs-cp/opt/fern.vim/autoload/vital/_fern/App/Action.vim:        \ "normal \<Plug>(%s-action-%s)",
../pack/packs-cp/opt/fern.vim/test/util/test/test.vimspec:            \ <Plug>(test-input)
../pack/packs-cp/opt/fern.vim/test/util/test/test.vimspec:      let value = execute("normal \<Plug>(test-input)")
../pack/packs-cp/opt/fern.vim/test/behavior/test.vimspec:          \ <Plug>(test-input)
../pack/packs-cp/opt/fern.vim/test/behavior/test.vimspec:    let value = execute("normal \<Plug>(test-input)")
../pack/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("ggj\<Plug>(fern-action-move)")
../pack/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("\<Plug>(fern-wait)", 'x')
../pack/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("ggj\<Plug>(fern-action-remove)")
../pack/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("\<Plug>(fern-wait)", 'x')
../pack/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("ggj\<Plug>(fern-action-remove)")
../pack/packs-cp/opt/fern.vim/test/behavior/buffer-rename.vimspec:    call feedkeys("\<Plug>(fern-wait)", 'x')
../pack/packs-cp/opt/fern.vim/test/behavior/jumplist.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
../pack/packs-cp/opt/fern.vim/test/behavior/jumplist.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
../pack/packs-cp/opt/fern.vim/test/behavior/alternate-file.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
../pack/packs-cp/opt/fern.vim/test/behavior/alternate-file.vimspec:    execute "normal G\<Plug>(fern-action-open:edit)"
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	<Plug>(fern-action-{name})
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer> g? <Plug>(fern-action-help)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	e                         open       <Plug>(fern-action-open)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	<Plug>(fern-action-open)  open:edit  <Plug>(fern-action-open:edit)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:split)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:Fern provide |<Plug>(fern-wait)| mapping as a helper.
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer> <Plug>(fern-my-leave-and-tcd)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-leave)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-wait)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-tcd:root)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:Without <Plug>(fern-wait), the "tcd:root" action will be invoked before actual
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	nmap <buffer><expr> <Plug>(fern-my-open-or-expand)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-open)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-expand)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-my-open-or-enter)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-open)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-enter)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-my-open-or-expand-or-collapse)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-open)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-expand)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-collapse)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-expand-or-enter)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-expand)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \   "<Plug>(fern-action-enter)",
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom:reset)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom:half)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	This is an alias of "4<Plug>(fern-action-zoom)"
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-zoom:full)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	This is an alias of "9<Plug>(fern-action-zoom)"
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden:set)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden:unset)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden:toggle)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-hidden)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-include)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-include=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-include)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-include=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-exclude)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-exclude=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-exclude)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-exclude=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:clear)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:set)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:unset)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark:toggle)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-mark)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-debug)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reload:all)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reload:cursor)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reload)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-reload)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-reload:cursor)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand:stay)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand:in)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-expand)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-expand)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-expand:stay)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-collapse)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reveal)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-reveal=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-reveal)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-reveal=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-focus:parent)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-enter)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-leave)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:select)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:above)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:left)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:below)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:right)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:top)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:leftest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:bottom)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:rightest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:side)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open-or-enter)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open-or-expand)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:edit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open:edit)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open:edit-or-tabedit)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-open:select)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:select)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:select:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:split:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:vsplit:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:tabedit:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-error:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-split:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-vsplit:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit-or-tabedit:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:above)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:above:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:left)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:left:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:below)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:below:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:right)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:right:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:top)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:top:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:leftest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:leftest:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:bottom)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:bottom:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:rightest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:rightest:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:side)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:side:vert)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff:edit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff:edit)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff:edit-or-tabedit)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-diff)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-diff:select)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cancel)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-redraw)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:label)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:badge)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:bufname)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-yank)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-yank:label)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-wait)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-ex)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-ex=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-ex)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-ex=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-path)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-path=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-new-path)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-new-path=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-file)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-file=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-new-file)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-new-file=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-dir)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-new-dir=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-new-dir)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-new-dir=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-copy)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-move)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-trash)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-trash=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-trash)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-trash=)y<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-remove)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-remove=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-trash)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-trash=)y<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cd:root)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-lcd:root)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-tcd:root)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cd:cursor)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-lcd:cursor)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-tcd:cursor)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-cd)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-lcd)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-tcd)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-cd)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-cd:root)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-copy)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-move)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-paste)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-clipboard-clear)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-grep)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-grep=)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(my-grep)
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	      \ <Plug>(fern-action-grep=)foo<CR>
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:select)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:above)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:left)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:below)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:right)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:top)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:leftest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:bottom)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:rightest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:edit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename:side)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-rename)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-open:system)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:select)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:above)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:left)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:below)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:right)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:top)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:leftest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:bottom)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:rightest)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:edit)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal:side)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-terminal)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:*<Plug>(fern-action-yank:path)*
../pack/packs-cp/opt/fern.vim/doc/fern.txt:	Yank the node path. In FILE scheme, |<Plug>(fern-action-yank)| is
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-cancel)	fern.txt	/*<Plug>(fern-action-cancel)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-cd)	fern.txt	/*<Plug>(fern-action-cd)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-cd:cursor)	fern.txt	/*<Plug>(fern-action-cd:cursor)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-cd:root)	fern.txt	/*<Plug>(fern-action-cd:root)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-clipboard-clear)	fern.txt	/*<Plug>(fern-action-clipboard-clear)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-clipboard-copy)	fern.txt	/*<Plug>(fern-action-clipboard-copy)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-clipboard-move)	fern.txt	/*<Plug>(fern-action-clipboard-move)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-clipboard-paste)	fern.txt	/*<Plug>(fern-action-clipboard-paste)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-collapse)	fern.txt	/*<Plug>(fern-action-collapse)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-copy)	fern.txt	/*<Plug>(fern-action-copy)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-debug)	fern.txt	/*<Plug>(fern-action-debug)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff)	fern.txt	/*<Plug>(fern-action-diff)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:above)	fern.txt	/*<Plug>(fern-action-diff:above)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:above:vert)	fern.txt	/*<Plug>(fern-action-diff:above:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:below)	fern.txt	/*<Plug>(fern-action-diff:below)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:below:vert)	fern.txt	/*<Plug>(fern-action-diff:below:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:bottom)	fern.txt	/*<Plug>(fern-action-diff:bottom)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:bottom:vert)	fern.txt	/*<Plug>(fern-action-diff:bottom:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit)	fern.txt	/*<Plug>(fern-action-diff:edit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-error)	fern.txt	/*<Plug>(fern-action-diff:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-error:vert)	fern.txt	/*<Plug>(fern-action-diff:edit-or-error:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-split)	fern.txt	/*<Plug>(fern-action-diff:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-split:vert)	fern.txt	/*<Plug>(fern-action-diff:edit-or-split:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-tabedit)	fern.txt	/*<Plug>(fern-action-diff:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-tabedit:vert)	fern.txt	/*<Plug>(fern-action-diff:edit-or-tabedit:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-vsplit)	fern.txt	/*<Plug>(fern-action-diff:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:edit-or-vsplit:vert)	fern.txt	/*<Plug>(fern-action-diff:edit-or-vsplit:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:left)	fern.txt	/*<Plug>(fern-action-diff:left)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:left:vert)	fern.txt	/*<Plug>(fern-action-diff:left:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:leftest)	fern.txt	/*<Plug>(fern-action-diff:leftest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:leftest:vert)	fern.txt	/*<Plug>(fern-action-diff:leftest:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:right)	fern.txt	/*<Plug>(fern-action-diff:right)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:right:vert)	fern.txt	/*<Plug>(fern-action-diff:right:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:rightest)	fern.txt	/*<Plug>(fern-action-diff:rightest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:rightest:vert)	fern.txt	/*<Plug>(fern-action-diff:rightest:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:select)	fern.txt	/*<Plug>(fern-action-diff:select)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:select:vert)	fern.txt	/*<Plug>(fern-action-diff:select:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:side)	fern.txt	/*<Plug>(fern-action-diff:side)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:side:vert)	fern.txt	/*<Plug>(fern-action-diff:side:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:split)	fern.txt	/*<Plug>(fern-action-diff:split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:split:vert)	fern.txt	/*<Plug>(fern-action-diff:split:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:tabedit)	fern.txt	/*<Plug>(fern-action-diff:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:tabedit:vert)	fern.txt	/*<Plug>(fern-action-diff:tabedit:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:top)	fern.txt	/*<Plug>(fern-action-diff:top)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:top:vert)	fern.txt	/*<Plug>(fern-action-diff:top:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:vsplit)	fern.txt	/*<Plug>(fern-action-diff:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-diff:vsplit:vert)	fern.txt	/*<Plug>(fern-action-diff:vsplit:vert)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-enter)	fern.txt	/*<Plug>(fern-action-enter)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-ex)	fern.txt	/*<Plug>(fern-action-ex)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-ex=)	fern.txt	/*<Plug>(fern-action-ex=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-exclude)	fern.txt	/*<Plug>(fern-action-exclude)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-exclude=)	fern.txt	/*<Plug>(fern-action-exclude=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-expand)	fern.txt	/*<Plug>(fern-action-expand)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-expand:in)	fern.txt	/*<Plug>(fern-action-expand:in)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-expand:stay)	fern.txt	/*<Plug>(fern-action-expand:stay)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-focus:parent)	fern.txt	/*<Plug>(fern-action-focus:parent)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-grep)	fern.txt	/*<Plug>(fern-action-grep)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-grep=)	fern.txt	/*<Plug>(fern-action-grep=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-hidden)	fern.txt	/*<Plug>(fern-action-hidden)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-hidden:set)	fern.txt	/*<Plug>(fern-action-hidden:set)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-hidden:toggle)	fern.txt	/*<Plug>(fern-action-hidden:toggle)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-hidden:unset)	fern.txt	/*<Plug>(fern-action-hidden:unset)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-include)	fern.txt	/*<Plug>(fern-action-include)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-include=)	fern.txt	/*<Plug>(fern-action-include=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-lcd)	fern.txt	/*<Plug>(fern-action-lcd)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-lcd:cursor)	fern.txt	/*<Plug>(fern-action-lcd:cursor)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-lcd:root)	fern.txt	/*<Plug>(fern-action-lcd:root)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-leave)	fern.txt	/*<Plug>(fern-action-leave)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-mark)	fern.txt	/*<Plug>(fern-action-mark)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-mark:clear)	fern.txt	/*<Plug>(fern-action-mark:clear)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-mark:set)	fern.txt	/*<Plug>(fern-action-mark:set)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-mark:toggle)	fern.txt	/*<Plug>(fern-action-mark:toggle)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-mark:unset)	fern.txt	/*<Plug>(fern-action-mark:unset)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-move)	fern.txt	/*<Plug>(fern-action-move)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-new-dir)	fern.txt	/*<Plug>(fern-action-new-dir)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-new-dir=)	fern.txt	/*<Plug>(fern-action-new-dir=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-new-file)	fern.txt	/*<Plug>(fern-action-new-file)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-new-file=)	fern.txt	/*<Plug>(fern-action-new-file=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-new-path)	fern.txt	/*<Plug>(fern-action-new-path)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-new-path=)	fern.txt	/*<Plug>(fern-action-new-path=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open)	fern.txt	/*<Plug>(fern-action-open)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open-or-enter)	fern.txt	/*<Plug>(fern-action-open-or-enter)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open-or-expand)	fern.txt	/*<Plug>(fern-action-open-or-expand)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:above)	fern.txt	/*<Plug>(fern-action-open:above)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:below)	fern.txt	/*<Plug>(fern-action-open:below)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:bottom)	fern.txt	/*<Plug>(fern-action-open:bottom)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:edit)	fern.txt	/*<Plug>(fern-action-open:edit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:edit-or-error)	fern.txt	/*<Plug>(fern-action-open:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:edit-or-split)	fern.txt	/*<Plug>(fern-action-open:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:edit-or-tabedit)	fern.txt	/*<Plug>(fern-action-open:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:edit-or-vsplit)	fern.txt	/*<Plug>(fern-action-open:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:left)	fern.txt	/*<Plug>(fern-action-open:left)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:leftest)	fern.txt	/*<Plug>(fern-action-open:leftest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:right)	fern.txt	/*<Plug>(fern-action-open:right)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:rightest)	fern.txt	/*<Plug>(fern-action-open:rightest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:select)	fern.txt	/*<Plug>(fern-action-open:select)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:side)	fern.txt	/*<Plug>(fern-action-open:side)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:split)	fern.txt	/*<Plug>(fern-action-open:split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:system)	fern.txt	/*<Plug>(fern-action-open:system)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:tabedit)	fern.txt	/*<Plug>(fern-action-open:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:top)	fern.txt	/*<Plug>(fern-action-open:top)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-open:vsplit)	fern.txt	/*<Plug>(fern-action-open:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-redraw)	fern.txt	/*<Plug>(fern-action-redraw)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-reload)	fern.txt	/*<Plug>(fern-action-reload)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-reload:all)	fern.txt	/*<Plug>(fern-action-reload:all)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-reload:cursor)	fern.txt	/*<Plug>(fern-action-reload:cursor)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-remove)	fern.txt	/*<Plug>(fern-action-remove)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-remove=)	fern.txt	/*<Plug>(fern-action-remove=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename)	fern.txt	/*<Plug>(fern-action-rename)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:above)	fern.txt	/*<Plug>(fern-action-rename:above)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:below)	fern.txt	/*<Plug>(fern-action-rename:below)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:bottom)	fern.txt	/*<Plug>(fern-action-rename:bottom)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:edit)	fern.txt	/*<Plug>(fern-action-rename:edit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:edit-or-error)	fern.txt	/*<Plug>(fern-action-rename:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:edit-or-split)	fern.txt	/*<Plug>(fern-action-rename:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:edit-or-tabedit)	fern.txt	/*<Plug>(fern-action-rename:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:edit-or-vsplit)	fern.txt	/*<Plug>(fern-action-rename:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:left)	fern.txt	/*<Plug>(fern-action-rename:left)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:leftest)	fern.txt	/*<Plug>(fern-action-rename:leftest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:right)	fern.txt	/*<Plug>(fern-action-rename:right)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:rightest)	fern.txt	/*<Plug>(fern-action-rename:rightest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:select)	fern.txt	/*<Plug>(fern-action-rename:select)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:side)	fern.txt	/*<Plug>(fern-action-rename:side)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:split)	fern.txt	/*<Plug>(fern-action-rename:split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:tabedit)	fern.txt	/*<Plug>(fern-action-rename:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:top)	fern.txt	/*<Plug>(fern-action-rename:top)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-rename:vsplit)	fern.txt	/*<Plug>(fern-action-rename:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-reveal)	fern.txt	/*<Plug>(fern-action-reveal)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-reveal=)	fern.txt	/*<Plug>(fern-action-reveal=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-tcd)	fern.txt	/*<Plug>(fern-action-tcd)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-tcd:cursor)	fern.txt	/*<Plug>(fern-action-tcd:cursor)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-tcd:root)	fern.txt	/*<Plug>(fern-action-tcd:root)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal)	fern.txt	/*<Plug>(fern-action-terminal)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:above)	fern.txt	/*<Plug>(fern-action-terminal:above)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:below)	fern.txt	/*<Plug>(fern-action-terminal:below)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:bottom)	fern.txt	/*<Plug>(fern-action-terminal:bottom)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:edit)	fern.txt	/*<Plug>(fern-action-terminal:edit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:edit-or-error)	fern.txt	/*<Plug>(fern-action-terminal:edit-or-error)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:edit-or-split)	fern.txt	/*<Plug>(fern-action-terminal:edit-or-split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:edit-or-tabedit)	fern.txt	/*<Plug>(fern-action-terminal:edit-or-tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:edit-or-vsplit)	fern.txt	/*<Plug>(fern-action-terminal:edit-or-vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:left)	fern.txt	/*<Plug>(fern-action-terminal:left)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:leftest)	fern.txt	/*<Plug>(fern-action-terminal:leftest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:right)	fern.txt	/*<Plug>(fern-action-terminal:right)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:rightest)	fern.txt	/*<Plug>(fern-action-terminal:rightest)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:select)	fern.txt	/*<Plug>(fern-action-terminal:select)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:side)	fern.txt	/*<Plug>(fern-action-terminal:side)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:split)	fern.txt	/*<Plug>(fern-action-terminal:split)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:tabedit)	fern.txt	/*<Plug>(fern-action-terminal:tabedit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:top)	fern.txt	/*<Plug>(fern-action-terminal:top)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-terminal:vsplit)	fern.txt	/*<Plug>(fern-action-terminal:vsplit)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-trash)	fern.txt	/*<Plug>(fern-action-trash)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-trash=)	fern.txt	/*<Plug>(fern-action-trash=)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-yank)	fern.txt	/*<Plug>(fern-action-yank)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-yank:badge)	fern.txt	/*<Plug>(fern-action-yank:badge)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-yank:bufname)	fern.txt	/*<Plug>(fern-action-yank:bufname)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-yank:label)	fern.txt	/*<Plug>(fern-action-yank:label)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-yank:path)	fern.txt	/*<Plug>(fern-action-yank:path)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-zoom)	fern.txt	/*<Plug>(fern-action-zoom)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-zoom:full)	fern.txt	/*<Plug>(fern-action-zoom:full)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-zoom:half)	fern.txt	/*<Plug>(fern-action-zoom:half)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-action-zoom:reset)	fern.txt	/*<Plug>(fern-action-zoom:reset)*
../pack/packs-cp/opt/fern.vim/doc/tags:<Plug>(fern-wait)	fern.txt	/*<Plug>(fern-wait)*
../pack/packs-cp/opt/fern.vim/doc/fern-develop.txt:	is an action name, and {rhs} is a <Plug> mapping like:
../pack/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['a', 'choice', '<Plug>(fern-action-choice)'],
../pack/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['.', 'repeat', '<Plug>(fern-action-repeat)'],
../pack/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['?', 'help', '<Plug>(fern-action-help)'],
../pack/packs-cp/opt/fern.vim/doc/fern-develop.txt:	      \ ['', 'help:all', '<Plug>(fern-action-help:all)'],
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:  silent! call repeat#set("\<Plug>(EasyAlignRepeat)")
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(EasyAlign) :set opfunc=<SID>easy_align_op<Enter>g@
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:vnoremap <silent> <Plug>(EasyAlign) :<C-U>call <SID>easy_align_op(visualmode(), 1)<Enter>
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(LiveEasyAlign) :set opfunc=<SID>live_easy_align_op<Enter>g@
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:vnoremap <silent> <Plug>(LiveEasyAlign) :<C-U>call <SID>live_easy_align_op(visualmode(), 1)<Enter>
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(EasyAlignRepeat) :call <SID>easy_align_repeat()<Enter>
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:vnoremap <silent> <Plug>(EasyAlignRepeat) :<C-U>call <SID>repeat_in_visual()<Enter>
../pack/packs-cp/opt/vim-easy-align/plugin/easy_align.vim:nnoremap <silent> <Plug>(EasyAlignOperator) :set opfunc=<SID>easy_align_op<Enter>g@
../pack/packs-cp/opt/vim-easy-align/EXAMPLES.md:xmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/EXAMPLES.md:nmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/README.md:xmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/README.md:nmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/README.md:#### 1. `<Plug>` mappings (interactive mode)
../pack/packs-cp/opt/vim-easy-align/README.md:The recommended method is to use `<Plug>(EasyAlign)` mapping in normal and
../pack/packs-cp/opt/vim-easy-align/README.md:nmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/README.md:xmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/README.md:Interactive mode is started either with `<Plug>(EasyAlign)` mapping or with
../pack/packs-cp/opt/vim-easy-align/README.md:Live interactive mode can be started with either `<Plug>(LiveEasyAlign)` map
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  " nmap <leader>A <Plug>(EasyAlignOperator)
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <Enter>         <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader><Enter> <Plug>(LiveEasyAlign)
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  nmap <leader>A       <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader>.       <Plug>(EasyAlignRepeat)
../pack/packs-cp/opt/vim-easy-align/test/fixed.vader:* #51 Repeat of visual <Plug>(LiveEasyAlign) broken
../pack/packs-cp/opt/vim-easy-align/test/fixed.vader:Do (#51/#52 <Plug>(EasyAlignRepeat) in visual mode):
../pack/packs-cp/opt/vim-easy-align/doc/tags:<Plug>(EasyAlign)	easy_align.txt	/*<Plug>(EasyAlign)*
../pack/packs-cp/opt/vim-easy-align/doc/tags:<Plug>(LiveEasyAlign)	easy_align.txt	/*<Plug>(LiveEasyAlign)*
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:        1. Using <Plug> mappings                            |easy-align-5-2-1|
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:                                                             *<Plug>(EasyAlign)*
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    vmap <Enter> <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    nmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:1. Using <Plug> mappings~
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:The recommended method is to use <Plug> mappings as described earlier.
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:                                                         *<Plug>(LiveEasyAlign)*
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(EasyAlign)     | normal | Start interactive mode for a motion/text object
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(EasyAlign)     | visual | Start interactive mode for the selection
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(LiveEasyAlign) | normal | Start live-interactive mode for a motion/text object
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt: <Plug>(LiveEasyAlign) | visual | Start live-interactive mode for the selection
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:The following sections will assume that you have <Plug>(EasyAlign) mappings in
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    vmap <Enter> <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:    nmap ga <Plug>(EasyAlign)
../pack/packs-cp/opt/vim-easy-align/doc/easy_align.txt:Live interactive mode can be started with either <Plug>(LiveEasyAlign) map or
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:" == <Plug> Mapping {{{
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        silent exec 'noremap  <silent><Plug>(easymotion-'.name.')' .
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        silent exec 'xnoremap <silent><Plug>(easymotion-'.name.')' .
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:    " noremap  <silent><Plug>(easymotion-f2) :<C-u>call EasyMotion#S(2,1,0)<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:    " xnoremap <silent><Plug>(easymotion-f2) <Esc>:<C-u>call EasyMotion#S(2,1,0)<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-f) :<C-u>call EasyMotion#OverwinF(1)<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-f2) :<C-u>call EasyMotion#OverwinF(2)<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-line) :<C-u>call EasyMotion#overwin#line()<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:nnoremap <silent> <Plug>(easymotion-overwin-w) :<C-u>call EasyMotion#overwin#w()<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-next)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-next)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-prev)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-prev)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-repeat)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-repeat)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-dotrepeat)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:noremap  <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(0)<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:xnoremap <silent><Plug>(easymotion-activate) :<C-u>call EasyMotion#activate(1)<CR>
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        exec 'map ' . g:EasyMotion_leader_key . ' <Plug>(easymotion-prefix)'
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:        if !hasmapto('<Plug>(easymotion-prefix)')
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:            map <Leader><Leader> <Plug>(easymotion-prefix)
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \ eval('g:EasyMotion_mapping_' . motion) . ' <Plug>(easymotion-' . motion . ')'
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \ && !hasmapto('<Plug>(easymotion-' . motion . ')')
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \ && empty(maparg('<Plug>(easymotion-prefix)' . motion, 'nov'))
../pack/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:                    \'<Plug>(easymotion-prefix)' . motion . ' <Plug>(easymotion-' . motion . ')'
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader> <Plug>(easymotion-prefix)
../pack/packs-cp/opt/vim-easymotion/README.md:Type `<Leader><Leader>w`(`<Plug>(easymotion-w)`) to trigger the word motion `w`.
../pack/packs-cp/opt/vim-easymotion/README.md:map  <Leader>f <Plug>(easymotion-bd-f)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>f <Plug>(easymotion-overwin-f)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-overwin-f2)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>L <Plug>(easymotion-bd-jk)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>L <Plug>(easymotion-overwin-line)
../pack/packs-cp/opt/vim-easymotion/README.md:map  <Leader>w <Plug>(easymotion-bd-w)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>w <Plug>(easymotion-overwin-w)
../pack/packs-cp/opt/vim-easymotion/README.md:All motions now come in bidirectional variants (e.g. `<Plug>(easymotion-s)`,
../pack/packs-cp/opt/vim-easymotion/README.md:`<Plug>(easymotion-bd-w)` and so forth).
../pack/packs-cp/opt/vim-easymotion/README.md:trick is to map `nmap s <Plug>(easymotion-s)` to use `s` instead and save one
../pack/packs-cp/opt/vim-easymotion/README.md:You can now also perform a 2-character search, similar to [vim-seek](https://github.com/goldfeld/vim-seek)/[vim-sneak](https://github.com/justinmk/vim-sneak) with `<Plug>(easymotion-s2)`. For example, you can highlight all words that start with `fu`.
../pack/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-s2)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap t <Plug>(easymotion-t2)
../pack/packs-cp/opt/vim-easymotion/README.md:map  / <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/README.md:omap / <Plug>(easymotion-tn)
../pack/packs-cp/opt/vim-easymotion/README.md:map  n <Plug>(easymotion-next)
../pack/packs-cp/opt/vim-easymotion/README.md:map  N <Plug>(easymotion-prev)
../pack/packs-cp/opt/vim-easymotion/README.md:(e.g. `<Plug>(easymotion-sl)`, `<Plug>(easymotion-bd-wl)`, etc...). This can be
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>l <Plug>(easymotion-lineforward)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>h <Plug>(easymotion-linebackward)
../pack/packs-cp/opt/vim-easymotion/README.md:`<Plug>(easymotion-repeat)`
../pack/packs-cp/opt/vim-easymotion/README.md:In a find motion (e.g. `<Plug>(easymotion-s)`), type `<CR>` without
../pack/packs-cp/opt/vim-easymotion/README.md:* `<Plug>(easymotion-next)`
../pack/packs-cp/opt/vim-easymotion/README.md:* `<Plug>(easymotion-prev)`
../pack/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/README.md:omap t <Plug>(easymotion-bd-tl)
../pack/packs-cp/opt/vim-easymotion/README.md:You should at least change the prefix key like this `map <Leader> <Plug>(easymotion-prefix)`
../pack/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-overwin-f)
../pack/packs-cp/opt/vim-easymotion/README.md:nmap s <Plug>(easymotion-overwin-f2)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
../pack/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:    it 'provide default <Plug> mappings for find motion'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s)', 'n') ==# ':<C-U>call EasyMotion#S(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s)', 'o') ==# ':<C-U>call EasyMotion#S(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f)', 'n') ==# ':<C-U>call EasyMotion#S(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f)', 'o') ==# ':<C-U>call EasyMotion#S(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F)', 'n') ==# ':<C-U>call EasyMotion#S(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F)', 'o') ==# ':<C-U>call EasyMotion#S(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f)', 'n') ==# maparg('<Plug>(easymotion-s)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f)', 'o') ==# maparg('<Plug>(easymotion-s)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f)', 'v') ==# maparg('<Plug>(easymotion-s)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t)', 'n') ==# ':<C-U>call EasyMotion#T(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t)', 'o') ==# ':<C-U>call EasyMotion#T(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T)', 'n') ==# ':<C-U>call EasyMotion#T(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T)', 'o') ==# ':<C-U>call EasyMotion#T(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t)', 'n') ==# ':<C-U>call EasyMotion#T(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t)', 'o') ==# ':<C-U>call EasyMotion#T(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl)', 'n') ==# ':<C-U>call EasyMotion#SL(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl)', 'o') ==# ':<C-U>call EasyMotion#SL(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl)', 'n') ==# ':<C-U>call EasyMotion#SL(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl)', 'o') ==# ':<C-U>call EasyMotion#SL(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl)', 'n') ==# ':<C-U>call EasyMotion#SL(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl)', 'o') ==# ':<C-U>call EasyMotion#SL(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl)', 'n') ==# maparg('<Plug>(easymotion-sl)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl)', 'o') ==# maparg('<Plug>(easymotion-sl)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl)', 'v') ==# maparg('<Plug>(easymotion-sl)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl)', 'n') ==# ':<C-U>call EasyMotion#TL(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl)', 'o') ==# ':<C-U>call EasyMotion#TL(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl)', 'n') ==# ':<C-U>call EasyMotion#TL(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl)', 'o') ==# ':<C-U>call EasyMotion#TL(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl)', 'n') ==# ':<C-U>call EasyMotion#TL(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl)', 'o') ==# ':<C-U>call EasyMotion#TL(1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s2)', 'n') ==# ':<C-U>call EasyMotion#S(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s2)', 'o') ==# ':<C-U>call EasyMotion#S(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-s2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(2,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f2)', 'n') ==# ':<C-U>call EasyMotion#S(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f2)', 'o') ==# ':<C-U>call EasyMotion#S(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-f2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(2,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F2)', 'n') ==# ':<C-U>call EasyMotion#S(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F2)', 'o') ==# ':<C-U>call EasyMotion#S(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-F2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(2,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f2)', 'n') ==# maparg('<Plug>(easymotion-s2)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f2)', 'o') ==# maparg('<Plug>(easymotion-s2)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-f2)', 'v') ==# maparg('<Plug>(easymotion-s2)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t2)', 'n') ==# ':<C-U>call EasyMotion#T(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t2)', 'o') ==# ':<C-U>call EasyMotion#T(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-t2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(2,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T2)', 'n') ==# ':<C-U>call EasyMotion#T(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T2)', 'o') ==# ':<C-U>call EasyMotion#T(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-T2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(2,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl2)', 'n') ==# ':<C-U>call EasyMotion#SL(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl2)', 'o') ==# ':<C-U>call EasyMotion#SL(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(2,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t2)', 'n') ==# ':<C-U>call EasyMotion#T(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t2)', 'o') ==# ':<C-U>call EasyMotion#T(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-t2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(2,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl2)', 'n') ==# ':<C-U>call EasyMotion#SL(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl2)', 'o') ==# ':<C-U>call EasyMotion#SL(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(2,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl2)', 'n') ==# ':<C-U>call EasyMotion#SL(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl2)', 'o') ==# ':<C-U>call EasyMotion#SL(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(2,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl2)', 'n') ==# maparg('<Plug>(easymotion-sl2)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl2)', 'o') ==# maparg('<Plug>(easymotion-sl2)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fl2)', 'v') ==# maparg('<Plug>(easymotion-sl2)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl2)', 'n') ==# ':<C-U>call EasyMotion#TL(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl2)', 'o') ==# ':<C-U>call EasyMotion#TL(2,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(2,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl2)', 'n') ==# ':<C-U>call EasyMotion#TL(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl2)', 'o') ==# ':<C-U>call EasyMotion#TL(2,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(2,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl2)', 'n') ==# ':<C-U>call EasyMotion#TL(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl2)', 'o') ==# ':<C-U>call EasyMotion#TL(2,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tl2)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(2,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sn)', 'n') ==# ':<C-U>call EasyMotion#S(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sn)', 'o') ==# ':<C-U>call EasyMotion#S(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(-1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fn)', 'n') ==# ':<C-U>call EasyMotion#S(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fn)', 'o') ==# ':<C-U>call EasyMotion#S(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(-1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fn)', 'n') ==# ':<C-U>call EasyMotion#S(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fn)', 'o') ==# ':<C-U>call EasyMotion#S(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#S(-1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fn)', 'n') ==# maparg('<Plug>(easymotion-sn)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fn)', 'o') ==# maparg('<Plug>(easymotion-sn)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fn)', 'v') ==# maparg('<Plug>(easymotion-sn)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tn)', 'n') ==# ':<C-U>call EasyMotion#T(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tn)', 'o') ==# ':<C-U>call EasyMotion#T(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(-1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tn)', 'n') ==# ':<C-U>call EasyMotion#T(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tn)', 'o') ==# ':<C-U>call EasyMotion#T(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(-1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tn)', 'n') ==# ':<C-U>call EasyMotion#T(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tn)', 'o') ==# ':<C-U>call EasyMotion#T(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tn)', 'v') ==# '<Esc>:<C-U>call EasyMotion#T(-1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sln)', 'n') ==# ':<C-U>call EasyMotion#SL(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sln)', 'o') ==# ':<C-U>call EasyMotion#SL(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(-1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fln)', 'n') ==# ':<C-U>call EasyMotion#SL(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fln)', 'o') ==# ':<C-U>call EasyMotion#SL(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-fln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(-1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fln)', 'n') ==# ':<C-U>call EasyMotion#SL(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fln)', 'o') ==# ':<C-U>call EasyMotion#SL(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Fln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#SL(-1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fln)', 'n') ==# maparg('<Plug>(easymotion-sln)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fln)', 'o') ==# maparg('<Plug>(easymotion-sln)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-fln)', 'v') ==# maparg('<Plug>(easymotion-sln)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tln)', 'n') ==# ':<C-U>call EasyMotion#TL(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tln)', 'o') ==# ':<C-U>call EasyMotion#TL(-1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-tln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(-1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tln)', 'n') ==# ':<C-U>call EasyMotion#TL(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tln)', 'o') ==# ':<C-U>call EasyMotion#TL(-1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-Tln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(-1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tln)', 'n') ==# ':<C-U>call EasyMotion#TL(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tln)', 'o') ==# ':<C-U>call EasyMotion#TL(-1,0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-tln)', 'v') ==# '<Esc>:<C-U>call EasyMotion#TL(-1,1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:    it 'provide default <Plug> mappings for regex motion'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-w)', 'n') ==# ':<C-U>call EasyMotion#WB(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-w)', 'o') ==# ':<C-U>call EasyMotion#WB(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WB(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-b)', 'n') ==# ':<C-U>call EasyMotion#WB(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-b)', 'o') ==# ':<C-U>call EasyMotion#WB(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-b)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WB(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-w)', 'n') ==# ':<C-U>call EasyMotion#WB(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-w)', 'o') ==# ':<C-U>call EasyMotion#WB(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WB(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-W)', 'n') ==# ':<C-U>call EasyMotion#WBW(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-W)', 'o') ==# ':<C-U>call EasyMotion#WBW(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-W)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBW(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-B)', 'n') ==# ':<C-U>call EasyMotion#WBW(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-B)', 'o') ==# ':<C-U>call EasyMotion#WBW(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-B)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBW(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-W)', 'n') ==# ':<C-U>call EasyMotion#WBW(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-W)', 'o') ==# ':<C-U>call EasyMotion#WBW(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-W)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBW(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-w)', 'n') ==# ':<C-U>call EasyMotion#WBK(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-w)', 'o') ==# ':<C-U>call EasyMotion#WBK(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBK(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-b)', 'n') ==# ':<C-U>call EasyMotion#WBK(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-b)', 'o') ==# ':<C-U>call EasyMotion#WBK(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-b)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBK(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-w)', 'n') ==# ':<C-U>call EasyMotion#WBK(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-w)', 'o') ==# ':<C-U>call EasyMotion#WBK(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-w)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBK(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-e)', 'n')    ==# ':<C-U>call EasyMotion#E(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-e)', 'o')    ==# ':<C-U>call EasyMotion#E(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-e)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#E(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-ge)', 'n')   ==# ':<C-U>call EasyMotion#E(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-ge)', 'o')   ==# ':<C-U>call EasyMotion#E(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-ge)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#E(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-e)', 'n') ==# ':<C-U>call EasyMotion#E(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-e)', 'o') ==# ':<C-U>call EasyMotion#E(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-e)', 'v') ==# '<Esc>:<C-U>call EasyMotion#E(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-E)', 'n')    ==# ':<C-U>call EasyMotion#EW(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-E)', 'o')    ==# ':<C-U>call EasyMotion#EW(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-E)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#EW(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gE)', 'n')   ==# ':<C-U>call EasyMotion#EW(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gE)', 'o')   ==# ':<C-U>call EasyMotion#EW(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gE)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#EW(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-E)', 'n') ==# ':<C-U>call EasyMotion#EW(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-E)', 'o') ==# ':<C-U>call EasyMotion#EW(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-E)', 'v') ==# '<Esc>:<C-U>call EasyMotion#EW(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-e)', 'n')    ==# ':<C-U>call EasyMotion#EK(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-e)', 'o')    ==# ':<C-U>call EasyMotion#EK(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-e)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#EK(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-ge)', 'n')   ==# ':<C-U>call EasyMotion#EK(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-ge)', 'o')   ==# ':<C-U>call EasyMotion#EK(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-ge)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#EK(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-e)', 'n') ==# ':<C-U>call EasyMotion#EK(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-e)', 'o') ==# ':<C-U>call EasyMotion#EK(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-iskeyword-bd-e)', 'v') ==# '<Esc>:<C-U>call EasyMotion#EK(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-j)', 'n') ==# ':<C-U>call EasyMotion#JK(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-j)', 'o') ==# ':<C-U>call EasyMotion#JK(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-j)', 'v') ==# '<Esc>:<C-U>call EasyMotion#JK(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-k)', 'n') ==# ':<C-U>call EasyMotion#JK(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-k)', 'o') ==# ':<C-U>call EasyMotion#JK(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-k)', 'v') ==# '<Esc>:<C-U>call EasyMotion#JK(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-jk)', 'n') ==# ':<C-U>call EasyMotion#JK(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-jk)', 'o') ==# ':<C-U>call EasyMotion#JK(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-jk)', 'v') ==# '<Esc>:<C-U>call EasyMotion#JK(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-j)', 'n') ==# ':<C-U>call EasyMotion#Sol(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-j)', 'o') ==# ':<C-U>call EasyMotion#Sol(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-j)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Sol(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-k)', 'n') ==# ':<C-U>call EasyMotion#Sol(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-k)', 'o') ==# ':<C-U>call EasyMotion#Sol(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-k)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Sol(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-bd-jk)', 'n') ==# ':<C-U>call EasyMotion#Sol(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-bd-jk)', 'o') ==# ':<C-U>call EasyMotion#Sol(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-sol-bd-jk)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Sol(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-j)', 'n') ==# ':<C-U>call EasyMotion#Eol(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-j)', 'o') ==# ':<C-U>call EasyMotion#Eol(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-j)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Eol(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-k)', 'n') ==# ':<C-U>call EasyMotion#Eol(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-k)', 'o') ==# ':<C-U>call EasyMotion#Eol(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-k)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Eol(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-bd-jk)', 'n') ==# ':<C-U>call EasyMotion#Eol(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-bd-jk)', 'o') ==# ':<C-U>call EasyMotion#Eol(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-eol-bd-jk)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Eol(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-n)', 'n') ==# ':<C-U>call EasyMotion#Search(0,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-n)', 'o') ==# ':<C-U>call EasyMotion#Search(0,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-n)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-N)', 'n') ==# ':<C-U>call EasyMotion#Search(0,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-N)', 'o') ==# ':<C-U>call EasyMotion#Search(0,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-N)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-n)', 'n') ==# ':<C-U>call EasyMotion#Search(0,2,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-n)', 'o') ==# ':<C-U>call EasyMotion#Search(0,2,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-n)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,2,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-n)', 'n') ==# ':<C-U>call EasyMotion#Search(0,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-n)', 'o') ==# ':<C-U>call EasyMotion#Search(0,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-n)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-N)', 'n') ==# ':<C-U>call EasyMotion#Search(0,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-N)', 'o') ==# ':<C-U>call EasyMotion#Search(0,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-vim-N)', 'v') ==# '<Esc>:<C-U>call EasyMotion#Search(1,1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-jumptoanywhere)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-jumptoanywhere)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-jumptoanywhere)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-repeat)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-repeat)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-repeat)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-dotrepeat)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-dotrepeat)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-dotrepeat)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-next)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-next)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-next)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-prev)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-prev)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-prev)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-wl)', 'n') ==# ':<C-U>call EasyMotion#WBL(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-wl)', 'o') ==# ':<C-U>call EasyMotion#WBL(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-wl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBL(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bl)', 'n') ==# ':<C-U>call EasyMotion#WBL(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bl)', 'o') ==# ':<C-U>call EasyMotion#WBL(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBL(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-wl)', 'n') ==# ':<C-U>call EasyMotion#WBL(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-wl)', 'o') ==# ':<C-U>call EasyMotion#WBL(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-wl)', 'v') ==# '<Esc>:<C-U>call EasyMotion#WBL(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-el)', 'n')    ==# ':<C-U>call EasyMotion#EL(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-el)', 'o')    ==# ':<C-U>call EasyMotion#EL(0,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-el)', 'v')    ==# '<Esc>:<C-U>call EasyMotion#EL(1,0)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gel)', 'n')   ==# ':<C-U>call EasyMotion#EL(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gel)', 'o')   ==# ':<C-U>call EasyMotion#EL(0,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-gel)', 'v')   ==# '<Esc>:<C-U>call EasyMotion#EL(1,1)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-el)', 'n') ==# ':<C-U>call EasyMotion#EL(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-el)', 'o') ==# ':<C-U>call EasyMotion#EL(0,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-bd-el)', 'v') ==# '<Esc>:<C-U>call EasyMotion#EL(1,2)<CR>'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineforward)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineforward)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineforward)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-linebackward)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-linebackward)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-linebackward)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineanywhere)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineanywhere)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-lineanywhere)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-activate)', 'n')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-activate)', 'o')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        Expect maparg('<Plug>(easymotion-activate)', 'v')
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:describe '<Plug>(easymotion-next) & <Plug>(easymotion-prev)'
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map ; <Plug>(easymotion-next)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map , <Plug>(easymotion-prev)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-bd-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s/ <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f/ <Plug>(easymotion-fn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F/ <Plug>(easymotion-Fn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t/ <Plug>(easymotion-tn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T/ <Plug>(easymotion-Tn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s/ <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map / <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map w <Plug>(easymotion-w)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map b <Plug>(easymotion-b)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>w <Plug>(easymotion-iskeyword-w)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>b <Plug>(easymotion-iskeyword-b)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map F <Plug>(easymotion-F)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map t <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map T <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:        omap f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:        omap w <Plug>(easymotion-w)
../pack/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:        omap b <Plug>(easymotion-b)
../pack/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:    it '<Plug>(easymotion-w)'
../pack/packs-cp/opt/vim-easymotion/t/operator_pending_spec.vim:    it '<Plug>(easymotion-b)'
../pack/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map s <Plug>(easymotion-s2)
../pack/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map s <Plug>(easymotion-s2)
../pack/packs-cp/opt/vim-easymotion/t/smartsign_spec.vim:        map / <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>w <Plug>(easymotion-iskeyword-w)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>b <Plug>(easymotion-iskeyword-b)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>e <Plug>(easymotion-iskeyword-e)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>ge <Plug>(easymotion-iskeyword-ge)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>W <Plug>(easymotion-W)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>B <Plug>(easymotion-B)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>E <Plug>(easymotion-E)
../pack/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>gE <Plug>(easymotion-gE)
../pack/packs-cp/opt/vim-easymotion/autoload/EasyMotion/helper.vim:    let map = printf("<Plug>(%s)", name)
../pack/packs-cp/opt/vim-easymotion/autoload/EasyMotion/helper.vim:        call feedkeys(printf("\<Plug>(%s)", name))
../pack/packs-cp/opt/vim-easymotion/autoload/EasyMotion.vim:        " Perform <Plug>(easymotion-w)
../pack/packs-cp/opt/vim-easymotion/autoload/EasyMotion.vim:            silent! call repeat#set("\<Plug>(easymotion-dotrepeat)")
../pack/packs-cp/opt/vim-easymotion/autoload/vital/_easymotion/Over/String.vim:	return s:_split_keystring(a:str, "\\%(\<Plug>\\|<Over>\\)(.\\{-})\\zs\\|")
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:EasyMotion <Plug> table                                *easymotion-plug-table*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug> Mapping Table | Default
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-f) | <Leader>f{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-F) | <Leader>F{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-t) | <Leader>t{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-T) | <Leader>T{char}
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-w) | <Leader>w
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-W) | <Leader>W
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-b) | <Leader>b
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-B) | <Leader>B
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-e) | <Leader>e
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-E) | <Leader>E
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-ge)| <Leader>ge
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-gE)| <Leader>gE
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-j) | <Leader>j
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-k) | <Leader>k
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-n) | <Leader>n
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-N) | <Leader>N
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-s) | <Leader>s
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    More <Plug> Mapping Table         | (No assignment by default)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-f)           | See |<Plug>(easymotion-s)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-t)           | See |<Plug>(easymotion-bd-t)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-w)           | See |<Plug>(easymotion-bd-w)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-W)           | See |<Plug>(easymotion-bd-W)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-e)           | See |<Plug>(easymotion-bd-e)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-E)           | See |<Plug>(easymotion-bd-E)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-jk)          | See |<Plug>(easymotion-bd-jk)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-n)           | See |<Plug>(easymotion-bd-n)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-jumptoanywhere) | See |<Plug>(easymotion-jumptoanywhere)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-repeat)         | See |<Plug>(easymotion-repeat)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-next)           | See |<Plug>(easymotion-next)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-prev)           | See |<Plug>(easymotion-prev)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sol-j)          | See |<Plug>(easymotion-sol-j)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sol-k)          | See |<Plug>(easymotion-sol-k)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-eol-j)          | See |<Plug>(easymotion-eol-j)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-eol-k)          | See |<Plug>(easymotion-eol-k)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-w)    | See |<Plug>(easymotion-iskeyword-w)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-b)    | See |<Plug>(easymotion-iskeyword-b)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-bd-w) | See |<Plug>(easymotion-iskeyword-bd-w)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-e)    | See |<Plug>(easymotion-iskeyword-e)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-ge)   | See |<Plug>(easymotion-iskeyword-ge)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-iskeyword-bd-e) | See |<Plug>(easymotion-iskeyword-bd-e)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-n)          | See |<Plug>(easymotion-vim-n)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-N)          | See |<Plug>(easymotion-vim-N)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sl)             | See |<Plug>(easymotion-sl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fl)             | See |<Plug>(easymotion-fl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fl)             | See |<Plug>(easymotion-Fl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-fl)          | See |<Plug>(easymotion-sl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tl)             | See |<Plug>(easymotion-tl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tl)             | See |<Plug>(easymotion-Tl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-tl)          | See |<Plug>(easymotion-bd-tl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-wl)             | See |<Plug>(easymotion-wl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bl)             | See |<Plug>(easymotion-bl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-wl)          | See |<Plug>(easymotion-bd-wl)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-el)             | See |<Plug>(easymotion-el)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-gel)            | See |<Plug>(easymotion-gel)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-el)          | See |<Plug>(easymotion-bd-el)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-lineforward)    | See |<Plug>(easymotion-lineforward)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-linebackward)   | See |<Plug>(easymotion-linebackward)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-lineanywhere)   | See |<Plug>(easymotion-lineanywhere)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-s2)             | See |<Plug>(easymotion-s2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-f2)             | See |<Plug>(easymotion-f2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-F2)             | See |<Plug>(easymotion-F2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-f2)          | See |<Plug>(easymotion-s2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-t2)             | See |<Plug>(easymotion-t2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-T2)             | See |<Plug>(easymotion-T2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-t2)          | See |<Plug>(easymotion-bd-t2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sl2)            | See |<Plug>(easymotion-sl2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fl2)            | See |<Plug>(easymotion-fl2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fl2)            | See |<Plug>(easymotion-Fl2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tl2)            | See |<Plug>(easymotion-tl2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tl2)            | See |<Plug>(easymotion-Tl2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sn)             | See |<Plug>(easymotion-sn)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fn)             | See |<Plug>(easymotion-fn)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fn)             | See |<Plug>(easymotion-Fn)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-fn)          | See |<Plug>(easymotion-sn)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tn)             | See |<Plug>(easymotion-tn)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tn)             | See |<Plug>(easymotion-Tn)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-tn)          | See |<Plug>(easymotion-bd-tn)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-sln)            | See |<Plug>(easymotion-sln)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-fln)            | See |<Plug>(easymotion-fln)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Fln)            | See |<Plug>(easymotion-Fln)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-fln)         | See |<Plug>(easymotion-sln)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-tln)            | See |<Plug>(easymotion-tln)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-Tln)            | See |<Plug>(easymotion-Tln)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-bd-tln)         | See |<Plug>(easymotion-bd-tln)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-f)      | See |<Plug>(easymotion-overwin-f)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-f2)     | See |<Plug>(easymotion-overwin-f2)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-line)   | See |<Plug>(easymotion-overwin-line)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-overwin-w)      | See |<Plug>(easymotion-overwin-w)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-s)                                    *<Plug>(easymotion-s)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                     *<Plug>(easymotion-bd-f)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-t)                               *<Plug>(easymotion-bd-t)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-w)                               *<Plug>(easymotion-bd-w)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-W)                               *<Plug>(easymotion-bd-W)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-e)                               *<Plug>(easymotion-bd-e)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-E)                               *<Plug>(easymotion-bd-E)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-jk)                             *<Plug>(easymotion-bd-jk)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-n)                               *<Plug>(easymotion-bd-n)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-f){char}          *n_<Plug>(easymotion-overwin-f)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-s)| or |<Plug>(easymotion-bd-f)|, but
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>f <Plug>(easymotion-overwin-f)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>f <Plug>(easymotion-bd-f)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>f <Plug>(easymotion-bd-f)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-f2){char}{char}   *n_<Plug>(easymotion-overwin-f2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-s2)| or |<Plug>(easymotion-bd-f2)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>s <Plug>(easymotion-overwin-f2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>s <Plug>(easymotion-bd-f2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>s <Plug>(easymotion-bd-f2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-line)           *n_<Plug>(easymotion-overwin-line)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-bd-jk)| but supports moving cursor to
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>L <Plug>(easymotion-overwin-line)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>L <Plug>(easymotion-bd-jk)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>L <Plug>(easymotion-bd-jk)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-overwin-w)              *n_<Plug>(easymotion-overwin-w)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                Like |<Plug>(easymotion-bd-w)| but supports moving cursor to
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>w <Plug>(easymotion-overwin-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>w <Plug>(easymotion-bd-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>w <Plug>(easymotion-bd-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                *<Plug>(easymotion-overwin-sn)* (doesn't exist. It's like
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                |<Plug>(easymotion-sn)| but supports moving cursor to other
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-jumptoanywhere)           *<Plug>(easymotion-jumptoanywhere)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-repeat)                           *<Plug>(easymotion-repeat)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            With a Find motion (e.g. |<Plug>(easymotion-s)| ), type `<CR>`
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            <Plug>(easymotion-j) etc...) only input characters.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-next)                               *<Plug>(easymotion-next)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-prev)                               *<Plug>(easymotion-prev)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>; <Plug>(easymotion-next)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>, <Plug>(easymotion-prev)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        omap z <Plug>(easymotion-t)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:JK motion option                    *<Plug>(easymotion-j)* *<Plug>(easymotion-k)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-sol-j)| & |<Plug>(easymotion-sol-k)| to the start
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Start of Line JK motion     *<Plug>(easymotion-sol-j)* *<Plug>(easymotion-sol-k)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                 *<Plug>(easymotion-sol-bd-jk)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:End of Line JK motion       *<Plug>(easymotion-eol-j)* *<Plug>(easymotion-eol-k)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                 *<Plug>(easymotion-eol-bd-jk)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-eol-j)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-eol-K)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:iskeyword compatible word motions           *<Plug>(easymotion-iskeyword-w)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-b)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-bd-w)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-e)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-ge)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                            *<Plug>(easymotion-iskeyword-bd-e)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        motions with another |<Plug>| mappings.
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>w <Plug>(easymotion-iskeyword-w)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>b <Plug>(easymotion-iskeyword-b)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-n)                         *<Plug>(easymotion-vim-n)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-vim-N)                         *<Plug>(easymotion-vim-N)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    This is vim compatible |n| & |N| easymotion. Unlike |<Plug>(easymotion-n)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    and |<Plug>(easymotion-N)| 's direction is always forward or backward,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-sl)                                   *<Plug>(easymotion-sl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                     *<Plug>(easymotion-bd-fl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-s)|, except the range
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-fl)                                   *<Plug>(easymotion-fl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-f)|, except the range
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-Fl)                                   *<Plug>(easymotion-Fl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-F)|, except the range
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-tl)                                   *<Plug>(easymotion-tl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-t)|, except the
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-Tl)                                   *<Plug>(easymotion-Tl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-T)|, except the
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-tl)                             *<Plug>(easymotion-bd-tl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-bd-t)|, except the
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-wl)                                   *<Plug>(easymotion-wl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-w)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bl)                                   *<Plug>(easymotion-bl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-b)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-wl)                             *<Plug>(easymotion-bd-wl)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-bd-w)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-el)                                   *<Plug>(easymotion-el)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-e)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-gel)                                 *<Plug>(easymotion-gel)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-ge)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-bd-el)                             *<Plug>(easymotion-bd-el)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-iskeyword-bd-e)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-lineforward)                 *<Plug>(easymotion-lineforward)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                |<Plug>(easymotion-jumptoanywhere)|, except the range is
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-linebackward)               *<Plug>(easymotion-linebackward)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                |<Plug>(easymotion-jumptoanywhere)|, except the range is
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:<Plug>(easymotion-lineanywhere)               *<Plug>(easymotion-lineanywhere)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                This function is same as |<Plug>(easymotion-jumptoanywhere)|,
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-{find}n)* *<Plug>(easymotion-{find}2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-s2)* *<Plug>(easymotion-f2)* *<Plug>(easymotion-F2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-t2)* *<Plug>(easymotion-T2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-bd-f2)* *<Plug>(easymotion-bd-t2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-sl2)* *<Plug>(easymotion-fl2)* *<Plug>(easymotion-Fl2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-tl2)* *<Plug>(easymotion-Tl2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-bd-fl2)* *<Plug>(easymotion-bd-tl2)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-sn)* *<Plug>(easymotion-fn)* *<Plug>(easymotion-Fn)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-tn)* *<Plug>(easymotion-Tn)* *<Plug>(easymotion-bd-tn)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-sln)* *<Plug>(easymotion-fln)* *<Plug>(easymotion-Fln)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    *<Plug>(easymotion-tln)* *<Plug>(easymotion-Tln)* *<Plug>(easymotion-bd-tln)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    nmap s         <Plug>(easymotion-s2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    xmap s         <Plug>(easymotion-s2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    omap z         <Plug>(easymotion-s2)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    nmap <Leader>s <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    xmap <Leader>s <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    omap <Leader>z <Plug>(easymotion-sn)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    keymappings works after this motion(|<Plug>(easymotion-sn)|) to move next or
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    'n' key motion(e.g. |<Plug>(easymotion-sn)|). This command is inspired
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-s)|  -> 'Search for 1 character: '
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-s2)| -> 'Search for 2 characters: '
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        |<Plug>(easymotion-sn)| -> 'Search for characters: '
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    Using the 'n' key find motion (e.g. |<Plug>(easymotion-sn)|), EasyMotion
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    By default, when using |<Plug>(easymotion-next)| and/or
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    |<Plug>(easymotion-prev)|, EasyMotion highlights matched text until the
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                                                    *<Plug>(easymotion-prefix)*
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:The default leader key can be changed with the |<Plug>(easymotion-prefix)|
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map <Leader> <Plug>(easymotion-prefix)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-{motion})
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map s <Plug>(easymotion-s)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map _f <Plug>(easymotion-f)
../pack/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map <C-T> <Plug>(easymotion-T)
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-F2)	easymotion.txt	/*<Plug>(easymotion-F2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Fl)	easymotion.txt	/*<Plug>(easymotion-Fl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Fl2)	easymotion.txt	/*<Plug>(easymotion-Fl2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Fln)	easymotion.txt	/*<Plug>(easymotion-Fln)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Fn)	easymotion.txt	/*<Plug>(easymotion-Fn)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-T2)	easymotion.txt	/*<Plug>(easymotion-T2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Tl)	easymotion.txt	/*<Plug>(easymotion-Tl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Tl2)	easymotion.txt	/*<Plug>(easymotion-Tl2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Tln)	easymotion.txt	/*<Plug>(easymotion-Tln)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-Tn)	easymotion.txt	/*<Plug>(easymotion-Tn)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-E)	easymotion.txt	/*<Plug>(easymotion-bd-E)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-W)	easymotion.txt	/*<Plug>(easymotion-bd-W)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-e)	easymotion.txt	/*<Plug>(easymotion-bd-e)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-el)	easymotion.txt	/*<Plug>(easymotion-bd-el)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-f)	easymotion.txt	/*<Plug>(easymotion-bd-f)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-f2)	easymotion.txt	/*<Plug>(easymotion-bd-f2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-fl)	easymotion.txt	/*<Plug>(easymotion-bd-fl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-fl2)	easymotion.txt	/*<Plug>(easymotion-bd-fl2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-jk)	easymotion.txt	/*<Plug>(easymotion-bd-jk)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-n)	easymotion.txt	/*<Plug>(easymotion-bd-n)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-t)	easymotion.txt	/*<Plug>(easymotion-bd-t)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-t2)	easymotion.txt	/*<Plug>(easymotion-bd-t2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-tl)	easymotion.txt	/*<Plug>(easymotion-bd-tl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-tl2)	easymotion.txt	/*<Plug>(easymotion-bd-tl2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-tln)	easymotion.txt	/*<Plug>(easymotion-bd-tln)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-tn)	easymotion.txt	/*<Plug>(easymotion-bd-tn)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-w)	easymotion.txt	/*<Plug>(easymotion-bd-w)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bd-wl)	easymotion.txt	/*<Plug>(easymotion-bd-wl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-bl)	easymotion.txt	/*<Plug>(easymotion-bl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-el)	easymotion.txt	/*<Plug>(easymotion-el)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-eol-bd-jk)	easymotion.txt	/*<Plug>(easymotion-eol-bd-jk)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-eol-j)	easymotion.txt	/*<Plug>(easymotion-eol-j)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-eol-k)	easymotion.txt	/*<Plug>(easymotion-eol-k)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-f2)	easymotion.txt	/*<Plug>(easymotion-f2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-fl)	easymotion.txt	/*<Plug>(easymotion-fl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-fl2)	easymotion.txt	/*<Plug>(easymotion-fl2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-fln)	easymotion.txt	/*<Plug>(easymotion-fln)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-fn)	easymotion.txt	/*<Plug>(easymotion-fn)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-gel)	easymotion.txt	/*<Plug>(easymotion-gel)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-iskeyword-b)	easymotion.txt	/*<Plug>(easymotion-iskeyword-b)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-iskeyword-bd-e)	easymotion.txt	/*<Plug>(easymotion-iskeyword-bd-e)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-iskeyword-bd-w)	easymotion.txt	/*<Plug>(easymotion-iskeyword-bd-w)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-iskeyword-e)	easymotion.txt	/*<Plug>(easymotion-iskeyword-e)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-iskeyword-ge)	easymotion.txt	/*<Plug>(easymotion-iskeyword-ge)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-iskeyword-w)	easymotion.txt	/*<Plug>(easymotion-iskeyword-w)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-j)	easymotion.txt	/*<Plug>(easymotion-j)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-jumptoanywhere)	easymotion.txt	/*<Plug>(easymotion-jumptoanywhere)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-k)	easymotion.txt	/*<Plug>(easymotion-k)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-lineanywhere)	easymotion.txt	/*<Plug>(easymotion-lineanywhere)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-linebackward)	easymotion.txt	/*<Plug>(easymotion-linebackward)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-lineforward)	easymotion.txt	/*<Plug>(easymotion-lineforward)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-next)	easymotion.txt	/*<Plug>(easymotion-next)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-overwin-sn)	easymotion.txt	/*<Plug>(easymotion-overwin-sn)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-prefix)	easymotion.txt	/*<Plug>(easymotion-prefix)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-prev)	easymotion.txt	/*<Plug>(easymotion-prev)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-repeat)	easymotion.txt	/*<Plug>(easymotion-repeat)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-s)	easymotion.txt	/*<Plug>(easymotion-s)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-s2)	easymotion.txt	/*<Plug>(easymotion-s2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-sl)	easymotion.txt	/*<Plug>(easymotion-sl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-sl2)	easymotion.txt	/*<Plug>(easymotion-sl2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-sln)	easymotion.txt	/*<Plug>(easymotion-sln)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-sn)	easymotion.txt	/*<Plug>(easymotion-sn)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-sol-bd-jk)	easymotion.txt	/*<Plug>(easymotion-sol-bd-jk)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-sol-j)	easymotion.txt	/*<Plug>(easymotion-sol-j)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-sol-k)	easymotion.txt	/*<Plug>(easymotion-sol-k)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-t2)	easymotion.txt	/*<Plug>(easymotion-t2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-tl)	easymotion.txt	/*<Plug>(easymotion-tl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-tl2)	easymotion.txt	/*<Plug>(easymotion-tl2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-tln)	easymotion.txt	/*<Plug>(easymotion-tln)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-tn)	easymotion.txt	/*<Plug>(easymotion-tn)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-vim-N)	easymotion.txt	/*<Plug>(easymotion-vim-N)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-vim-n)	easymotion.txt	/*<Plug>(easymotion-vim-n)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-wl)	easymotion.txt	/*<Plug>(easymotion-wl)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-{find}2)	easymotion.txt	/*<Plug>(easymotion-{find}2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:<Plug>(easymotion-{find}n)	easymotion.txt	/*<Plug>(easymotion-{find}n)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:n_<Plug>(easymotion-overwin-f)	easymotion.txt	/*n_<Plug>(easymotion-overwin-f)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:n_<Plug>(easymotion-overwin-f2)	easymotion.txt	/*n_<Plug>(easymotion-overwin-f2)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:n_<Plug>(easymotion-overwin-line)	easymotion.txt	/*n_<Plug>(easymotion-overwin-line)*
../pack/packs-cp/opt/vim-easymotion/doc/tags:n_<Plug>(easymotion-overwin-w)	easymotion.txt	/*n_<Plug>(easymotion-overwin-w)*
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeBegin")
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>=  <Plug>FontsizeBegin
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeInc", "n")
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>+  <Plug>FontsizeInc
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeDec", "n")
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>-  <Plug>FontsizeDec
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:if !hasmapto("<Plug>FontsizeDefault", "n")
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>0  <Plug>FontsizeDefault
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeBegin       <SID>begin<SID>(fontsize)
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeInc         <SID>inc<SID>(fontsize)
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeDec         <SID>dec<SID>(fontsize)
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeDefault     <SID>default<SID>(fontsize)
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeSetDefault  <SID>setDefault<SID>(fontsize)
../pack/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:nmap <silent> <Plug>FontsizeQuit        <SID>quit
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>=  <Plug>FontsizeBegin
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>+  <Plug>FontsizeInc
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>-  <Plug>FontsizeDec
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>0  <Plug>FontsizeDefault
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <F8>                        <Plug>FontsizeBegin
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <SID>DisableFontsizeInc     <Plug>FontsizeInc
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <SID>DisableFontsizeDec     <Plug>FontsizeDec
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <SID>DisableFontsizeDefault <Plug>FontsizeDefault
../pack/packs-cp/opt/vim-fontsize/doc/fontsize.txt:Any mapping to <Plug>FontsizeXxx overrides the default mappings, even if that
../pack/packs-cp/opt/ctrlp.vim/plugin/ctrlp.vim:exe 'nn <silent> <plug>(ctrlp) :<c-u>'.g:ctrlp_cmd.'<cr>'
../pack/packs-cp/opt/ctrlp.vim/plugin/ctrlp.vim:if g:ctrlp_map != '' && !hasmapto('<plug>(ctrlp)')
../pack/packs-cp/opt/ctrlp.vim/plugin/ctrlp.vim:	exe 'map' g:ctrlp_map '<plug>(ctrlp)'
../pack/packs-cp/opt/ctrlp.vim/doc/ctrlp.cnx:    + 添加启动方式 <plug>(ctrlp) 。
../pack/packs-cp/opt/ctrlp.vim/doc/ctrlp.txt:    + Add <plug>(ctrlp) for launch CtrlP.
../pack/packs-cp/opt/limelight.vim/plugin/limelight.vim:nnoremap <silent> <Plug>(Limelight) :set opfunc=limelight#operator<CR>g@
../pack/packs-cp/opt/limelight.vim/plugin/limelight.vim:xnoremap <silent> <Plug>(Limelight) :Limelight<CR>
../pack/packs-cp/opt/limelight.vim/README.md:You can invoke `:Limelight` for a visual range. There are also `<Plug>`
../pack/packs-cp/opt/limelight.vim/README.md:nmap <Leader>l <Plug>(Limelight)
../pack/packs-cp/opt/limelight.vim/README.md:xmap <Leader>l <Plug>(Limelight)
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillAlt         :call <SID>GotoBuffer('#', '')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangAlt     :call <SID>GotoBuffer('#', '!')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBack        :call <SID>GotoBuffer('bufback', '')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBack    :call <SID>GotoBuffer('bufback', '!')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillForward     :call <SID>GotoBuffer('bufforward', '')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangForward :call <SID>GotoBuffer('bufforward', '!')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBun         :call <SID>BufKill('bun', '')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBun     :call <SID>BufKill('bun', '!')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBd          :call <SID>BufKill('bd', '')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBd      :call <SID>BufKill('bd', '!')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBw          :call <SID>BufKill('bw', '')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillBangBw      :call <SID>BufKill('bw', '!')<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:noremap <Plug>BufKillUndo        :call <SID>UndoKill()<CR>
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bb',   '<Plug>BufKillBack')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bf',   '<Plug>BufKillForward')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bun',  '<Plug>BufKillBun')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bun', '<Plug>BufKillBangBun')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bd',   '<Plug>BufKillBd')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bd',  '<Plug>BufKillBangBd')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bw',   '<Plug>BufKillBw')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bw',  '<Plug>BufKillBangBw')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bundo','<Plug>BufKillUndo')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>ba',   '<Plug>BufKillAlt')
../pack/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:    call <SID>CreateUniqueMapping('<C-^>', '<Plug>BufKillAlt', 'AllowDuplicate')
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:if !hasmapto('<Plug>(dirvish_git_prev_file)') && maparg('[f', 'n') ==? ''
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  silent! nmap <buffer> <unique> <silent> [f <Plug>(dirvish_git_prev_file)
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:if !hasmapto('<Plug>(dirvish_git_next_file)') && maparg(']f', 'n') ==? ''
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  silent! nmap <buffer> <unique> <silent> ]f <Plug>(dirvish_git_next_file)
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:if maparg('X', 'n') ==? '<Plug>(dirvish_arg)'
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  nmap <buffer><silent><expr> X "\<Plug>(dirvish_arg):<C-u>call dirvish_git#reload()<CR>"
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:  xmap <buffer><silent><expr> X "\<Plug>(dirvish_arg):<C-u>call dirvish_git#reload()<CR>"
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:nnoremap <Plug>(dirvish_git_next_file) :<C-u>call dirvish_git#jump_to_next_file()<CR>
../pack/packs-cp/opt/vim-dirvish-git/plugin/dirvish_git.vim:nnoremap <Plug>(dirvish_git_prev_file) :<C-u>call dirvish_git#jump_to_prev_file()<CR>
../pack/packs-cp/opt/vim-dirvish-git/README.md:autocmd vimrc FileType dirvish nmap <silent><buffer><C-n> <Plug>(dirvish_git_next_file)
../pack/packs-cp/opt/vim-dirvish-git/README.md:autocmd vimrc FileType dirvish nmap <silent><buffer><C-p> <Plug>(dirvish_git_prev_file)
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:  if !hasmapto('<Plug>CalendarV')
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>cal <Plug>CalendarV
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:  if !hasmapto('<Plug>CalendarH')
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>caL <Plug>CalendarH
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:nnoremap <silent> <Plug>CalendarV :cal calendar#show(0)<CR>
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:nnoremap <silent> <Plug>CalendarH :cal calendar#show(1)<CR>
../pack/packs-cp/opt/calendar-vim/plugin/calendar.vim:nnoremap <silent> <Plug>CalendarT :cal calendar#show(2)<CR>
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarClose  :call calendar#close()<cr>
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarDoAction  :call calendar#action()<cr>
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarDoAction  :call calendar#action()<cr>
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarGotoToday :call calendar#show(b:CalendarDir)<cr>
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nnoremap <silent> <buffer> <Plug>CalendarShowHelp  :call <SID>CalendarHelp()<cr>
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarReDisplay :call calendar#show(' . a:dir . ',' . a:vyear . ',' . a:vmnth . ')<cr>'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoPrevMonth :call calendar#action("<' . pnav . '")<cr>'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoNextMonth :call calendar#action("' . nnav . '>")<cr>'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoPrevYear  :call calendar#action("PrevYear")<cr>'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nnoremap <silent> <buffer> <Plug>CalendarGotoNextYear  :call calendar#action("NextYear")<cr>'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  nmap <buffer> <2-LeftMouse> <Plug>CalendarDoAction
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['close'] . ' <Plug>CalendarClose'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['do_action'] . ' <Plug>CalendarDoAction'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_today'] . ' <Plug>CalendarGotoToday'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['show_help'] . ' <Plug>CalendarShowHelp'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['redisplay'] . ' <Plug>CalendarRedisplay'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_next_month'] . ' <Plug>CalendarGotoNextMonth'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_prev_month'] . ' <Plug>CalendarGotoPrevMonth'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_next_year'] . ' <Plug>CalendarGotoNextYear'
../pack/packs-cp/opt/calendar-vim/autoload/calendar.vim:  execute 'nmap <buffer> ' . s:calendar_keys['goto_prev_year'] . ' <Plug>CalendarGotoPrevYear'
../pack/packs-cp/opt/quick-scope/plugin/quick_scope.vim:      execute printf(mapmode . ' <expr> <Plug>(QuickScope%s) quick_scope#Ready() . quick_scope#Aim("%s") . quick_scope#Reload() . quick_scope#DoubleTap()', motion, motion)
../pack/packs-cp/opt/quick-scope/plugin/quick_scope.vim:    execute printf('nnoremap <silent> <Plug>(QuickScope%s) :<C-U>call quick_scope#Ready() \| execute "normal!" v:count1 . quick_scope#Aim("%s") \| call quick_scope#Reload() \| call quick_scope#DoubleTap()<CR>', motion, motion)
../pack/packs-cp/opt/quick-scope/plugin/quick_scope.vim:        execute printf(mapmode . ' <unique> %s <Plug>(QuickScope%s)', motion, motion)
../pack/packs-cp/opt/quick-scope/plugin/quick_scope.vim:nnoremap <silent> <plug>(QuickScopeToggle) :call quick_scope#Toggle()<cr>
../pack/packs-cp/opt/quick-scope/plugin/quick_scope.vim:xnoremap <silent> <plug>(QuickScopeToggle) :<c-u>call quick_scope#Toggle()<cr>
../pack/packs-cp/opt/quick-scope/README.md:nmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/quick-scope/README.md:xmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/quick-scope/doc/quick-scope.txt:                                                    *<plug>(QuickScopeToggle)*
../pack/packs-cp/opt/quick-scope/doc/quick-scope.txt:  nmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/quick-scope/doc/quick-scope.txt:  xmap <leader>q <plug>(QuickScopeToggle)
../pack/packs-cp/opt/quick-scope/doc/quick-scope.txt:                        - Changed highlight on keys mappings to <Plug> mappings
../pack/packs-cp/opt/quick-scope/doc/tags:<plug>(QuickScopeToggle)	quick-scope.txt	/*<plug>(QuickScopeToggle)*
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-open) :<C-u>call openbrowser#_keymap_open('n')<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-open) :<C-u>call openbrowser#_keymap_open('v')<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-open-incognito) :<C-u>call openbrowser#_keymap_open('n', 0, ['--incognito'])<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-open-incognito) :<C-u>call openbrowser#_keymap_open('v', 0, ['--incognito'])<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-search) :<C-u>call openbrowser#_keymap_search('n')<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-search) :<C-u>call openbrowser#_keymap_search('v')<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:nnoremap <silent> <Plug>(openbrowser-smart-search) :<C-u>call openbrowser#_keymap_smart_search('n')<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:xnoremap <silent> <Plug>(openbrowser-smart-search) :<C-u>call openbrowser#_keymap_smart_search('v')<CR>
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    nmenu <silent> PopUp.Open\ URL <Plug>(openbrowser-open)
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    xmenu <silent> PopUp.Open\ URL <Plug>(openbrowser-open)
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    nmenu <silent> PopUp.Open\ Word(s) <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    xmenu <silent> PopUp.Open\ Word(s) <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    nmenu <silent> PopUp.Open\ URL\ or\ Word(s) <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/plugin/openbrowser.vim:    xmenu <silent> PopUp.Open\ URL\ or\ Word(s) <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/autoload/openbrowser.vim:" <Plug>(openbrowser-open)
../pack/packs-cp/opt/open-browser.vim/autoload/openbrowser.vim:" <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/autoload/openbrowser.vim:" <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/autoload/vital/__openbrowser__/OpenBrowser.vim:" <Plug>(openbrowser-open)
../pack/packs-cp/opt/open-browser.vim/autoload/vital/__openbrowser__/OpenBrowser.vim:" <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/autoload/vital/__openbrowser__/OpenBrowser.vim:" <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap gx <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	vmap gx <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap map-you-like <Plug>(openbrowser-open)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	vmap map-you-like <Plug>(openbrowser-open)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap map-you-like <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	" Search selected word. vmap map-you-like <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	nmap map-you-like <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	vmap map-you-like <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-open)				*<Plug>(openbrowser-open)*
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-open)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-open-incognito)	*<Plug>(openbrowser-open-incognito)*
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-open-incognito)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	Same as |<Plug>(openbrowser-open)|, but with "--incognito" command
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-search)				*<Plug>(openbrowser-search)*
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:n <Plug>(openbrowser-smart-search)		*<Plug>(openbrowser-smart-search)*
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	Call |<Plug>(openbrowser-open)| and if it fails,
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:v <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	Call |<Plug>(openbrowser-open)| and if it fails,
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	If you execute |<Plug>(openbrowser-open)| on URI like: >
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	If you execute |<Plug>(openbrowser-open)| on URI like: >
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	If you execute |<Plug>(openbrowser-open)| on URI like: >
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	This is same as |<Plug>(openbrowser-open)|.
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	This is same as |<Plug>(openbrowser-search)|.
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:	This is same as |<Plug>(openbrowser-smart-search)|.
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:- Add <Plug>(openbrowser-search)
../pack/packs-cp/opt/open-browser.vim/doc/openbrowser.txt:- Add <Plug>(openbrowser-smart-search)
../pack/packs-cp/opt/open-browser.vim/doc/tags:<Plug>(openbrowser-open)	openbrowser.txt	/*<Plug>(openbrowser-open)*
../pack/packs-cp/opt/open-browser.vim/doc/tags:<Plug>(openbrowser-open-incognito)	openbrowser.txt	/*<Plug>(openbrowser-open-incognito)*
../pack/packs-cp/opt/open-browser.vim/doc/tags:<Plug>(openbrowser-search)	openbrowser.txt	/*<Plug>(openbrowser-search)*
../pack/packs-cp/opt/open-browser.vim/doc/tags:<Plug>(openbrowser-smart-search)	openbrowser.txt	/*<Plug>(openbrowser-smart-search)*
../pack/packs-cp/opt/vim-repeat/README.markdown:    silent! call repeat#set("\<Plug>MyWonderfulMap", v:count)
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:"   silent! call repeat#set("\<Plug>MappingToRepeatCommand",3)
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:"   silent! call repeat#setreg("\<Plug>MappingToRepeatCommand", v:register)
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:"   nnoremap <silent> <Plug>MyMap
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatDot)      :<C-U>if !repeat#run(v:count)<Bar>echoerr repeat#errmsg()<Bar>endif<CR>
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\<Lt>C-R>",v:count)<CR>
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:if !hasmapto('<Plug>(RepeatDot)', 'n')
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap . <Plug>(RepeatDot)
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:if !hasmapto('<Plug>(RepeatUndo)', 'n')
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap u <Plug>(RepeatUndo)
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:if maparg('U','n') ==# '' && !hasmapto('<Plug>(RepeatUndoLine)', 'n')
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap U <Plug>(RepeatUndoLine)
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:if !hasmapto('<Plug>(RepeatRedo)', 'n')
../pack/packs-cp/opt/vim-repeat/autoload/repeat.vim:    nmap <C-R> <Plug>(RepeatRedo)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>m'gv``
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nmap <silent> %  <Plug>(MatchitNormalForward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nmap <silent> g% <Plug>(MatchitNormalBackward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xmap <silent> %  <Plug>(MatchitVisualForward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xmap <silent> g% <Plug>(MatchitVisualBackward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:omap <silent> %  <Plug>(MatchitOperationForward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:omap <silent> g% <Plug>(MatchitOperationBackward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:omap <silent> [% <Plug>(MatchitOperationMultiBackward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:omap <silent> ]% <Plug>(MatchitOperationMultiForward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
../pack/packs-cp/opt/vim-matchit/plugin/matchit.vim:xmap a% <Plug>(MatchitVisualTextObject)
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfDelete :call <SID>DeleteSurroundingFunctionCall()<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  silent! call repeat#set("\<Plug>DsfDelete")
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfNextDelete :call <SID>DeleteNextSurroundingFunctionCall()<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  silent! call repeat#set("\<Plug>DsfNextDelete")
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfChange :call <SID>ChangeSurroundingFunctionCall()<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:nnoremap <silent> <Plug>DsfNextChange :call <SID>ChangeNextSurroundingFunctionCall()<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:onoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:xnoremap <Plug>DsfTextObjectA :<c-u>call <SID>FunctionCallTextObject('a')<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:onoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:xnoremap <Plug>DsfTextObjectI :<c-u>call <SID>FunctionCallTextObject('i')<cr>
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap dsf <Plug>DsfDelete
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap csf <Plug>DsfChange
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap dsnf <Plug>DsfNextDelete
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  nmap csnf <Plug>DsfNextChange
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  omap af <Plug>DsfTextObjectA
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  xmap af <Plug>DsfTextObjectA
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  omap if <Plug>DsfTextObjectI
../pack/packs-cp/opt/dsf.vim/plugin/dsf.vim:  xmap if <Plug>DsfTextObjectI
../pack/packs-cp/opt/dsf.vim/README.md:If you'd like to set your own mappings, instead of using the built-ins, simply set the variable `g:dsf_no_mappings` to `1` and use the <Plug> mappings provided by the plugin:
../pack/packs-cp/opt/dsf.vim/README.md:nmap dsf <Plug>DsfDelete
../pack/packs-cp/opt/dsf.vim/README.md:nmap csf <Plug>DsfChange
../pack/packs-cp/opt/dsf.vim/README.md:nmap dsnf <Plug>DsfNextDelete
../pack/packs-cp/opt/dsf.vim/README.md:nmap csnf <Plug>DsfNextChange
../pack/packs-cp/opt/dsf.vim/README.md:omap af <Plug>DsfTextObjectA
../pack/packs-cp/opt/dsf.vim/README.md:xmap af <Plug>DsfTextObjectA
../pack/packs-cp/opt/dsf.vim/README.md:omap if <Plug>DsfTextObjectI
../pack/packs-cp/opt/dsf.vim/README.md:xmap if <Plug>DsfTextObjectI
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:set the variable `g:dsf_no_mappings` to `1` and use the <Plug> mappings
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap dsf <Plug>DsfDelete
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap csf <Plug>DsfChange
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap dsnf <Plug>DsfNextDelete
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    nmap csnf <Plug>DsfNextChange
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    omap af <Plug>DsfTextObjectA
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    xmap af <Plug>DsfTextObjectA
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    omap if <Plug>DsfTextObjectI
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:    xmap if <Plug>DsfTextObjectI
../pack/packs-cp/opt/dsf.vim/doc/dsf.txt:mappings. You'll still have the <Plug> maps provided to you that you can map
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:  if maparg('<Plug>AirlineSelectTab1', 'n') is# ':1tabn<CR>'
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:      exe printf('noremap <silent> <Plug>AirlineSelectTab%d :%dtabn<CR>', i%10, i)
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:        exe printf('noremap <silent> <Plug>AirlineSelectTab%d :%dtabn<CR>', i, i-10)
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:  noremap <silent> <Plug>AirlineSelectPrevTab gT
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/tabs.vim:  noremap <silent> <Plug>AirlineSelectNextTab :<C-U>exe repeat(':tabn\|', v:count1)<cr>
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<F5>','<Plug>XTablineToggleTabs')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader><F5>','<Plug>XTablineToggleFiltering')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<BS>','<Plug>XTablineSelectBuffer')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys(']l','<Plug>XTablineNextBuffer')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('[l','<Plug>XTablinePrevBuffer')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader>tr','<Plug>XTablineReopen')
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineToggleTabs <SID>ToggleTabs
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineToggleFiltering <SID>ToggleFiltering
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineSelectBuffer <SID>SelectBuffer
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineNextBuffer <SID>NextBuffer
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablinePrevBuffer <SID>PrevBuffer
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:    nnoremap <unique> <script> <Plug>XTablineReopen <SID>ReopenLastTab
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdc <Plug>XTablineCdCurrent
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdd <Plug>XTablineCdDown1
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd2 <Plug>XTablineCdDown2
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd3 <Plug>XTablineCdDown3
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdh <Plug>XTablineCdHome
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdCurrent :cd %:p:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdDown1   :cd %:p:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdDown2   :cd %:p:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdDown3   :cd %:p:h:h:h:h<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        nnoremap <unique> <script> <Plug>XTablineCdHome    :cd ~<cr>:call airline#util#doautocmd('BufAdd')<cr>:pwd<cr>
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:        exe printf('noremap <silent> <Plug>AirlineSelectTab%d :call <SID>select_tab(%d)<CR>', i%10, i-1)
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:        exe printf('noremap <silent> <Plug>AirlineSelectTab%02d :call <SID>select_tab(%d)<CR>', i, i-start_idx)
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:    noremap <silent> <Plug>AirlineSelectPrevTab :<C-u>call <SID>jump_to_tab(-v:count1)<CR>
../pack/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/buffers.vim:    noremap <silent> <Plug>AirlineSelectNextTab :<C-u>call <SID>jump_to_tab(v:count1)<CR>
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  created, vim-airline just exposes those `<Plug>AirlineSeelctTab` keys
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>1 <Plug>AirlineSelectTab1
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>2 <Plug>AirlineSelectTab2
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>3 <Plug>AirlineSelectTab3
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>4 <Plug>AirlineSelectTab4
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>5 <Plug>AirlineSelectTab5
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>6 <Plug>AirlineSelectTab6
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>7 <Plug>AirlineSelectTab7
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>8 <Plug>AirlineSelectTab8
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>9 <Plug>AirlineSelectTab9
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>0 <Plug>AirlineSelectTab0
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>- <Plug>AirlineSelectPrevTab
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>+ <Plug>AirlineSelectNextTab
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>10 <Plug>AirlineSelectTab10
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>11 <Plug>AirlineSelectTab11
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>12 <Plug>AirlineSelectTab12
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>13 <Plug>AirlineSelectTab13
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  The <Plug>AirlineSelect<Prev/Next>Tab mapping handles counts as well,
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>01 <Plug>AirlineSelectTab01
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>02 <Plug>AirlineSelectTab02
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>03 <Plug>AirlineSelectTab03
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  `<Plug>AirlineSelectTab67` to reference buffer 67.
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  Note: To avoid ambiguity, there won't be <Plug>AirlineSelectTab1
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  - <Plug>AirlineSelectTab9 maps in mode 2 and 3.
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <F5>          <Plug>XTablineToggleTabs
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader><F5>  <Plug>XTablineToggleFiltering
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>tr    <Plug>XTablineReopen <SID>ReopenLastTab
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap ]l            <Plug>XTablineNextBuffer
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap [l            <Plug>XTablinePrevBuffer
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <BS>          <Plug>XTablineSelectBuffer
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdc       <Plug>XTablineCdCurrent
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdd       <Plug>XTablineCdDown1
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd2       <Plug>XTablineCdDown2
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd3       <Plug>XTablineCdDown3
../pack/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdh       <Plug>XTablineCdHome
../pack/packs-cp/opt/supertab/plugin/supertab.vim:  if map =~ '<Plug>'
../pack/packs-cp/opt/supertab/plugin/supertab.vim:    let plug = substitute(map, '.\{-}\(<Plug>\w\+\).*', '\1', '')
../pack/packs-cp/opt/supertab/plugin/supertab.vim:    let map = substitute(map, '.\{-}\(<Plug>\w\+\).*', plug_map, '')
../pack/packs-cp/opt/supertab/plugin/supertab.vim:  imap <script> <Plug>SuperTabForward <c-r>=SuperTab('n')<cr>
../pack/packs-cp/opt/supertab/plugin/supertab.vim:  imap <script> <Plug>SuperTabBackward <c-r>=SuperTab('p')<cr>
../pack/packs-cp/opt/supertab/plugin/supertab.vim:  exec 'imap ' . g:SuperTabMappingForward . ' <Plug>SuperTabForward'
../pack/packs-cp/opt/supertab/plugin/supertab.vim:  exec 'imap ' . g:SuperTabMappingBackward . ' <Plug>SuperTabBackward'
../pack/packs-cp/opt/supertab/plugin/supertab.vim:    elseif maparg('<CR>', 'i') =~ '<Plug>delimitMateCR'
../pack/packs-cp/opt/vim-fugitive/plugin/fugitive.vim:  let flags = a:flags . (a:rhs =~# '<Plug>' ? '' : '<script>')
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    let flags = (a:0 ? a:1 : '') . (a:rhs =~# '<Plug>' ? '' : '<script>')
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    if v:version >= 704 && get(maparg('<Plug><cfile>', 'c', 0, 1), 'expr')
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:        let bufnames = [eval(maparg('<Plug><cfile>', 'c'))]
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  exe 'cnoremap <buffer> <expr> <Plug><cfile>' (a:0 ? a:1 : 'fugitive#Cfile()')
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  let b:undo_ftplugin = get(b:, 'undo_ftplugin', 'exe') . '|sil! exe "cunmap <buffer> <Plug><cfile>"'
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', 'gf',          '<SID>:find <Plug><cfile><CR>', '<silent><unique>', 1)
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', '<C-W>f',     '<SID>:sfind <Plug><cfile><CR>', '<silent><unique>', 1)
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', '<C-W><C-F>', '<SID>:sfind <Plug><cfile><CR>', '<silent><unique>', 1)
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('n', '<C-W>gf',  '<SID>:tabfind <Plug><cfile><CR>', '<silent><unique>', 1)
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    call s:Map('c', '<C-R><C-F>', '<Plug><cfile>', '<silent><unique>', 1)
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:  let old_browsex = maparg('<Plug>NetrwBrowseX', 'n')
../pack/packs-cp/opt/vim-fugitive/autoload/fugitive.vim:    exe 'nnoremap <silent> <buffer> <Plug>NetrwBrowseX' new_browsex
../pack/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
../pack/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
../pack/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
../pack/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
../pack/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> <expr> <Plug>(fern-quit-or-close-preview) fern_preview#smart_preview("\<Plug>(fern-action-preview:close)", ":q\<CR>")
../pack/packs-cp/opt/fern-preview.vim/README.md:  nmap <silent> <buffer> q <Plug>(fern-quit-or-close-preview)
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:open)   :<C-u>call fern_preview#open()<CR>
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:close)  :<C-u>call fern_preview#close()<CR>
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:toggle) :<C-u>call fern_preview#toggle()<CR>
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:enable)  :<C-u>call fern_preview#enable_auto_preview()<CR>
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:disable) :<C-u>call fern_preview#disable_auto_preview()<CR>
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:auto:toggle)  :<C-u>call fern_preview#toggle_auto_preview()<CR>
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:scroll:down:half) :<C-u>call fern_preview#half_down()<CR>
../pack/packs-cp/opt/fern-preview.vim/autoload/fern/scheme/file/mapping/preview.vim:  nnoremap <silent> <buffer> <Plug>(fern-action-preview:scroll:up:half)   :<C-u>call fern_preview#half_up()<CR>
../pack/packs-cp/opt/colorizer/plugin/colorizer.vim:" 	nmap ,tc <Plug>Colorizer
../pack/packs-cp/opt/colorizer/plugin/colorizer.vim:nnoremap <silent> <Plug>Colorizer :ColorToggle<CR>
../pack/packs-cp/opt/colorizer/plugin/colorizer.vim:if !hasmapto("<Plug>Colorizer") && (!exists("g:colorizer_nomap") || g:colorizer_nomap == 0)
../pack/packs-cp/opt/colorizer/plugin/colorizer.vim:  nmap <unique> <Leader>tc <Plug>Colorizer
../pack/packs-cp/opt/vim-startify/plugin/startify.vim:nnoremap <silent><plug>(startify-open-buffers) :<c-u>call startify#open_buffers()<cr>
../pack/packs-cp/opt/vim-startify/doc/startify.txt:    autocmd User Startified nmap <buffer> o <plug>(startify-open-buffers)
../pack/packs-cp/opt/ale/plugin/ale.vim:" <Plug> mappings for commands
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next) :ALENext<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_error) :ALENext -error<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_last) :ALELast<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinitionIn -vsplit<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:inoremap <silent> <Plug>(ale_complete) <C-\><C-O>:ALEComplete<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_import) :ALEImport<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_rename) :ALERename<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_filerename) :ALEFileRename<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_code_action) :ALECodeAction<Return>
../pack/packs-cp/opt/ale/plugin/ale.vim:nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection<Return>
../pack/packs-cp/opt/ale/README.md:ALE offers some commands with `<Plug>` keybinds for moving between warnings and
../pack/packs-cp/opt/ale/README.md:nmap <silent> <C-k> <Plug>(ale_previous_wrap)
../pack/packs-cp/opt/ale/README.md:nmap <silent> <C-j> <Plug>(ale_next_wrap)
../pack/packs-cp/opt/ale/autoload/ale/completion.vim:inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o><C-p>
../pack/packs-cp/opt/ale/autoload/ale/completion.vim:nnoremap <silent> <Plug>(ale_show_completion_menu) :call ale#completion#RestoreCompletionOptions()<CR>
../pack/packs-cp/opt/ale/autoload/ale/completion.vim:cnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
../pack/packs-cp/opt/ale/autoload/ale/completion.vim:vnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
../pack/packs-cp/opt/ale/autoload/ale/completion.vim:onoremap <silent> <Plug>(ale_show_completion_menu) <Nop>
../pack/packs-cp/opt/ale/autoload/ale/completion.vim:        call ale#util#FeedKeys("\<Plug>(ale_show_completion_menu)")
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  AssertEqual [["\<Plug>(ale_show_completion_menu)"]], g:feedkeys_calls
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:    silent map <Plug>(ale_show_completion_menu)
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  \   'n  <Plug>(ale_show_completion_menu) * :call ale#completion#RestoreCompletionOptions()<CR>',
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  \   'o  <Plug>(ale_show_completion_menu) * <Nop>',
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:  \   'v  <Plug>(ale_show_completion_menu) * <Nop>',
../pack/packs-cp/opt/ale/test/completion/test_completion_events.vader:Execute(Running the normal mode <Plug> keybind should reset the settings):
../pack/packs-cp/opt/ale/doc/ale.txt:  nmap <F8> <Plug>(ale_fix)
../pack/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_complete)` is defined for this command. >
../pack/packs-cp/opt/ale/doc/ale.txt:    imap <C-Space> <Plug>(ale_complete)
../pack/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_documentation)` is defined for this command.
../pack/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_find_references)` is defined for this command.
../pack/packs-cp/opt/ale/doc/ale.txt:  nnoremap <silent> <Plug>(my_mapping) :ALEFindReferences -relative<Return>
../pack/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_fix)` is defined for this command.
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition)`           - `:ALEGoToDefinition`
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition_in_tab)`    - `:ALEGoToDefinition -tab`
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition_in_split)`  - `:ALEGoToDefinition -split`
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_definition_in_vsplit)` - `:ALEGoToDefinition -vsplit`
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition)`           - `:ALEGoToTypeDefinition`
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition_in_tab)`    - `:ALEGoToTypeDefinition -tab`
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition_in_split)`  - `:ALEGoToTypeDefinition -split`
../pack/packs-cp/opt/ale/doc/ale.txt:  `<Plug>(ale_go_to_type_definition_in_vsplit)` - `:ALEGoToTypeDefinition -vsplit`
../pack/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_hover)` is defined for this command.
../pack/packs-cp/opt/ale/doc/ale.txt:  A Plug mapping `<Plug>(ale_import)` is defined for this command. This
../pack/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_lint)` is defined for this command.
../pack/packs-cp/opt/ale/doc/ale.txt:  The following |<Plug>| mappings are defined for the commands: >
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous) - ALEPrevious
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_wrap) - ALEPreviousWrap
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_error) - ALEPrevious -error
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_wrap_error) - ALEPrevious -wrap -error
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_warning) - ALEPrevious -warning
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_previous_wrap_warning) - ALEPrevious -wrap -warning
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next) - ALENext
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_wrap) - ALENextWrap
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_error) - ALENext -error
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_wrap_error) - ALENext -wrap -error
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_warning) - ALENext -warning
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_next_wrap_warning) - ALENext -wrap -warning
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_first) - ALEFirst
../pack/packs-cp/opt/ale/doc/ale.txt:  <Plug>(ale_last) - ALELast
../pack/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-k> <Plug>(ale_previous)
../pack/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-j> <Plug>(ale_next)
../pack/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-k> <Plug>(ale_previous_wrap)
../pack/packs-cp/opt/ale/doc/ale.txt:  nmap <silent> <C-j> <Plug>(ale_next_wrap)
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEToggle|        - `<Plug>(ale_toggle)`
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEEnable|        - `<Plug>(ale_enable)`
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEDisable|       - `<Plug>(ale_disable)`
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEToggleBuffer|  - `<Plug>(ale_toggle_buffer)`
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEEnableBuffer|  - `<Plug>(ale_enable_buffer)`
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEDisableBuffer| - `<Plug>(ale_disable_buffer)`
../pack/packs-cp/opt/ale/doc/ale.txt:  A plug mapping `<Plug>(ale_detail)` is defined for this command.
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEReset|       - `<Plug>(ale_reset)`
../pack/packs-cp/opt/ale/doc/ale.txt:  |ALEResetBuffer| - `<Plug>(ale_reset_buffer)`
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <silent><expr> <Plug>(incsearch-forward)  incsearch#go({'command': '/'})
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <silent><expr> <Plug>(incsearch-backward) incsearch#go({'command': '?'})
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <silent><expr> <Plug>(incsearch-stay)     incsearch#go({'command': '/', 'is_stay': 1})
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:"     e.g. `<Plug>(incsearch-nohl)n` works but `n<Plug>(incsearch-nohl)` doesn't
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(incsearch-nohl)  incsearch#autocmd#auto_nohlsearch(1)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(incsearch-nohl0) incsearch#autocmd#auto_nohlsearch(0)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(incsearch-nohl2) incsearch#autocmd#auto_nohlsearch(2)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-n)  <Plug>(incsearch-nohl)<Plug>(_incsearch-n)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-N)  <Plug>(incsearch-nohl)<Plug>(_incsearch-N)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-*)  <Plug>(incsearch-nohl)<Plug>(_incsearch-*)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-#)  <Plug>(incsearch-nohl)<Plug>(_incsearch-#)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-g*) <Plug>(incsearch-nohl)<Plug>(_incsearch-g*)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:map <Plug>(incsearch-nohl-g#) <Plug>(incsearch-nohl)<Plug>(_incsearch-g#)
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(_incsearch-n)  g:incsearch#consistent_n_direction && !v:searchforward ? 'N' : 'n'
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap <expr> <Plug>(_incsearch-N)  g:incsearch#consistent_n_direction && !v:searchforward ? 'n' : 'N'
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-*)  *
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-#)  #
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-g*) g*
../pack/packs-cp/opt/incsearch.vim/plugin/incsearch.vim:noremap        <Plug>(_incsearch-g#) g#
../pack/packs-cp/opt/incsearch.vim/README.md:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/README.md:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/README.md:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/README.md:`<Plug>(incsearch-stay)` doesn't move the cursor.
../pack/packs-cp/opt/incsearch.vim/README.md:map n  <Plug>(incsearch-nohl-n)
../pack/packs-cp/opt/incsearch.vim/README.md:map N  <Plug>(incsearch-nohl-N)
../pack/packs-cp/opt/incsearch.vim/README.md:map *  <Plug>(incsearch-nohl-*)
../pack/packs-cp/opt/incsearch.vim/README.md:map #  <Plug>(incsearch-nohl-#)
../pack/packs-cp/opt/incsearch.vim/README.md:map g* <Plug>(incsearch-nohl-g*)
../pack/packs-cp/opt/incsearch.vim/README.md:map g# <Plug>(incsearch-nohl-g#)
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:noremap  <silent><expr> <Plug>(_incsearch-nohlsearch) incsearch#autocmd#auto_nohlsearch(0)
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:noremap! <silent><expr> <Plug>(_incsearch-nohlsearch) incsearch#autocmd#auto_nohlsearch(0)
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:nnoremap <silent>       <Plug>(_incsearch-nohlsearch) :<C-u>nohlsearch<CR>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:xnoremap <silent>       <Plug>(_incsearch-nohlsearch) :<C-u>nohlsearch<CR>gv
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch/autocmd.vim:    \ , 'call feedkeys("\<Plug>(_incsearch-nohlsearch)", "m")'
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch/util.vim:  let map = printf('<Plug>(%s)', name)
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch/util.vim:    call feedkeys(printf("\<Plug>(%s)", name))
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:"   :noremap <silent><expr> <Plug>(incsearch-forward)  incsearch#go({'command': '/'})
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:"" To handle recursive mapping, map command to <Plug>(_incsearch-dotrepeat)
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:  execute 'noremap' '<Plug>(_incsearch-dotrepeat)' a:cmd
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:  silent! call repeat#set("\<Plug>(_incsearch-dotrepeat)")
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-winrestview) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-winrestview) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent> <Plug>(_incsearch-winrestview) :<C-u>call winrestview(g:incsearch#_view)<CR>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent> <Plug>(_incsearch-winrestview) :<C-u>call winrestview(g:incsearch#_view)<CR>gv
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    call feedkeys("\<Plug>(_incsearch-winrestview)", 'm')
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:      call feedkeys("\<Plug>(_incsearch-searchforward)", 'm')
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   (s:U.is_visual(m) ? "\<Plug>(_incsearch-esc)" : ''),
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   "\<Plug>(_incsearch-hlsearch)",
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   "\<Plug>(_incsearch-searchforward)",
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:    \   (s:U.is_visual(m) ? "\<Plug>(_incsearch-gv)" : '')
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-gv) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-gv) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent> <Plug>(_incsearch-gv) gv
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-esc) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-esc) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent> <Plug>(_incsearch-esc) <Esc>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent> <Plug>(_incsearch-hlsearch) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent> <Plug>(_incsearch-hlsearch) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent> <Plug>(_incsearch-hlsearch) :<C-u>let &hlsearch=&hlsearch<CR>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent> <Plug>(_incsearch-hlsearch) :<C-u>let &hlsearch=&hlsearch<CR>gv
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap  <silent>       <Plug>(_incsearch-searchforward) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:noremap! <silent>       <Plug>(_incsearch-searchforward) <Nop>
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:nnoremap <silent><expr> <Plug>(_incsearch-searchforward) <SID>_searchforward_cmd()
../pack/packs-cp/opt/incsearch.vim/autoload/incsearch.vim:xnoremap <silent><expr> <Plug>(_incsearch-searchforward) <SID>_searchforward_cmd()
../pack/packs-cp/opt/incsearch.vim/autoload/vital/_incsearch/Over/String.vim:	return s:_split_keystring(a:str, "\\%(\<Plug>\\|<Over>\\)(.\\{-})\\zs\\|")
../pack/packs-cp/opt/incsearch.vim/autoload/vital/_incsearch/Over/Commandline/Modules/Execute.vim:	let map = printf("<Plug>(%s)", a:name)
../pack/packs-cp/opt/incsearch.vim/autoload/vital/_incsearch/Over/Commandline/Modules/Execute.vim:	call feedkeys(printf("\<Plug>(%s)", a:name))
../pack/packs-cp/opt/incsearch.vim/test/insert_register.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/insert_register.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/insert_register.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/error_warning_emulation.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/error_warning_emulation.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/error_warning_emulation.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-forward)' , 'nvo'), "incsearch#go({'command': '/'})")
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-backward)', 'nvo'), "incsearch#go({'command': '?'})")
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-stay)'    , 'nvo'), "incsearch#go({'command': '/', 'is_stay': 1})")
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl)', 'nvo'), 'incsearch#autocmd#auto_nohlsearch(1)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl0)', 'nvo'), 'incsearch#autocmd#auto_nohlsearch(0)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-n)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-n)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-N)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-N)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-*)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-*)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-#)' , 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-#)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-g*)', 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-g*)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(incsearch-nohl-g#)', 'nvo'), '<Plug>(incsearch-nohl)<Plug>(_incsearch-g#)')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-n)' , 'nvo'), 'g:incsearch#consistent_n_direction && !v:searchforward ? ''N'' : ''n''')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-N)' , 'nvo'), 'g:incsearch#consistent_n_direction && !v:searchforward ? ''n'' : ''N''')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-*)' , 'nvo'), '*')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-#)' , 'nvo'), '#')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-g*)', 'nvo'), 'g*')
../pack/packs-cp/opt/incsearch.vim/test/default_settings.vim:  call s:assert.equals(maparg('<Plug>(_incsearch-g#)', 'nvo'), 'g#')
../pack/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/default_behaviors.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/jumplist.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/jumplist.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/jumplist.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/scroll.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/scroll.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/scroll.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/cancel.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/cancel.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/cancel.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/fold.vim:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/fold.vim:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/fold.vim:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/fold.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/fold.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/fold.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/history.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/history.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/history.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/n_and_N.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/n_and_N.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/n_and_N.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/magic_option.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/magic_option.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/magic_option.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/incremental_next_prev.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/incremental_next_prev.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/incremental_next_prev.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/autocmd.vimspec:    map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/autocmd.vimspec:    map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/autocmd.vimspec:    map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/operator_pending_behavior.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map n  <Plug>(incsearch-nohl-n)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map N  <Plug>(incsearch-nohl-N)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map *  <Plug>(incsearch-nohl-*)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map #  <Plug>(incsearch-nohl-#)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map g* <Plug>(incsearch-nohl-g*)
../pack/packs-cp/opt/incsearch.vim/test/autonohlsearch.vim:  map g# <Plug>(incsearch-nohl-g#)
../pack/packs-cp/opt/incsearch.vim/test/repetition.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/repetition.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/repetition.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/test.vimrc:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/test.vimrc:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/test.vimrc:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/visual_behavior.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/visual_behavior.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/visual_behavior.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/count.vim:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/count.vim:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/count.vim:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/highlight.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/highlight.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/highlight.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/nomagic.vim:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/nomagic.vim:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/nomagic.vim:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/nomagic.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/nomagic.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/nomagic.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/module.vim:  map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/module.vim:  map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/module.vim:  map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/register.vim:map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/register.vim:map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/register.vim:map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/question_pattern.vimspec:    map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/question_pattern.vimspec:    map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/question_pattern.vimspec:    map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/test/lastpattern.vimspec:    map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/test/lastpattern.vimspec:    map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/test/lastpattern.vimspec:    map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:						*<Plug>(incsearch-forward)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:						*<Plug>(incsearch-backward)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:						*<Plug>(incsearch-stay)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:		map /  <Plug>(incsearch-forward)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:		map ?  <Plug>(incsearch-backward)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:		map g/ <Plug>(incsearch-stay)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:    <Plug>(incsearch-forward):   Incremental searching forward
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:    <Plug>(incsearch-backward):  Incremental searching backward
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:    <Plug>(incsearch-stay):      It doesn't move the cursor unless you
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl)				*<Plug>(incsearch-nohl)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl0)				*<Plug>(incsearch-nohl0)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-n)			*<Plug>(incsearch-nohl-n)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-N)			*<Plug>(incsearch-nohl-N)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-*)			*<Plug>(incsearch-nohl-star)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-#)			*<Plug>(incsearch-nohl-#)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-g*)			*<Plug>(incsearch-nohl-gstar)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:<Plug>(incsearch-nohl-g#)			*<Plug>(incsearch-nohl-g#)*
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map n  <Plug>(incsearch-nohl-n)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map N  <Plug>(incsearch-nohl-N)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map *  <Plug>(incsearch-nohl-*)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map #  <Plug>(incsearch-nohl-#)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g* <Plug>(incsearch-nohl-g*)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g# <Plug>(incsearch-nohl-g#)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	NOTE: |<Plug>(incsearch-nohl-n)| stuff are just aliases to
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	`<Plug>(incsearch-nohl)n` except |n| doesn't get remapped, so the
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	|<Plug>(incsearch-nohl)|.
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	Please make sure to place |<Plug>(incsearch-nohl)| before the cursor
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	moving mappings. |<Plug>(incsearch-nohl0)| handles search enhancement
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map n <Plug>(incsearch-nohl)<Plug>(anzu-n-with-echo)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map N <Plug>(incsearch-nohl)<Plug>(anzu-N-with-echo)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map *   <Plug>(incsearch-nohl)<Plug>(asterisk-*)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g*  <Plug>(incsearch-nohl)<Plug>(asterisk-g*)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map #   <Plug>(incsearch-nohl)<Plug>(asterisk-#)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map g#  <Plug>(incsearch-nohl)<Plug>(asterisk-g#)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map z*  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map gz* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map z#  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    map gz# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	|<Plug>(incsearch-backward)| which is improved motion of |?|.
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	Boolean option for stay feature |<Plug>(incsearch-stay)|.
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	2. Avoid Unneeded loading for mappings like |<Plug>(incsearch-nohl)|
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	2. Minor fix: history emulation with |<Plug>(incsearch-stay)|
../pack/packs-cp/opt/incsearch.vim/doc/incsearch.txt:	    - Enable cursor moving while |<Plug>(incsearch-stay)|
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-backward)	incsearch.txt	/*<Plug>(incsearch-backward)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-forward)	incsearch.txt	/*<Plug>(incsearch-forward)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl)	incsearch.txt	/*<Plug>(incsearch-nohl)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl-#)	incsearch.txt	/*<Plug>(incsearch-nohl-#)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl-N)	incsearch.txt	/*<Plug>(incsearch-nohl-N)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl-g#)	incsearch.txt	/*<Plug>(incsearch-nohl-g#)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl-gstar)	incsearch.txt	/*<Plug>(incsearch-nohl-gstar)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl-n)	incsearch.txt	/*<Plug>(incsearch-nohl-n)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl-star)	incsearch.txt	/*<Plug>(incsearch-nohl-star)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-nohl0)	incsearch.txt	/*<Plug>(incsearch-nohl0)*
../pack/packs-cp/opt/incsearch.vim/doc/tags:<Plug>(incsearch-stay)	incsearch.txt	/*<Plug>(incsearch-stay)*
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestEasy simple
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', 'simple mapping', '<Plug>TestEasy')
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestKeyNotation :<C-U>echo<CR>
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', 'key notation', '<Plug>TestKeyNotation')
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestBar :echo "<Bar><Bar>foo"<Bar>version <Bar> quit<CR>
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', 'bar', '<Plug>TestBar')
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestLt echo "\<lt>Plug><lt>NONO"
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call IsCompatible('maparg', '<lt>', '<Plug>TestLt')
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:nnoremap <Plug>TestSID :<CR><SID>(JustATest):<CR>
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call vimtap#Is(maparg('<Plug>TestSID', '', 0, 1).rhs, ':<CR><SID>(JustATest):<CR>', 'original does not resolve <SID>')
../pack/packs-cp/opt/vim-ingo-library/tests/compat/t1300-maparg.vim:call vimtap#Like(ingo#compat#maparg('<Plug>TestSID'), '^:<CR><SNR>\d\+_(JustATest):<CR>$', 'compatibility wrapper resolves <SID> to <SNR>')
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"	silent! call repeat#set("\<Plug>(HistoryRecallWhatRepeat)", a:repeatCount)
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"	silent! call repeat#setreg("\<Plug>(HistoryRecallWhatRepeat)", a:register)
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   nnoremap <silent> <Plug>(HistoryRecallWhat)
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   if ! hasmapto('<Plug>(HistoryRecallWhat)', 'n')
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"       nmap qX <Plug>(HistoryRecallWhat)
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   nnoremap <silent> <Plug>(HistoryRecallListWhat)
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   if ! hasmapto('<Plug>(HistoryRecallListWhat)', 'n')
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"       nmap qx <Plug>(HistoryRecallListWhat)
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/plugin/historyrecall.vim:"   nnoremap <silent> <Plug>(HistoryRecallWhatRepeat)
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/view.vim:" Use <Plug>(WinSaveView) from any mode at the beginning of a mapping to save
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/view.vim:" At the end of the mapping, use <Plug>(WinRestView) from normal mode to restore
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/motion/omap.vim:    \   (a:operator ==# 'c' ? "\<Plug>(IngoLibraryOmapRepeatReinsert)" : ''),
../pack/packs-cp/opt/vim-ingo-library/autoload/ingo/motion/omap.vim:inoremap <Plug>(IngoLibraryOmapRepeatReinsert) <C-r>.<Esc>
../pack/packs-cp/opt/vim-characterize/plugin/characterize.vim:nnoremap <silent><script> <Plug>(characterize) :<C-U>echo <SID>info(matchstr(getline('.')[col('.')-1:-1],'.'))<CR>
../pack/packs-cp/opt/vim-characterize/plugin/characterize.vim:if !hasmapto('<Plug>(characterize)', 'n') && mapcheck('ga', 'n') ==# ''
../pack/packs-cp/opt/vim-characterize/plugin/characterize.vim:  nmap ga <Plug>(characterize)
../pack/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:    " 'noremap <silent> <Plug>NERDCommenterComment :call nerdcommenter#Comment("n", "Comment")'
../pack/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:    let plug = '<Plug>NERDCommenter' . a:target
../pack/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:    " 'menu <silent> comment.Comment<Tab>\\cc <Plug>NERDCommenterComment'
../pack/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:inoremap <silent> <Plug>NERDCommenterInsert <C-\><C-O>:call nerdcommenter#Comment('i', "Insert")<CR>
../pack/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:nnoremap <Plug>NERDCommenterAltDelims :call nerdcommenter#SwitchToAlternativeDelimiters(1)<CR>
../pack/packs-cp/opt/nerdcommenter/CHANGELOG.md:*  removed all the mapping options. Now, mappings to <plug> mappings are used
../pack/packs-cp/opt/nerdcommenter/autoload/nerdcommenter.vim:        silent! call repeat#set('V' . nlines . 'jo' . "\<Plug>NERDCommenter". a:type)
../pack/packs-cp/opt/nerdcommenter/autoload/nerdcommenter.vim:        silent! call repeat#set("\<Plug>NERDCommenter". a:type)
../pack/packs-cp/opt/nerdcommenter/autoload/nerdcommenter.vim:    "    maintain the cursor position (from <Plug>NERDCommenterInsert).
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterComment
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterNested
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterToggle
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterMinimal
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterInvert
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterSexy
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterYank
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterToEOL
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterAppend
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Map it to: <plug>NERDCommenterInsert
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:    imap <C-c> <plug>NERDCommenterInsert
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterAltDelims
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterAlignLeft
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:           <plug>NERDCommenterAlignBoth
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Mapped to: <plug>NERDCommenterUncomment
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:To change a mapping just map another key combo to the internal <plug> mapping.
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:    map ,omg <plug>NERDCommenterComment
../pack/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:See the help for the mapping in question to see which <plug> mapping to
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogHelp)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> g? <Plug>(FlogHelp)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogHelp) :help flog-mappings<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVSplitCommitRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <CR> <Plug>(FlogVSplitCommitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVSplitCommitRight) :vertical belowright Flogsplitcommit<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVSplitCommitPathsRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <Tab> <Plug>(FlogVSplitCommitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVSplitCommitPathsRight) :<C-U>call flog#run_tmp_command('vertical belowright Git show %h -- %p')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> dd <Plug>(FlogVDiffSplitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> dd <Plug>(FlogVDiffSplitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> dv <Plug>(FlogVDiffSplitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> dv <Plug>(FlogVDiffSplitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitPathsRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> dp <Plug>(FlogVDiffSplitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> dp <Plug>(FlogVDiffSplitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> DD <Plug>(FlogVDiffSplitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> DD <Plug>(FlogVDiffSplitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> DV <Plug>(FlogVDiffSplitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> DV <Plug>(FlogVDiffSplitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitRight) :<C-U>call flog#run_tmp_command('vertical belowright Git diff HEAD %h')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogVDiffSplitRight) :<C-U>call flog#run_tmp_command("vertical belowright Git diff %(h'>) %(h'<)")<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitPathsRight) :<C-U>call flog#run_tmp_command('vertical belowright Git diff HEAD %h -- %p')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogVDiffSplitPathsRight) :<C-U>call flog#run_tmp_command("vertical belowright Git diff HEAD %(h'<) %(h'>) -- %p")<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitLastCommitRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> d! <Plug>(FlogVDiffSplitLastCommitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVDiffSplitLastCommitPathsRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> D! <Plug>(FlogVDiffSplitLastCommitPathsRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitLastCommitRight) :<C-U> call flog#run_tmp_command("vertical belowright Git diff %(h'!) %H")<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVDiffSplitLastCommitPathsRight) :<C-U> call flog#run_tmp_command("vertical belowright Git diff %(h'!) %H -- %p")<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCloseTmpWin)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> dq <Plug>(FlogCloseTmpWin)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCloseTmpWin) :<C-U>call flog#close_tmp_win()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogYank)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> y<C-G> <Plug>(FlogYank)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> y<C-G> <Plug>(FlogYank)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogYank) :call flog#copy_commits()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogYank) :call flog#copy_commits(1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> git <Plug>(FlogGit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> git <Plug>(FlogGit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGit) :Floggit
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGit) :Floggit
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogQuit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ZZ <Plug>(FlogQuit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gq <Plug>(FlogQuit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogQuit) :call flog#quit()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVNextCommitRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <C-N> <Plug>(FlogVNextCommitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ) <Plug>(FlogVNextCommitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVPrevCommitRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> <C-P> <Plug>(FlogVPrevCommitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ( <Plug>(FlogVPrevCommitRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVNextCommitRight) :<C-U>call flog#next_commit() \| vertical belowright Flogsplitcommit<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVPrevCommitRight) :<C-U>call flog#previous_commit() \| vertical belowright Flogsplitcommit<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVNextRefRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ]r <Plug>(FlogVNextRefRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogVPrevRefRight)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> [r <Plug>(FlogVPrevRefRight)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVNextRefRight) :<C-U>call flog#next_ref() \| vertical belowright Flogsplitcommit<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogVPrevRefRight) :<C-U>call flog#previous_ref() \| vertical belowright Flogsplitcommit<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSkipAhead)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ]] <Plug>(FlogSkipAhead)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSkipAhead) :<C-U>call flog#change_skip_by_max_count(1 * max([v:count, 1]))<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSkipBack)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> [[ <Plug>(FlogSkipBack)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSkipBack) :<C-U>call flog#change_skip_by_max_count(-1 * max([v:count, 1]))<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSetSkip)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> go <Plug>(FlogSetSkip)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSetSkip) :<C-U>call flog#set_skip_option(v:count)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleAll)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> a <Plug>(FlogToggleAll)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleAll) :call flog#toggle_all_refs_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleBisect)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gb <Plug>(FlogToggleBisect)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleBisect) :call flog#toggle_bisect_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleNoMerges)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gm <Plug>(FlogToggleNoMerges)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleNoMerges) :call flog#toggle_no_merges_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleReflog)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gr <Plug>(FlogToggleReflog)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleReflog) :call flog#toggle_reflog_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleReverse)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gsr <Plug>(FlogToggleReverse)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleReverse) :call flog#toggle_reverse_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleNoGraph)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gx <Plug>(FlogToggleNoGraph)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleNoGraph) :call flog#toggle_no_graph_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogToggleNoPatch)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gp <Plug>(FlogToggleNoPatch)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogToggleNoPatch) :call flog#toggle_no_patch_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogUpdate)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> u <Plug>(FlogUpdate)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogUpdate) :call flog#populate_graph_buffer()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSearch)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> g/ <Plug>(FlogSearch)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogSearch) :<C-U>Flogsetargs -search=
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogPatchSearch)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> g\ <Plug>(FlogPatchSearch)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogPatchSearch) :<C-U>Flogsetargs -patch-search=
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCycleSort)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gss <Plug>(FlogCycleSort)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCycleSort) :call flog#cycle_sort_option()<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSortDate)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gsd <Plug>(FlogSortDate)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSortDate) :call flog#set_sort_option('date')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSortAuthor)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gsa <Plug>(FlogSortAuthor)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSortAuthor) :call flog#set_sort_option('author')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSortTopo)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> gst <Plug>(FlogSortTopo)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSortTopo) :call flog#set_sort_option('topo')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogFixup)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cf <Plug>(FlogFixup)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogFixupRebase)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cF <Plug>(FlogFixupRebase)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogFixup) :<C-U>call flog#run_command('Git commit --fixup=%H', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogFixupRebase) :<C-U>call flog#run_command('Git commit --fixup=%H \| Git -c sequence.editor=true rebase --interactive --autosquash %H^', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSquash)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cs <Plug>(FlogSquash)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSquashRebase)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cS <Plug>(FlogSquashRebase)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSquashEdit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cA <Plug>(FlogSquashEdit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSquash) :<C-U>call flog#run_command('Git commit --no-edit --squash=%H', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSquashRebase) :<C-U>call flog#run_command('Git commit --no-edit --squash=%H \| Git -c sequence.editor=true rebase --interactive --autosquash %H^', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSquashEdit) :<C-U>call flog#run_command('Git commit --edit --squash=%H', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRevert)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> crc <Plug>(FlogRevert)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> crc <Plug>(FlogRevert)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRevertNoEdit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> crn <Plug>(FlogRevertNoEdit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> crn <Plug>(FlogRevertNoEdit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRevert) :<C-U>call flog#run_command('Git revert %H', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogRevert) :<C-U>call flog#run_command("Git revert %(h'<)^..%(h'>)", 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRevertNoEdit) :<C-U>call flog#run_command('Git revert --no-edit %H', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogRevertNoEdit) :<C-U>call flog#run_command("Git revert --no-edit %(h'<)^..%(h'>)", 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCheckout)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> coo <Plug>(FlogCheckout)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCheckout) :<C-U>call flog#run_command('Git checkout %H', 0, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCheckoutBranch)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cob <Plug>(FlogCheckoutBranch)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCheckoutBranch) :<C-U>call flog#run_command('Git checkout %b', 0, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogCheckoutLocalBranch)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cot <Plug>(FlogCheckoutLocalBranch)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogCheckoutLocalBranch) :<C-U>call flog#run_command('Git checkout %l', 0, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitCommit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> c<Space> <Plug>(FlogGitCommit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> c<Space> <Plug>(FlogGitCommit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitCommit) :Floggit commti<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitCommit) :Floggit commti<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitRevert)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cr<Space> <Plug>(FlogGitRevert)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> cr<Space> <Plug>(FlogGitRevert)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitRevert) :Floggit revert<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitRevert) :Floggit revert<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitMerge)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cm<Space> <Plug>(FlogGitMerge)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> cm<Space> <Plug>(FlogGitMerge)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitMerge) :Floggit merge<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitMerge) :Floggit merge<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitCheckout)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> co<Space> <Plug>(FlogGitCheckout)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> co<Space> <Plug>(FlogGitCheckout)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitCheckout) :Floggit checkout<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitCheckout) :Floggit checkout<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitBranch)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> cb<Space> <Plug>(FlogGitBranch)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> cb<Space> <Plug>(FlogGitBranch)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitBranch) :Floggit branch<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitBranch) :Floggit branch<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractive)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ri <Plug>(FlogRebaseInteractive)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractive) :<C-U>call flog#run_command('Git rebase --interactive %H^', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveAutosquash)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rf <Plug>(FlogRebaseInteractiveAutosquash)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveAutosquash) :<C-U>call flog#run_command('Git -c sequence.editor=true rebase --interactive --autosquash %H^', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveUpstream)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ru <Plug>(FlogRebaseInteractiveUpstream)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveUpstream) :<C-U>call flog#run_command('Git rebase --interactive @{upstream}', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractivePush)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rp <Plug>(FlogRebaseInteractivePush)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractivePush) :<C-U>call flog#run_command('Git rebase --interactive @{push}', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseContinue)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rr <Plug>(FlogRebaseContinue)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseContinue) :<C-U>call flog#run_command('Git rebase --continue', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseSkip)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rs <Plug>(FlogRebaseSkip)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseSkip) :<C-U>call flog#run_command('Git rebase --skip', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseAbort)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ra <Plug>(FlogRebaseAbort)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseAbort) :<C-U>call flog#run_command('Git rebase --abort', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseEditTodo)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> re <Plug>(FlogRebaseEditTodo)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseEditTodo) :<C-U>call flog#run_command('Git rebase --edit-todo', 1, 1)<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveReword)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rw <Plug>(FlogRebaseInteractiveReword)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveReword) :<C-U>call flog#run_command('Git rebase --interactive %H^ \| s/^pick/reword/e', 1, 1)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveEdit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rm <Plug>(FlogRebaseInteractiveEdit)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveEdit) :<C-U>call flog#run_command('Git rebase --interactive %H^ \| s/^pick/edit/e', 1, 1)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogRebaseInteractiveDrop)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> rd <Plug>(FlogRebaseInteractiveDrop)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogRebaseInteractiveDrop) :<C-U>call flog#run_command('Git rebase --interactive %H^ \| s/^pick/drop/e', 1, 1)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogGitRebase)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> r<Space> <Plug>(FlogGitRebase)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> r<Space> <Plug>(FlogGitRebase)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <Plug>(FlogGitRebase) :Floggit rebase<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <Plug>(FlogGitRebase) :Floggit rebase<Space>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogSetCommitMark)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> m <Plug>(FlogSetCommitMark)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> m <Plug>(FlogSetCommitMark)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogSetCommitMark) :<C-U>call flog#set_commit_mark_at_line(nr2char(getchar()), '.')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogSetCommitMark) :<C-U>call flog#set_commit_mark_at_line(nr2char(getchar()), '.')<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:if !hasmapto('<Plug>(FlogJumpToCommitMark)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  nmap <buffer> ' <Plug>(FlogJumpToCommitMark)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:  vmap <buffer> ' <Plug>(FlogJumpToCommitMark)
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:nnoremap <buffer> <silent> <Plug>(FlogJumpToCommitMark) :<C-U>call flog#jump_to_commit_mark(nr2char(getchar()))<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:vnoremap <buffer> <silent> <Plug>(FlogJumpToCommitMark) :<C-U>call flog#jump_to_commit_mark(nr2char(getchar()))<CR>
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogvsplitcommitright', '<Plug>(FlogVSplitCommitRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogVsplitcommitright', '<Plug>(FlogVSplitCommitRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogVnextcommitright', '<Plug>(FlogVNextCommitRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogvnextcommitright', '<Plug>(FlogVNextCommitRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogVprevcommitright', '<Plug>(FlogVPrevCommitRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogvprevcommitright', '<Plug>(FlogVPrevCommitRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogVnextrefright', '<Plug>(FlogVNextRefRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogVprevrefright', '<Plug>(FlogVPrevRefRight)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogToggleall', '<Plug>(FlogToggleAll)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogtoggleall', '<Plug>(FlogToggleAll)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogTogglebisect', '<Plug>(FlogToggleBisect)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogtogglebisect', '<Plug>(FlogToggleBisect)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogTogglenomerges', '<Plug>(FlogToggleNoMerges)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogtogglenomerges', '<Plug>(FlogToggleNoMerges)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogTogglereflog', '<Plug>(FlogToggleReflog)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogUpdate', '<Plug>(FlogUpdate)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogupdate', '<Plug>(FlogUpdate)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogGit', '<Plug>(FlogGit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Floggit', '<Plug>(FlogGit)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogYank', '<Plug>(FlogYank)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogyank', '<Plug>(FlogYank)')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogSearch', '<Plug>(FlogSearch)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogPatchSearch', '<Plug>(FlogPatchSearch)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogQuit', '<Plug>(FlogQuit)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Flogquit', '<Plug>(FlogQuit)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogHelp', '<Plug>(FlogHelp)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>Floghelp', '<Plug>(FlogHelp)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogSetskip', '<Plug>(FlogSetSkip)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogSkipahead', '<Plug>(FlogSkipAhead)', 'nmap')
../pack/packs-cp/opt/vim-flog/ftplugin/floggraph.vim:call flog#deprecate_plugin_mapping('<Plug>FlogSkipback', '<Plug>(FlogSkipBack)', 'nmap')
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                            *<Plug>(FlogHelp)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                               *<Plug>(FlogVSplitCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogVSplitCommitRightPath)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                 *<Plug>(FlogVDiffSplitRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                            *<Plug>(FlogVDiffSplitPathsRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                       *<Plug>(FlogVDiffSplitLastCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                  *<Plug>(FlogVDiffSplitLastCommitPathsRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogCloseTmpWin)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                            *<Plug>(FlogYank)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                             *<Plug>(FlogGit)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                            *<Plug>(FlogQuit)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                *<Plug>(FlogVNextCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                *<Plug>(FlogVPrevCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogVNextRefRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogVPrevRefRight)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogSkipAhead)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogSkipBack)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                         *<Plug>(FlogSetSkip)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogSetCommitMark)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                *<Plug>(FlogJumpToCommitMark)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogToggleAll)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogToggleBisect)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogToggleNoMerges)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogToggleReflog)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogToggleNoGraph)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                   *<Plug>(FlogToggleNoPatch)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:gss                                                    *<Plug>(FlogCycleSort)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:gsd                                                     *<Plug>(FlogSortDate)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:gsa                                                   *<Plug>(FlogSortAuthor)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:gst                                                     *<plug>(FlogSortTopo)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:gsr                                                *<Plug>(FlogToggleReverse)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogUpdate)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogSearch)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogPatchSearch)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                           *<Plug>(FlogFixup)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogFixupRebase)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogSquash)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogSquashRebase)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogSquashEdit)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                          *<Plug>(FlogRevert)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                    *<Plug>(FlogRevertNoEdit)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogCheckout)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogCheckoutBranch)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                             *<Plug>(FlogCheckoutLocalBranch)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitCommit)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitRevert)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                        *<Plug>(FlogGitMerge)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogGitCheckout)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitBranch)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                               *<Plug>(FlogRebaseInteractive)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                     *<Plug>(FlogRebaseInteractiveAutosquash)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                       *<Plug>(FlogRebaseInteractiveUpstream)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogRebaseInteractivePush)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogRebaseContinue)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                      *<Plug>(FlogRebaseSkip)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                     *<Plug>(FlogRebaseAbort)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                  *<Plug>(FlogRebaseEditTodo)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                         *<Plug>(FlogRebaseInteractiveReword)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogRebaseInteractiveEdit)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                           *<Plug>(FlogRebaseInteractiveDrop)*
../pack/packs-cp/opt/vim-flog/doc/flog.txt:                                                       *<Plug>(FlogGitRebase)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogCheckout)	flog.txt	/*<Plug>(FlogCheckout)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogCheckoutBranch)	flog.txt	/*<Plug>(FlogCheckoutBranch)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogCheckoutLocalBranch)	flog.txt	/*<Plug>(FlogCheckoutLocalBranch)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogCloseTmpWin)	flog.txt	/*<Plug>(FlogCloseTmpWin)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogCycleSort)	flog.txt	/*<Plug>(FlogCycleSort)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogFixup)	flog.txt	/*<Plug>(FlogFixup)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogFixupRebase)	flog.txt	/*<Plug>(FlogFixupRebase)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogGit)	flog.txt	/*<Plug>(FlogGit)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogGitBranch)	flog.txt	/*<Plug>(FlogGitBranch)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogGitCheckout)	flog.txt	/*<Plug>(FlogGitCheckout)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogGitCommit)	flog.txt	/*<Plug>(FlogGitCommit)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogGitMerge)	flog.txt	/*<Plug>(FlogGitMerge)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogGitRebase)	flog.txt	/*<Plug>(FlogGitRebase)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogGitRevert)	flog.txt	/*<Plug>(FlogGitRevert)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogHelp)	flog.txt	/*<Plug>(FlogHelp)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogJumpToCommitMark)	flog.txt	/*<Plug>(FlogJumpToCommitMark)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogPatchSearch)	flog.txt	/*<Plug>(FlogPatchSearch)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogQuit)	flog.txt	/*<Plug>(FlogQuit)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseAbort)	flog.txt	/*<Plug>(FlogRebaseAbort)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseContinue)	flog.txt	/*<Plug>(FlogRebaseContinue)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseEditTodo)	flog.txt	/*<Plug>(FlogRebaseEditTodo)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseInteractive)	flog.txt	/*<Plug>(FlogRebaseInteractive)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseInteractiveAutosquash)	flog.txt	/*<Plug>(FlogRebaseInteractiveAutosquash)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseInteractiveDrop)	flog.txt	/*<Plug>(FlogRebaseInteractiveDrop)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseInteractiveEdit)	flog.txt	/*<Plug>(FlogRebaseInteractiveEdit)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseInteractivePush)	flog.txt	/*<Plug>(FlogRebaseInteractivePush)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseInteractiveReword)	flog.txt	/*<Plug>(FlogRebaseInteractiveReword)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseInteractiveUpstream)	flog.txt	/*<Plug>(FlogRebaseInteractiveUpstream)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRebaseSkip)	flog.txt	/*<Plug>(FlogRebaseSkip)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRevert)	flog.txt	/*<Plug>(FlogRevert)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogRevertNoEdit)	flog.txt	/*<Plug>(FlogRevertNoEdit)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSearch)	flog.txt	/*<Plug>(FlogSearch)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSetCommitMark)	flog.txt	/*<Plug>(FlogSetCommitMark)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSetSkip)	flog.txt	/*<Plug>(FlogSetSkip)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSkipAhead)	flog.txt	/*<Plug>(FlogSkipAhead)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSkipBack)	flog.txt	/*<Plug>(FlogSkipBack)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSortAuthor)	flog.txt	/*<Plug>(FlogSortAuthor)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSortDate)	flog.txt	/*<Plug>(FlogSortDate)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSquash)	flog.txt	/*<Plug>(FlogSquash)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSquashEdit)	flog.txt	/*<Plug>(FlogSquashEdit)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogSquashRebase)	flog.txt	/*<Plug>(FlogSquashRebase)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogToggleAll)	flog.txt	/*<Plug>(FlogToggleAll)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogToggleBisect)	flog.txt	/*<Plug>(FlogToggleBisect)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogToggleNoGraph)	flog.txt	/*<Plug>(FlogToggleNoGraph)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogToggleNoMerges)	flog.txt	/*<Plug>(FlogToggleNoMerges)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogToggleNoPatch)	flog.txt	/*<Plug>(FlogToggleNoPatch)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogToggleReflog)	flog.txt	/*<Plug>(FlogToggleReflog)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogToggleReverse)	flog.txt	/*<Plug>(FlogToggleReverse)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogUpdate)	flog.txt	/*<Plug>(FlogUpdate)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVDiffSplitLastCommitPathsRight)	flog.txt	/*<Plug>(FlogVDiffSplitLastCommitPathsRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVDiffSplitLastCommitRight)	flog.txt	/*<Plug>(FlogVDiffSplitLastCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVDiffSplitPathsRight)	flog.txt	/*<Plug>(FlogVDiffSplitPathsRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVDiffSplitRight)	flog.txt	/*<Plug>(FlogVDiffSplitRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVNextCommitRight)	flog.txt	/*<Plug>(FlogVNextCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVNextRefRight)	flog.txt	/*<Plug>(FlogVNextRefRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVPrevCommitRight)	flog.txt	/*<Plug>(FlogVPrevCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVPrevRefRight)	flog.txt	/*<Plug>(FlogVPrevRefRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVSplitCommitRight)	flog.txt	/*<Plug>(FlogVSplitCommitRight)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogVSplitCommitRightPath)	flog.txt	/*<Plug>(FlogVSplitCommitRightPath)*
../pack/packs-cp/opt/vim-flog/doc/tags:<Plug>(FlogYank)	flog.txt	/*<Plug>(FlogYank)*
../pack/packs-cp/opt/vim-flog/doc/tags:<plug>(FlogSortTopo)	flog.txt	/*<plug>(FlogSortTopo)*
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:onoremap <silent> <Plug>(GitGutterTextObjectInnerPending) :<C-U>call gitgutter#hunk#text_object(1)<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:onoremap <silent> <Plug>(GitGutterTextObjectOuterPending) :<C-U>call gitgutter#hunk#text_object(0)<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>(GitGutterTextObjectInnerVisual)  :<C-U>call gitgutter#hunk#text_object(1)<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>(GitGutterTextObjectOuterVisual)  :<C-U>call gitgutter#hunk#text_object(0)<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>(GitGutterNextHunk) &diff ? ']c' : ":\<C-U>execute v:count1 . 'GitGutterNextHunk'\<CR>"
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>GitGutterNextHunk   &diff ? ']c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterNextHunk to \<lt>Plug>(GitGutterNextHunk)')\<CR>"
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>(GitGutterPrevHunk) &diff ? '[c' : ":\<C-U>execute v:count1 . 'GitGutterPrevHunk'\<CR>"
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <expr> <Plug>GitGutterPrevHunk   &diff ? '[c' : ":\<C-U>call gitgutter#utility#warn('Please change your map \<lt>Plug>GitGutterPrevHunk to \<lt>Plug>(GitGutterPrevHunk)')\<CR>"
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:xnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>(GitGutterStageHunk)   :GitGutterStageHunk<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>GitGutterStageHunk     :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterStageHunk to <lt>Plug>(GitGutterStageHunk)')<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>(GitGutterUndoHunk)    :GitGutterUndoHunk<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>GitGutterUndoHunk      :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterUndoHunk to <lt>Plug>(GitGutterUndoHunk)')<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>(GitGutterPreviewHunk) :GitGutterPreviewHunk<CR>
../pack/packs-cp/opt/vim-gitgutter/plugin/gitgutter.vim:nnoremap <silent> <Plug>GitGutterPreviewHunk   :call gitgutter#utility#warn('Please change your map <lt>Plug>GitGutterPreviewHunk to <lt>Plug>(GitGutterPreviewHunk)')<CR>
../pack/packs-cp/opt/vim-gitgutter/README.mkd:nmap ]h <Plug>(GitGutterNextHunk)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:nmap [h <Plug>(GitGutterPrevHunk)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:nmap ghs <Plug>(GitGutterStageHunk)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:nmap ghu <Plug>(GitGutterUndoHunk)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:nmap ghp <Plug>(GitGutterPreviewHunk)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:omap ih <Plug>(GitGutterTextObjectInnerPending)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:omap ah <Plug>(GitGutterTextObjectOuterPending)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:xmap ih <Plug>(GitGutterTextObjectInnerVisual)
../pack/packs-cp/opt/vim-gitgutter/README.mkd:xmap ah <Plug>(GitGutterTextObjectOuterVisual)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterPrevHunk)') && maparg('[c', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> [c <Plug>(GitGutterPrevHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterNextHunk)') && maparg(']c', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> ]c <Plug>(GitGutterNextHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'v') && maparg('<Leader>hs', 'x') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'n') && maparg('<Leader>hs', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterUndoHunk)') && maparg('<Leader>hu', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hu <Plug>(GitGutterUndoHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterPreviewHunk)') && maparg('<Leader>hp', 'n') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hp <Plug>(GitGutterPreviewHunk)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectInnerPending)') && maparg('ic', 'o') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    omap <buffer> ic <Plug>(GitGutterTextObjectInnerPending)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectOuterPending)') && maparg('ac', 'o') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    omap <buffer> ac <Plug>(GitGutterTextObjectOuterPending)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectInnerVisual)') && maparg('ic', 'x') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> ic <Plug>(GitGutterTextObjectInnerVisual)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterTextObjectOuterVisual)') && maparg('ac', 'x') ==# ''
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> ac <Plug>(GitGutterTextObjectOuterVisual)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter/hunk.vim:  silent! call repeat#set("\<Plug>(GitGutterStageHunk)", -1)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter/hunk.vim:  silent! call repeat#set("\<Plug>(GitGutterUndoHunk)", -1)
../pack/packs-cp/opt/vim-gitgutter/autoload/gitgutter/hunk.vim:  silent! call repeat#set("\<Plug>(GitGutterPreviewHunk)", -1)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ghp <Plug>(GitGutterPreviewHunk)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ghs <Plug>(GitGutterStageHunk)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ghu <Plug>(GitGutterUndoHunk)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap [c <Plug>(GitGutterPrevHunk)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    nmap ]c <Plug>(GitGutterNextHunk)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    omap ic <Plug>(GitGutterTextObjectInnerPending)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    omap ac <Plug>(GitGutterTextObjectOuterPending)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    xmap ic <Plug>(GitGutterTextObjectInnerVisual)
../pack/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:    xmap ac <Plug>(GitGutterTextObjectOuterVisual)
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>Dsurround".char,scount)
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>C".(a:0 > 2 && a:3 ? "S" : "s")."urround".char.newchar.s:input,scount)
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>Y".(a:0 && a:1 ? "S" : "s")."surround".char.s:input,a:type)
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:    silent! call repeat#set("\<Plug>SurroundRepeat".char.s:input)
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>SurroundRepeat .
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ds  <Plug>Dsurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap cs  <Plug>Csurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap cS  <Plug>CSurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ys  <Plug>Ysurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap yS  <Plug>YSurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap yss <Plug>Yssurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ySs <Plug>YSsurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  nmap ySS <Plug>YSsurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  xmap S   <Plug>VSurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:  xmap gS  <Plug>VgSurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:    if !hasmapto("<Plug>Isurround","i") && "" == mapcheck("<C-S>","i")
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:      imap    <C-S> <Plug>Isurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:    imap      <C-G>s <Plug>Isurround
../pack/packs-cp/opt/vim-surround/plugin/surround.vim:    imap      <C-G>S <Plug>ISurround
../pack/packs-cp/opt/undotree/autoload/undotree.vim:        silent exec 'nmap '.map_options.i[1].' <plug>Undotree'.i[0]
../pack/packs-cp/opt/undotree/autoload/undotree.vim:        silent exec 'nnoremap '.map_options.'<plug>Undotree'.i[0]
../pack/packs-cp/opt/undotree/doc/undotree.txt:    nmap <buffer> J <plug>UndotreeNextState
../pack/packs-cp/opt/undotree/doc/undotree.txt:    nmap <buffer> K <plug>UndotreePreviousState
../pack/packs-cp/opt/undotree/doc/undotree.txt:        nmap <buffer> J <plug>UndotreeNextState
../pack/packs-cp/opt/undotree/doc/undotree.txt:        nmap <buffer> K <plug>UndotreePreviousState
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeHelp
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeClose
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeFocusTarget
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeClearHistory
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeTimestampToggle
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeDiffToggle
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeNextState
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreePreviousState
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeNextSavedState
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreePreviousSavedState
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeRedo
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeUndo
../pack/packs-cp/opt/undotree/doc/undotree.txt:    <plug>UndotreeEnter
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerEdit) :PickerEdit<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerSplit) :PickerSplit<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerTabedit) :PickerTabedit<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerTabdrop) :PickerTabdrop<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerVsplit) :PickerVsplit<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBuffer) :PickerBuffer<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBufferSplit) :PickerBufferSplit<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBufferVsplit) :PickerBufferVsplit<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerTag) :PickerTag<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerStag) :PickerStag<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerBufferTag) :PickerBufferTag<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerHelp) :PickerHelp<CR>
../pack/packs-unix/opt/vim-picker/plugin/picker.vim:nnoremap <silent> <Plug>(PickerListUserCommands) :PickerListUserCommands<CR>
../pack/packs-unix/opt/vim-picker/README.md:vim-picker defines the following [`<Plug>`][plug-mappings] mappings:
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerEdit)`: Execute `:PickerEdit`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerSplit)`: Execute `:PickerSplit`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerTabedit)`: Execute `:PickerTabedit`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerTabdrop)`: Execute `:PickerTabdrop`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerVsplit)`: Execute `:PickerVsplit`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBuffer)`: Execute `:PickerBuffer`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBufferSplit)`: Execute `:PickerBufferSplit`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBufferVsplit)`: Execute `:PickerBufferVsplit`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerTag)`: Execute `:PickerTag`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerStag)`: Execute `:PickerStag`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerBufferTag)`: Execute `:PickerBufferTag`.
../pack/packs-unix/opt/vim-picker/README.md:- `<Plug>(PickerHelp)`: Execute `:PickerHelp`.
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pe <Plug>(PickerEdit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ps <Plug>(PickerSplit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pt <Plug>(PickerTabedit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pd <Plug>(PickerTabdrop)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pv <Plug>(PickerVsplit)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pb <Plug>(PickerBuffer)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>p] <Plug>(PickerTag)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pw <Plug>(PickerStag)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>po <Plug>(PickerBufferTag)
../pack/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ph <Plug>(PickerHelp)
../pack/packs-unix/opt/vim-picker/doc/picker.txt:vim-picker provides the following |<Plug>| mappings:
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerEdit)                  Execute :PickerEdit
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerSplit)                 Execute :PickerSplit
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerTabedit)               Execute :PickerTabedit
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerVsplit)                Execute :PickerVsplit
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBuffer)                Execute :PickerBuffer
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBufferSplit)           Execute :PickerBufferSplit
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBufferVsplit)          Execute :PickerBufferVsplit
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerTag)                   Execute :PickerTag
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerStag)                  Execute :PickerStag
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerBufferTag)             Execute :PickerBufferTag
../pack/packs-unix/opt/vim-picker/doc/picker.txt:<Plug>(PickerHelp)                  Execute :PickerHelp
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:nnoremap <Plug>Colorizer        :<C-U>ColorToggle<CR>
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:xnoremap <Plug>Colorizer        :ColorHighlight<CR>
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:nnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:xnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:nnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:xnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
../pack/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:nnoremap <Plug>Colorizer        :<C-U>ColorToggle<CR>
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:xnoremap <Plug>Colorizer        :ColorHighlight<CR>
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:nnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:xnoremap <Plug>ColorContrast    :<C-U>ColorContrast<CR>
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:nnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:xnoremap <Plug>ColorFgBg        :<C-U>ColorSwapFgBg<CR>
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cC <Plug>Colorizer
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cT <Plug>ColorContrast
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cF <Plug>ColorFgBg
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
../pack/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
../pack/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir /s/b')
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir /s/b/a:-d')
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -print \| sed '1d;s:^..::'")
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*/\.*' -prune -o -type f -print -o -type l -print \| sed 's:^..::'")
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>
../pack/packs-unix/opt/fzf.vim/plugin/fzf.vim:onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-maps-n)`               | Normal mode mappings                      |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-maps-i)`               | Insert mode mappings                      |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-maps-x)`               | Visual mode mappings                      |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-maps-o)`               | Operator-pending mappings                 |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-complete-word)`        | `cat /usr/share/dict/words`               |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-complete-path)`        | Path completion using `find` (file + dir) |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-complete-file)`        | File completion using `find`              |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-complete-line)`        | Line completion (all open buffers)        |
../pack/packs-unix/opt/fzf.vim/README.md:| `<plug>(fzf-complete-buffer-line)` | Line completion (current buffer only)     |
../pack/packs-unix/opt/fzf.vim/README.md:nmap <leader><tab> <plug>(fzf-maps-n)
../pack/packs-unix/opt/fzf.vim/README.md:xmap <leader><tab> <plug>(fzf-maps-x)
../pack/packs-unix/opt/fzf.vim/README.md:omap <leader><tab> <plug>(fzf-maps-o)
../pack/packs-unix/opt/fzf.vim/README.md:imap <c-x><c-k> <plug>(fzf-complete-word)
../pack/packs-unix/opt/fzf.vim/README.md:imap <c-x><c-f> <plug>(fzf-complete-path)
../pack/packs-unix/opt/fzf.vim/README.md:imap <c-x><c-l> <plug>(fzf-complete-line)
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-path)
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-file)
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-file-ag)
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-line)
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim/complete.vim:" <plug>(fzf-complete-buffer-line)
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <plug>(-fzf-/) /
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <plug>(-fzf-:) :
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:  let prefix = "\<plug>(-fzf-".a:type.')'
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:    call feedkeys("\<plug>(-fzf-vim-do)")
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:        \ '<Plug>', s:blue('<Plug>', 'SpecialKey'), 'g')
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:    call feedkeys("\<Plug>(-fzf-complete-finish)")
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:nnoremap <silent> <Plug>(-fzf-complete-finish) a
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l
../pack/packs-unix/opt/fzf.vim/autoload/fzf/vim.vim:  call feedkeys("\<Plug>(-fzf-complete-trigger)")
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-n)               | Normal mode mappings
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-i)               | Insert mode mappings
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-x)               | Visual mode mappings
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-maps-o)               | Operator-pending mappings
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-word)        |  `cat /usr/share/dict/words`
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-path)        | Path completion using  `find`  (file + dir)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-file)        | File completion using  `find`
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-line)        | Line completion (all open buffers)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt: <plug>(fzf-complete-buffer-line) | Line completion (current buffer only)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    nmap <leader><tab> <plug>(fzf-maps-n)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    xmap <leader><tab> <plug>(fzf-maps-x)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    omap <leader><tab> <plug>(fzf-maps-o)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    imap <c-x><c-k> <plug>(fzf-complete-word)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    imap <c-x><c-f> <plug>(fzf-complete-path)
../pack/packs-unix/opt/fzf.vim/doc/fzf-vim.txt:    imap <c-x><c-l> <plug>(fzf-complete-line)
../plugin/plugins.vim:noremap <silent> <C-j> <Plug>(ale_next_wrap)
../plugin/plugins.vim:noremap <silent> <C-k> <Plug>(ale_previous_wrap)
../plugin/plugins.vim:  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
../plugin/plugins.vim:  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
../plugin/plugins.vim:  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
../plugin/plugins.vim:map z/ <Plug>(incsearch-fuzzy-stay)
../plugin/plugins.vim:map g/ <Plug>(incsearch-stay)
../plugin/plugins.vim:nmap <F6> <Plug>(openbrowser-smart-search)
../plugin/plugins.vim:vmap <F6> <Plug>(openbrowser-smart-search)
../plugin/plugins.vim:map *  <Plug>(asterisk-*)
../plugin/plugins.vim:map #  <Plug>(asterisk-#)
../plugin/plugins.vim:map g* <Plug>(asterisk-g*)  " rg --no-ignore ' g\* '
../plugin/plugins.vim:map g# <Plug>(asterisk-g#)  " rg --no-ignore ' g# '
../plugin/plugins.vim:map z* <Plug>(asterisk-z*)  " rg --no-ignore ' z\* '
../plugin/plugins.vim:map z# <Plug>(asterisk-z#)  " rg --no-ignore ' z# '
../plugin/plugins.vim:nmap gA <Plug>(EasyAlign)
../plugin/plugins.vim:xmap gA <Plug>(EasyAlign)
../plugin/plugins.vim:map  <Leader><Leader>f <Plug>(easymotion-bd-f)
../plugin/plugins.vim:nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)
../plugin/plugins.vim:map  <Leader><Leader>w <Plug>(easymotion-bd-w)
../plugin/plugins.vim:nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
../plugin/plugins.vim:autocmd VimEnter * nmap s <Plug>(easymotion-overwin-f2)
../plugin/plugins.vim:        map / <Plug>(easymotion-sn)
../plugin/plugins.vim:        map n <Plug>(easymotion-next)
../plugin/plugins.vim:        map N <Plug>(easymotion-prev)
../plugin/plugins.vim:  nmap <unique> <leader>pe <Plug>(PickerEdit)
../plugin/plugins.vim:  nmap <unique> <leader>pb <Plug>(PickerBuffer)
../plugin/plugin.vim:  v/<Plug>/d
../plugin/plugin.vim:  silent! exe 'g/<Plug>/d'
