
generated by  $vimfiles/settings/all-unix.sh

$vimfiles

.git/logs/refs/heads/master:40ff2236a485c77c6cc498ff554b5407e3f2ba6b 9e721571293ed211855cb2f579b65f3ea3725195 Joseph Harriott <trohib@gmail.com> 1587388326 +0200	commit: Grab uses of <leader>
.git/logs/refs/heads/master:a5d36e25c2289208b44350329fe1043e4993b45c 9bca56807cbf1065f68c9d832b76304fc205da11 Joseph Harriott <trohib@gmail.com> 1587415135 +0200	commit: <leader>vg
.git/logs/HEAD:40ff2236a485c77c6cc498ff554b5407e3f2ba6b 9e721571293ed211855cb2f579b65f3ea3725195 Joseph Harriott <trohib@gmail.com> 1587388326 +0200	commit: Grab uses of <leader>
.git/logs/HEAD:a5d36e25c2289208b44350329fe1043e4993b45c 9bca56807cbf1065f68c9d832b76304fc205da11 Joseph Harriott <trohib@gmail.com> 1587415135 +0200	commit: <leader>vg
test/vimrc.vim:nnoremap <leader>l :echo 'you hit leader l'<CR>
test/plugins.vim:nnoremap <leader><leader> :Lines<CR>
QR.md:    <leader>tc          " (mapped to) ColorToggle (by colorizer) and files open fast when off
QR.md:<leader>atob " base64 to a string
QR.md:<leader>btoa " a string to base64
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>g',builtin.grep_string,{desc='Telescope grep current Word in cwd'})
nvim/lua/lazy/telescope.lua:      -- vim.keymap.set({'n'},'<leader>g','zy:Telescope grep_string default_text=<c-r>z<cr>',{desc='Telescope grep current selection in cwd'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>j',function() builtin.find_files { cwd="$DJH"} end,
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tb',builtin.buffers,{desc='Telescope Bbuffers'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>td',builtin.diagnostics,{desc='Telescope Diagnostics'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>th',builtin.help_tags,{desc='Telescope Helptags'})
nvim/lua/lazy/telescope.lua:      -- vim.keymap.set({'n'},'<leader>tj',builtin.jumplist,{desc='Telescope Jump list entries'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tj',function() builtin.jumplist { fname_width=50} end,
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tk',builtin.keymaps,{desc='Telescope vim normal mode Keymaps'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tf',builtin.find_files,{desc='Telescope Files from cwd'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tg',builtin.git_files,{desc='Telescope search in Git ls-files'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tm',builtin.man_pages,{desc='Telescope Man pages'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tp',builtin.resume,{desc='Telescope resume Previous picker'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tr',builtin.live_grep,{desc='Telescope Ripgrep in cwd'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>ts',builtin.spell_suggest,{desc='Telescope Spelling suggestion for current word'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tt',builtin.filetypes,{desc='Telescope vim fileTypes'})
nvim/lua/lazy/telescope.lua:      vim.keymap.set({'n'},'<leader>tv',builtin.vim_options,{desc='Telescope Vim options'})
vim/enter/gvimrc.vim:nnoremap <leader>8 :call EightyTwoColumns()<cr>
vim/ftplugin/vim.vim:vnoremap <buffer><leader>> :s/"">/"">>/<CR>
vim/ftplugin/vim.vim:vnoremap <buffer><leader>< :s/"">>/"">/<CR>
vim/ftplugin/vim.vim:nnoremap <buffer><leader><leader>> :call FirmComment('"')<cr>
vim/ftplugin/vim.vim:nnoremap <buffer><leader><leader>< :call FirmUnComment('"')<cr>
vim/after/plugin/plugins.vim:noremap <leader>gg :call GitGutterFocus()<cr>
vim/ftplugin/lua.vim:vnoremap <buffer><leader>> :s/-- -/-- --/<CR>  " demote
vim/ftplugin/lua.vim:vnoremap <buffer><leader>< :s/-- --/-- -/<CR>  " promote
vim/ftplugin/lua.vim:nnoremap <buffer><leader><leader>> :call FirmComment('--')<cr>
vim/ftplugin/lua.vim:nnoremap <buffer><leader><leader>< :call FirmUnComment('--')<cr>
vim/ftplugin/lisp.vim:nnoremap <buffer><leader><leader>> :call FirmComment(';')<cr>
vim/ftplugin/lisp.vim:nnoremap <buffer><leader><leader>< :call FirmUnComment(';')<cr>
vim/ftplugin/python.vim:nnoremap <leader>u :TagbarToggle<CR>
vim/ftplugin/HashEqualsFolding.vim:vnoremap <buffer><leader>> :s/#=/#==/<CR>  " demote
vim/ftplugin/HashEqualsFolding.vim:vnoremap <buffer><leader>< :s/#==/#=/<CR>  " promote
vim/ftplugin/HashEqualsFolding.vim:nnoremap <buffer><leader><leader>> :call FirmComment('#')<cr>
vim/ftplugin/HashEqualsFolding.vim:nnoremap <buffer><leader><leader>< :call FirmUnComment('#')<cr>
vim/ftplugin/md.vim:"  (I'm using <leader> here to avoid accidentally running this)
vim/ftplugin/md.vim:  nnoremap <buffer><leader><leader><F7> :execute "silent !perl $misc/CP/PerlTools/MessengerMd.pl ".expand('%:p')<CR>
vim/ftplugin/md.vim:  nnoremap <buffer><leader><leader><F7> :call MessengerMd()<CR>
vim/ftplugin/md.vim:" check with  :map <leader><leader><F7>
vim/ftplugin/md.vim:"  (I'm using <leader> here to avoid accidentally running this)
vim/ftplugin/md.vim:  nnoremap <buffer><leader><F7> :execute "silent !perl $misc/CP/PerlTools/mysmsMD.pl ".expand('%:p')<CR>
vim/ftplugin/md.vim:  nnoremap <buffer><leader><F7> :call MysmsMD()<CR>
vim/ftplugin/md.vim:" check with  :map <leader><F7>
vim/ftplugin/md.vim:vnoremap <buffer> <leader>v1 :s#^\v(.+)$#> \1  #g <bar> nohlsearch <CR>
vim/ftplugin/md.vim:vnoremap <buffer> <leader>v2 :s#^\v(.+)  $\n^$#\1\r#g <CR>
vim/ftplugin/emdr.vim:nnoremap <buffer> <leader><leader>= I━━  <Esc>A  ━━<Esc>
vim/ftplugin/emdr.vim:nnoremap <buffer> <leader>== I━━<Esc>A━━<Esc>
vim/ftplugin/emdr.vim:nnoremap <buffer> <leader>=- 0xx<Esc>$xx<Esc>
vim/ftplugin/emdr.vim:nnoremap <buffer> <leader># 099i~<Esc>
vim/ftplugin/dokuwiki.vim:vnoremap <buffer><leader>hy :call PageTitleToHyperlink()<CR>
vim/ftplugin/dokuwiki.vim:nnoremap <buffer><leader>h :s/\(.\+\)  \(http.\+\)/[[\2 \|\1]]/<bar>noh<cr>
vim/ftplugin/dokuwiki.vim:"   :unmap <leader>i
vim/ftplugin/dokuwiki.vim:nnoremap <buffer> <leader><leader>i :s/\m\(^>\+\) /\1 <wrap indent> /<CR><Bar>A </wrap><Esc>
vim/ftplugin/dokuwiki.vim:nnoremap <buffer> <leader>= I=<Esc>A=<Esc>
vim/ftplugin/dokuwiki.vim:nnoremap <buffer> <leader><leader>= I=== <Esc>A ===<Esc>
vim/ftplugin/dokuwiki.vim:nnoremap <leader><leader>5 ?''<cr>i<cr><esc>:s/''/%% /<cr>:s/''/ %%/<cr>kJ
vim/ftplugin/dokuwiki.vim:nnoremap <buffer> <leader>' viwc''''<Esc>hP
vim/ftplugin/dokuwiki.vim:vnoremap <buffer> <leader>' c''''<Esc>hP
vim/ftplugin/gitconfig.vim:nnoremap <leader>u :s#https://github.com/#git@github.com:#g <CR>
vim/packs-cp/opt/vim-interestingwords/README.md:- Highlight with ``<Leader>k``
vim/packs-cp/opt/vim-interestingwords/README.md:- Clear every word highlight with ``<Leader>K`` throughout the buffer
vim/packs-cp/opt/vim-interestingwords/README.md:``<Leader>k`` will act as a **toggle**, so you can use it to highlight and remove the highlight from a given word. Note that you can highlight different words at the same time.
vim/packs-cp/opt/vim-interestingwords/README.md:Finally, if you don't want to toggle every single highlighted word and want to clear all of them, just hit ``<Leader>K``
vim/packs-cp/opt/vim-interestingwords/README.md:nnoremap <silent> <leader>k :call InterestingWords('n')<cr>
vim/packs-cp/opt/vim-interestingwords/README.md:vnoremap <silent> <leader>k :call InterestingWords('v')<cr>
vim/packs-cp/opt/vim-interestingwords/README.md:nnoremap <silent> <leader>K :call UncolorAllWords()<cr>
vim/ftplugin/bbcode.vim:nnoremap <buffer> <leader><leader>] viwc[color=navy][/color]<Esc>bbp
vim/ftplugin/bbcode.vim:vnoremap <buffer> <leader><leader>] c[color=navy][/color]<Esc>bbp
vim/ftplugin/bbcode.vim:nnoremap <buffer> <leader>] viwc[code][/code]<Esc>bbp
vim/ftplugin/bbcode.vim:vnoremap <buffer> <leader>] c[code][/code]<Esc>bbp
vim/ftplugin/bbcode.vim:vnoremap <buffer> <leader>u c[url][/url]<Esc>F[PF]
vim/ftplugin/bbcode.vim:nnoremap <buffer> <leader><leader>u viwc[user=][/user]<Esc>F[PF]
vim/ftplugin/bbcode.vim:vnoremap <buffer> <leader><leader>u c[user=][/user]<Esc>F[PF]
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:    nnoremap <silent> <leader>k :call InterestingWords('n')<cr>
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:    vnoremap <silent> <leader>k :call InterestingWords('v')<cr>
vim/packs-cp/opt/vim-interestingwords/plugin/interestingwords.vim:    nnoremap <silent> <leader>K :call UncolorAllWords()<cr>
vim/ftplugin/fugitive.vim:nnoremap <buffer><leader>gp :Git push<cr>
vim/ftplugin/fugitive.vim:nnoremap <buffer><leader>gs 4j-<cr>
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>=  <Plug>FontsizeBegin
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>+  <Plug>FontsizeInc
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>-  <Plug>FontsizeDec
vim/packs-cp/opt/vim-fontsize/plugin/fontsize.vim:    nmap <silent> <Leader><Leader>0  <Plug>FontsizeDefault
vim/ftplugin/tex.vim:nnoremap <buffer><leader><F7> :call TabularFullAlign()<CR><Bar>:update<CR>
vim/ftplugin/tex.vim:inoremap <buffer><leader><F7> <Esc>:call TabularFullAlign()<CR><Bar>:update<CR>
vim/ftplugin/tex.vim:nnoremap <buffer><leader>> :call DemoteSubSections()<CR>
vim/ftplugin/tex.vim:vnoremap <buffer><leader>> <Esc>:call DemoteSubSections()<CR>
vim/ftplugin/tex.vim:nnoremap <buffer><leader>< :call PromoteSubSections()<CR>
vim/ftplugin/tex.vim:vnoremap <buffer><leader>< <Esc>:call PromoteSubSections()<CR>
vim/ftplugin/tex.vim:  nnoremap <silent><buffer><leader><F7> :call PHMatch()<cr>
vim/ftplugin/tex.vim:  inoremap <silent><buffer><leader><F7> <Esc>:call PHMatch()<cr>
vim/ftplugin/tex.vim:  vnoremap <silent><buffer><leader><F7> <Esc>:call PHMatch()<cr>
vim/ftplugin/tex.vim:  nnoremap <silent><buffer><leader><F7> :call LaTeXsyntaxFolding()<cr>
vim/ftplugin/tex.vim:  inoremap <silent><buffer><leader><F7> <Esc>:call LaTeXsyntaxFolding()<cr>
vim/ftplugin/tex.vim:  vnoremap <silent><buffer><leader><F7> <Esc>:call LaTeXsyntaxFolding()<cr>
vim/ftplugin/tex.vim:vnoremap <buffer> <leader>v1 :s#^\v(.+)$#\1 \\\\#g <bar> nohlsearch <CR>
vim/ftplugin/tex.vim:vnoremap <buffer> <leader>v2 :s#^\v(.+) \\\\$\n^$#\1\r#g <CR>
vim/ftplugin/ps1.vim:nnoremap <leader>o :ContextToggleWindow<CR>
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>=    Begin "font size" mode
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>+    Increment font size (by [count])
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>-    Decrement font size (by [count])
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  <Leader><Leader>0    Revert to default font size
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:Note that by default, <Leader> is the backslash character, so for example
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:<Leader><Leader>+ is invoked by pressing \\+ from normal mode.
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  5<Leader><Leader>+
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:to use <Leader> instead of <Leader><Leader> as a prefix:
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>=  <Plug>FontsizeBegin
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>+  <Plug>FontsizeInc
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>-  <Plug>FontsizeDec
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  nmap <silent> <Leader>0  <Plug>FontsizeDefault
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  - Switch default key bindings to <Leader><Leader>x instead of <Leader>xx.
vim/packs-cp/opt/vim-fontsize/doc/fontsize.txt:  - Changed <Leader>== to enter "font size" mode without changing the
vim/packs-cp/opt/vim-fontsize/README.rst:For example, using the default key bindings, pressing <Leader><Leader>+ will
vim/packs-cp/opt/vim-ShowTrailingWhitespace/README.md:    nnoremap <silent> <Leader>t$ :<C-u>call ShowTrailingWhitespace#Toggle(0)<Bar>
vim/packs-cp/opt/vim-ShowTrailingWhitespace/doc/ShowTrailingWhitespace.txt:    nnoremap <silent> <Leader>t$ :<C-u>call ShowTrailingWhitespace#Toggle(0)<Bar>
vim/ftplugin/perl.vim:nnoremap <leader>o :ContextToggleWindow<CR>
vim/ftplugin/perl.vim:nnoremap <leader>u :TagbarToggle<CR>
vim/syntax/leader.vim:syn match leader '<leader>\c' nextgroup=keystrokes
vim/ftplugin/HashFolding.vim:vnoremap <buffer><leader>> :s/^#/##/<CR>
vim/ftplugin/HashFolding.vim:vnoremap <buffer><leader>< :s/^#//<CR>
vim/ftplugin/markdown.vim:vnoremap <buffer><leader>> :s/^#/##/<CR>
vim/ftplugin/markdown.vim:vnoremap <buffer><leader>< :s/^#//<CR>
vim/ftplugin/markdown.vim:nnoremap <buffer><leader>` viwc``<Esc>P
vim/ftplugin/markdown.vim:  vnoremap <buffer><leader>è c``<Esc>P
vim/ftplugin/markdown.vim:  vnoremap <buffer><leader>` c``<Esc>P
vim/packs-cp/opt/colorizer/plugin/colorizer.vim:" By default, <leader>tc is mapped to ColorToggle. If you want to use another
vim/packs-cp/opt/colorizer/plugin/colorizer.vim:  nmap <unique> <Leader>tc <Plug>Colorizer
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vnoremap <silent> <Leader>r<Enter> :LiveEasyAlign!<Enter>
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  " vnoremap <silent> <Leader><Enter>  :LiveEasyAlign<Enter>
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  " nmap <leader>A <Plug>(EasyAlignOperator)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader><Enter> <Plug>(LiveEasyAlign)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  nmap <leader>A       <Plug>(EasyAlign)
vim/packs-cp/opt/vim-easy-align/test/include/setup.vader:  vmap <leader>.       <Plug>(EasyAlignRepeat)
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>be  - Opens BufExplorer
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>bt  - Toggles BufExplorer open or closed
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>bs  - Opens horizontally split window BufExplorer
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:"                 <Leader>bv  - Opens vertically split window BufExplorer
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>be :BufExplorer<CR>
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>bt :ToggleBufExplorer<CR>
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>bs :BufExplorerHorizontalSplit<CR>
vim/packs-cp/opt/bufexplorer/plugin/bufexplorer.vim:    nnoremap <script> <silent> <unique> <Leader>bv :BufExplorerVerticalSplit<CR>
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>be   or   :BufExplorer   or   Your custom key mapping
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>bt   or   :ToggleBufExplorer   or   Your custom key mapping
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>bs   or   :BufExplorerHorizontalSplit   or   Your custom key mapping
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt: <Leader>bv   or   :BufExplorerVerticalSplit   or   Your custom key mapping
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:When <Leader>bs or <Leader>bv is issued, bufexplorer opens in either a
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:windows) in the newly split window.  When <Leader>be is issued, bufexplorer
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:If you do not like the default key mappings of <Leader>be, <Leader>bs, and
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:<Leader>bv, you can override bufexplorer's default mappings by setting up
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:    - Thanks to PhilRunninger for changing documentation to use <Leader>, in
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:      map <Leader>bt, and the function ToggleBufExplorer().
vim/packs-cp/opt/bufexplorer/doc/bufexplorer.txt:      *compliant*, adding default keymappings of <Leader>be and <Leader>bs
vim/packs-cp/opt/undotree/README.md:vim.keymap.set('n', '<leader><F5>', vim.cmd.UndotreeToggle)
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>*   *
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>#   #
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>g   g
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>g#  g#
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>z   z
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>gz  gz
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>z#  z#
vim/packs-cp/opt/vim-asterisk/test/.themisrc:noremap <Leader>gz# gz#
vim/packs-cp/opt/limelight.vim/README.md:nmap <Leader>l <Plug>(Limelight)
vim/packs-cp/opt/limelight.vim/README.md:xmap <Leader>l <Plug>(Limelight)
vim/packs-cp/opt/vim-matchup/doc/matchup.txt:  nmap <leader>% <plug>(matchup-z%)
vim/packs-cp/opt/vim-easymotion/README.md:**The default leader has been changed to `<Leader><Leader>` to avoid
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader> <Plug>(easymotion-prefix)
vim/packs-cp/opt/vim-easymotion/README.md:All motions will then be triggered with `<Leader>` by default, e.g.
vim/packs-cp/opt/vim-easymotion/README.md:`<Leader>s`, `<Leader>gE`.
vim/packs-cp/opt/vim-easymotion/README.md:Type `<Leader><Leader>w`(`<Plug>(easymotion-w)`) to trigger the word motion `w`.
vim/packs-cp/opt/vim-easymotion/README.md:Type `<Leader><Leader>fo`, and all "o" characters are highlighted:
vim/packs-cp/opt/vim-easymotion/README.md:" <Leader>f{char} to move to {char}
vim/packs-cp/opt/vim-easymotion/README.md:map  <Leader>f <Plug>(easymotion-bd-f)
vim/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>f <Plug>(easymotion-overwin-f)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>L <Plug>(easymotion-bd-jk)
vim/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>L <Plug>(easymotion-overwin-line)
vim/packs-cp/opt/vim-easymotion/README.md:map  <Leader>w <Plug>(easymotion-bd-w)
vim/packs-cp/opt/vim-easymotion/README.md:nmap <Leader>w <Plug>(easymotion-overwin-w)
vim/packs-cp/opt/vim-easymotion/README.md:By default, you can already jump forward or backward with `<Leader>s`. A useful
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>l <Plug>(easymotion-lineforward)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>h <Plug>(easymotion-linebackward)
vim/packs-cp/opt/vim-easymotion/README.md:For example, `<Leader><Leader>sa` can search 'あ'.
vim/packs-cp/opt/vim-easymotion/README.md:Default `<Leader><Leader>` prefix isn't easy to press, and I leave them just for backwards compatibility.
vim/packs-cp/opt/vim-easymotion/README.md:You should at least change the prefix key like this `map <Leader> <Plug>(easymotion-prefix)`
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>j <Plug>(easymotion-j)
vim/packs-cp/opt/vim-easymotion/README.md:map <Leader>k <Plug>(easymotion-k)
vim/packs-cp/opt/vim-easymotion/README.md:**`<Leader>j`** & **`<Leader>k`** make it easy to move to the lines.
vim/packs-cp/opt/vim-easymotion/README.md:Of course, you can use any key you want instead of `s` such as `<Space>`, `<Leader>s`, etc...
vim/packs-cp/opt/vim-visual-star-search/README.md:If you hit `<leader>*` (`\*` unless you changed the mapleader), vim
vim/packs-cp/opt/vim-visual-star-search/README.md:If you have already mapped `<leader>*` then visual star search won't override it.
vim/packs-cp/opt/vim-visual-star-search/test-patterns:recursive search (<leader>*), and see if Vim finds
vim/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:if maparg('<leader>*', 'n') == ''
vim/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:  nnoremap <leader>* :execute 'noautocmd vimgrep /\V' . substitute(escape(expand("<cword>"), '\'), '\n', '\\n', 'g') . '/ **'<CR>
vim/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:if maparg('<leader>*', 'v') == ''
vim/packs-cp/opt/vim-visual-star-search/plugin/visual-star-search.vim:  vnoremap <leader>* :<C-u>call VisualStarSearchSet('/')<CR>:execute 'noautocmd vimgrep /' . @/ . '/ **'<CR>
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>w <Plug>(easymotion-iskeyword-w)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>b <Plug>(easymotion-iskeyword-b)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>e <Plug>(easymotion-iskeyword-e)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>ge <Plug>(easymotion-iskeyword-ge)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>W <Plug>(easymotion-W)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>B <Plug>(easymotion-B)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>E <Plug>(easymotion-E)
vim/packs-cp/opt/vim-easymotion/t/compare_movements_spec.vim:        nmap <Leader>gE <Plug>(easymotion-gE)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>w <Plug>(easymotion-iskeyword-w)
vim/packs-cp/opt/vim-easymotion/t/easymotion_spec.vim:        map <Leader>b <Plug>(easymotion-iskeyword-b)
vim/packs-cp/opt/vim-easymotion/plugin/EasyMotion.vim:            map <Leader><Leader> <Plug>(easymotion-prefix)
vim/packs-cp/opt/quick-scope/README.md:nmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/quick-scope/README.md:xmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Type <Leader><Leader>w to trigger the word motion |w|. See
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Type <Leader><Leader>fo, and all "o" characters are highlighted: >
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Note: The default leader has been changed to <Leader><Leader> to avoid
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>f{char}      | Find {char} to the right. See |f|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>F{char}      | Find {char} to the left. See |F|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>t{char}      | Till before the {char} to the right. See |t|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>T{char}      | Till after the {char} to the left. See |T|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>w            | Beginning of word forward. See |w|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>W            | Beginning of WORD forward. See |W|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>b            | Beginning of word backward. See |b|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>B            | Beginning of WORD backward. See |B|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>e            | End of word forward. See |e|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>E            | End of WORD forward. See |E|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>ge           | End of word backward. See |ge|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>gE           | End of WORD backward. See |gE|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>j            | Line downward. See |j|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>k            | Line upward. See |k|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>n            | Jump to latest "/" or "?" forward. See |n|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>N            | Jump to latest "/" or "?" backward. See |N|.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>s            | Find(Search) {char} forward and backward.
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-f) | <Leader>f{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-F) | <Leader>F{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-t) | <Leader>t{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-T) | <Leader>T{char}
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-w) | <Leader>w
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-W) | <Leader>W
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-b) | <Leader>b
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-B) | <Leader>B
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-e) | <Leader>e
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-E) | <Leader>E
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-ge)| <Leader>ge
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-gE)| <Leader>gE
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-j) | <Leader>j
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-k) | <Leader>k
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-n) | <Leader>n
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-N) | <Leader>N
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Plug>(easymotion-s) | <Leader>s
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>f <Plug>(easymotion-overwin-f)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>f <Plug>(easymotion-bd-f)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>f <Plug>(easymotion-bd-f)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>s <Plug>(easymotion-overwin-f2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>s <Plug>(easymotion-bd-f2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>s <Plug>(easymotion-bd-f2)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>L <Plug>(easymotion-overwin-line)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>L <Plug>(easymotion-bd-jk)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>L <Plug>(easymotion-bd-jk)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                nmap <Leader>w <Plug>(easymotion-overwin-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                xmap <Leader>w <Plug>(easymotion-bd-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:                omap <Leader>w <Plug>(easymotion-bd-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>; <Plug>(easymotion-next)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:            nmap <Leader>, <Plug>(easymotion-prev)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-sol-j)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-sol-k)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>J <Plug>(easymotion-eol-j)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>K <Plug>(easymotion-eol-K)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>w <Plug>(easymotion-iskeyword-w)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:        map <Leader>b <Plug>(easymotion-iskeyword-b)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    nmap <Leader>s <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    xmap <Leader>s <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    omap <Leader>z <Plug>(easymotion-sn)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    <Leader>s{char}{char}{char}...<CR>
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:For example, '<Leader><Leader>fa' can search 'あ'. This feature doesn't
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Type <Leader><Leader>w and the text is updated: >
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Note: The default leader key has been changed to '<Leader><Leader>' to
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:    map <Leader> <Plug>(easymotion-prefix)
vim/packs-cp/opt/vim-easymotion/doc/easymotion.txt:Default: '<Leader><Leader>'
vim/packs-cp/opt/quick-scope/doc/quick-scope.txt:Create a custom mapping (<leader> + q in the example below):
vim/packs-cp/opt/quick-scope/doc/quick-scope.txt:  nmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/quick-scope/doc/quick-scope.txt:  xmap <leader>q <plug>(QuickScopeToggle)
vim/packs-cp/opt/MatchTagAlways/README.md:    nnoremap <leader>% :MtaJumpToOtherTag<cr>
vim/packs-cp/opt/fzf.vim/README.md:nmap <leader><tab> <plug>(fzf-maps-n)
vim/packs-cp/opt/fzf.vim/README.md:xmap <leader><tab> <plug>(fzf-maps-x)
vim/packs-cp/opt/fzf.vim/README.md:omap <leader><tab> <plug>(fzf-maps-o)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/text/surroundings/Lines/Creator.vim:" [count]<Leader>??	Insert ??? around [count] lines.
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/text/surroundings/Lines/Creator.vim:" [count]<Leader>?{motion}
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/text/surroundings/Lines/Creator.vim:" {Visual}<Leader>?	Insert ??? around the selection.
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    nmap <leader><tab> <plug>(fzf-maps-n)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    xmap <leader><tab> <plug>(fzf-maps-x)
vim/packs-cp/opt/fzf.vim/doc/fzf-vim.txt:    omap <leader><tab> <plug>(fzf-maps-o)
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/err.vim:"	nnoremap <Leader>f :call Foo#Bar()<Bar>if ingo#err#IsSet()<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cc` **|NERDCommenterComment|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cn` **|NERDCommenterNested|**
vim/packs-cp/opt/nerdcommenter/README.md:    Same as <leader>cc but forces nesting.
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>c<space>` **|NERDCommenterToggle|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cm` **|NERDCommenterMinimal|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>ci` **|NERDCommenterInvert|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cs` **|NERDCommenterSexy|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cy` **|NERDCommenterYank|**
vim/packs-cp/opt/nerdcommenter/README.md:    Same as <leader>cc except that the commented line(s) are yanked first.
vim/packs-cp/opt/nerdcommenter/README.md:  * `<leader>c$` **|NERDCommenterToEOL|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `<leader>cA` **|NERDCommenterAppend|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `<leader>ca` **|NERDCommenterAltDelims|**
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cl` **|NERDCommenterAlignLeft**
vim/packs-cp/opt/nerdcommenter/README.md:    `[count]<leader>cb` **|NERDCommenterAlignBoth**
vim/packs-cp/opt/nerdcommenter/README.md:    Same as **|NERDCommenterComment|** except that the delimiters are aligned down the left side (`<leader>cl`) or both sides (`<leader>cb`).
vim/packs-cp/opt/nerdcommenter/README.md:  * `[count]<leader>cu` **|NERDCommenterUncomment|**
vim/packs-cp/opt/nerdcommenter/README.md:nnoremap <silent> <leader>c} V}:call nerdcommenter#Comment('x', 'toggle')<CR>
vim/packs-cp/opt/nerdcommenter/README.md:nnoremap <silent> <leader>c{ V{:call nerdcommenter#Comment('x', 'toggle')<CR>
vim/packs-cp/opt/vim-bufkill/README.md:" Turn off default <leader>bb, <leader>bd, etc. mappings (default: 1)
vim/packs-cp/opt/nerdcommenter/CHANGELOG.md:*  use |<Leader>| instead of comma to start the default mappings
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"   You want to invoke a command :Foo in a line-wise mapping <Leader>foo; the
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	nnoremap <Leader>foo :<C-u>.Foo<CR>
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	nnoremap <Leader>foo :Foo<CR>
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	:nnoremap <Leader>foo :call ingo#cmdrangeconverter#BufferToLineRange('Foo')<Bar>if ingo#err#IsSet()<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"   a mapping <Leader>foo that defaults to the whole buffer, unless [count] is
vim/packs-cp/opt/vim-ingo-library/autoload/ingo/cmdrangeconverter.vim:"	:nnoremap <Leader>foo :<C-u>if ! ingo#cmdrangeconverter#LineToBufferRange('s///g')<Bar>echoerr ingo#err#Get()<Bar>endif<CR>
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bb',   '<Plug>BufKillBack')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bf',   '<Plug>BufKillForward')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bun',  '<Plug>BufKillBun')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bun', '<Plug>BufKillBangBun')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bd',   '<Plug>BufKillBd')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bd',  '<Plug>BufKillBangBd')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bw',   '<Plug>BufKillBw')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>!bw',  '<Plug>BufKillBangBw')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>bundo','<Plug>BufKillUndo')
vim/packs-cp/opt/vim-bufkill/plugin/bufkill.vim:  call <SID>CreateUniqueMapping('<Leader>ba',   '<Plug>BufKillAlt')
vim/packs-cp/opt/nerdcommenter/plugin/nerdcommenter.vim:                execute mode . 'map <leader>' . a:combo . ' ' . plug
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:"            changed a map CalendarV for <Leader>cal
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:"            changed a map CalendarH for <Leader>caL
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:"             make a map CalendarV for <Leader>ca
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:"             <Leader>ca didn't show current month.
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:"     1.3e : added usage for <Leader>
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>cal <Plug>CalendarV
vim/packs-cp/opt/calendar-vim/plugin/calendar.vim:    nmap <unique> <Leader>caL <Plug>CalendarH
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Most NERD commenter commands are executed using the |<Leader>| key. In Vim
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:In the definition of custom commands |<Leader>| is the placeholder for the
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:leader key. To see the current mapping for |<Leader>| type :echo mapleader.
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cc |NERDCommenterComment|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cn |NERDCommenterNested|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc but forces nesting.
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|c<space> |NERDCommenterToggle|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cm |NERDCommenterMinimal|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|ci |NERDCommenterInvert|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cs |NERDCommenterSexy|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cy |NERDCommenterYank|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc except that the commented line(s) are yanked first.
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|c$ |NERDCommenterToEOL|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|cA |NERDCommenterAppend|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|ca |NERDCommenterAltDelims|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cl    |NERDCommenterAlignLeft|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cb    |NERDCommenterAlignBoth|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:left side (|<Leader>|cl) or both sides (|<Leader>|cb).
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:[count]|<Leader>|cu |NERDCommenterUncomment|
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cc
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cn
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Performs nested commenting.  Works the same as |<Leader>|cc except that if a line
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|c<space>
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cm
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|cm then a '/*' will be placed at the start of the top line and a '*/'
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|ci
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cs
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cy
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc except that it yanks the line(s) that are commented first.
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|c$
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|cA
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: |<Leader>|ca
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:if the user is editing a c++ file using // comments and they hit |<Leader>|ca
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mappings: [count]|<Leader>|cl   [count]|<Leader>|cb
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Same as |<Leader>|cc except that the comment delimiters are aligned on the left
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:Default mapping: [count]|<Leader>|cu
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:|<Leader>|cu on this line: >
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:and we comment it with |<Leader>|cn it will be changed to: >
vim/packs-cp/opt/nerdcommenter/doc/nerdcommenter.txt:you hit |<Leader>|cc on a line that is already commented it will be commented
vim/packs-cp/opt/vim-closetag/README.md:let g:closetag_close_shortcut = '<leader>>'
vim/packs-cp/opt/vim-peekaboo/README.md:| `g:peekaboo_prefix`     | Empty (string)  | Prefix for key mapping (e.g. `<leader>`)          |
vim/packs-cp/opt/vim-base64/README.md:* `<leader>atob` to convert from base64 to a string
vim/packs-cp/opt/vim-base64/README.md:* `<leader>btoa` to convert from a string to base64
vim/packs-cp/opt/vim-base64/README.md:You can also, in normal mode, replace all instances of a regular expression by their base64 representation, using `<leader>btoa/` or `<leader>atob/`. This will insert a command mode string, with your cursor directly where you can type the regular expression.
vim/packs-cp/opt/vim-base64/plugin/base64.vim:  vnoremap <silent> <leader>atob :<c-u>call base64#v_atob()<cr>
vim/packs-cp/opt/vim-base64/plugin/base64.vim:  vnoremap <silent> <leader>btoa :<c-u>call base64#v_btoa()<cr>
vim/packs-cp/opt/vim-base64/plugin/base64.vim:  nnoremap <leader>btoa/ :%s/\v()/\=base64#encode(submatch(1))/<home><right><right><right><right><right><right>
vim/packs-cp/opt/vim-base64/plugin/base64.vim:  nnoremap <leader>atob/ :%s/\v()/\=base64#decode(submatch(1))/<home><right><right><right><right><right><right>
vim/packs-cp/opt/vim-base64/doc/base64.txt:                                                        *debase64-<leader>-btoa*
vim/packs-cp/opt/vim-base64/doc/base64.txt:<leader>btoa            Base64 encodes the visually selected string
vim/packs-cp/opt/vim-base64/doc/base64.txt:                                                        *base64-<leader>-atob*
vim/packs-cp/opt/vim-base64/doc/base64.txt:<leader>atob            Decodes the visually selected base64 string
vim/packs-cp/opt/vim-base64/doc/base64.txt:                                                       *base64-<leader>-atob/*
vim/packs-cp/opt/vim-base64/doc/base64.txt:<leader>btoa/           Starts a command line for encoding a regex submatch
vim/packs-cp/opt/vim-base64/doc/base64.txt:                                                       *base64-<leader>-btoa/*
vim/packs-cp/opt/vim-base64/doc/base64.txt:<leader>atob/           Starts a command line for decoding a regex submatch
vim/packs-cp/opt/vim-base64/doc/tags:base64-<leader>-atob	base64.txt	/*base64-<leader>-atob*
vim/packs-cp/opt/vim-base64/doc/tags:base64-<leader>-atob/	base64.txt	/*base64-<leader>-atob\/*
vim/packs-cp/opt/vim-base64/doc/tags:base64-<leader>-btoa/	base64.txt	/*base64-<leader>-btoa\/*
vim/packs-cp/opt/vim-base64/doc/tags:debase64-<leader>-btoa	base64.txt	/*debase64-<leader>-btoa*
vim/packs-cp/opt/vim-prettier/README.md:<Leader>p
vim/packs-cp/opt/vim-prettier/README.md:Change the mapping to run from the default of `<Leader>p`
vim/packs-cp/opt/vim-prettier/README.md:nmap <Leader>py <Plug>(Prettier)
vim/packs-cp/opt/vis/plugin/cecutil.vim: map <unique> <Leader>swp <Plug>SaveWinPosn
vim/packs-cp/opt/vis/plugin/cecutil.vim: map <unique> <Leader>rwp <Plug>RestoreWinPosn
vim/packs-cp/opt/csv.vim/README.md:changed the `<Leader>` or `<LocalLeader>` variables, those the `<Localleader>`
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:if !hasmapto('<Plug>(Prettier)') && maparg('<Leader>p', 'n') ==# ''
vim/packs-cp/opt/vim-prettier/plugin/prettier.vim:  nmap <unique> <Leader>p <Plug>(Prettier)
vim/packs-cp/opt/vim-prettier/doc/prettier.txt:  <Leader>p
vim/packs-cp/opt/csv.vim/doc/ft-csv.txt:changed the |<Leader>| or |<LocalLeader>| variables, those the <Localleader>
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
vim/packs-cp/opt/vim-subversive/README.md:After adding this map, if you execute `<leader>s<motion1><motion2>` then enter some text into a prompt in the status bar, then the text given by `motion1` should be replaced by the text we entered in the prompt for each line provided by `motion2`.  Alternatively, we can also select `motion1` in visual mode and then hit `<leader>s<motion2>` for the same effect.
vim/packs-cp/opt/vim-subversive/README.md:This can be very powerful. For example, you could execute `<leader>siwip` to replace all instances of the current word under the cursor that exist within the paragraph under the cursor.  Or `<leader>sl_` to replace all instances of the character under the cursor on the current line.
vim/packs-cp/opt/vim-subversive/README.md:The `<leader>ss` mapping is used as a shortcut to replace the current word under the cursor.  This allows you for example to execute `<leader>ssip` to replace the word under cursor in the current paragraph.  Note that this matches **complete** words so is different from `<leader>siwip` (which will not require that there be word boundaries on each match)
vim/packs-cp/opt/vim-subversive/README.md:In this gif, we first rename the local `foo` parameter by executing `<leader>ssom` then entering `bar` in the prompt (note that `om` is a custom motion that stands for 'outer c# method' and is not provided by this plugin).  Also note that because we are using `<leader>ss`, the text `_foos` is unaffected because it does not match the complete word.  It is useful in this case because we only want to rename the parameter within the function.
vim/packs-cp/opt/vim-subversive/README.md:After that we switch to visual mode and select the `foo` part `_foos` then execute `<leader>sie` and once again enter `bar` into the prompt.  `ie` is again a custom motion that stands for `entire buffer` (see next section for details)
vim/packs-cp/opt/vim-subversive/README.md:After that we move to the `Foo` part of `AddFoo` and execute `<leader>seie` and once again enter `Bar`.  Then finally do the same for the fully capitalized `FOOS`.
vim/packs-cp/opt/vim-subversive/README.md:Note also that this motion is repeatable.  If you run `<leader>siwip` in one paragraph, then go to a different paragraph, then hit `.` then the same substitution will apply to the new paragraph under the cursor.
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>cs <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader>cs <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader>css <plug>(SubversiveSubstituteWordRangeConfirm)
vim/packs-cp/opt/vim-subversive/README.md:These work the same as the `<leader>s` maps above except will step through each replacement one by one.
vim/packs-cp/opt/vim-subversive/README.md:    If you provide an explicit register to any of the substitute motions above it will not prompt and instead will use the contents of the given register.  For example, `"a<leader>siwip` will immediately replace all instances of the current word under the cursor with the contents of register `a` that exist within the current paragraph.
vim/packs-cp/opt/vim-subversive/README.md:    nmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:    xmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:    nmap <leader>ss <plug>(SubversiveSubstituteWordRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:    You can do this by passing the black hole register to one of the substitute over range commands. For example: `"_<leader>siwip` or `"_<leader>csiwip` if you want to confirm each delete.
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>ss <plug>(SubversiveSubvertWordRange)
vim/packs-cp/opt/vim-subversive/README.md:This will behave the same as `<leader>s` except that it will perform an abolish 'subvert' instead of using vim's built in substitute command.  This will apply the substitution and also preserve whatever case the original word has.  For example:
vim/packs-cp/opt/vim-subversive/README.md:In this case, we move the cursor overtop `foo` and then execute `<leader><leader>seie` then enter `bar`, which replaces all instances of `foo` regardless of case.
vim/packs-cp/opt/vim-subversive/README.md:As you would expect, the `<leader><leader>ss` mapping works similarly except only matches complete words that include word boundaries.
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:xmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/README.md:nmap <leader><leader>ss <plug>(SubversiveSubvertWordRangeNoPrompt)
vim/packs-cp/opt/listtoggle/README.md:    let g:lt_location_list_toggle_map = '<leader>l'
vim/packs-cp/opt/listtoggle/README.md:    let g:lt_quickfix_list_toggle_map = '<leader>q'
vim/packs-cp/opt/listtoggle/README.md:By default, they are set to `<leader>l` and `<leader>q`, respectively.
vim/packs-cp/opt/listtoggle/plugin/listtoggle.vim:      \ get( g:, 'lt_location_list_toggle_map', '<leader>l' )
vim/packs-cp/opt/listtoggle/plugin/listtoggle.vim:      \ get( g:, 'lt_quickfix_list_toggle_map', '<leader>q' )
vim/packs-cp/opt/listtoggle/plugin/listtoggle.vim:if g:lt_location_list_toggle_map != '<leader>l' ||
vim/packs-cp/opt/listtoggle/plugin/listtoggle.vim:      \ g:lt_quickfix_list_toggle_map != '<leader>q'
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader>s <plug>(SubversiveSubstituteRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>ss <plug>(SubversiveSubstituteWordRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:After adding this map, if you execute '<leader>s<motion1><motion2>' then enter some text into a prompt in the status bar, then the text given by 'motion1' should be replaced by the text we entered in the prompt for each line provided by 'motion2'.  Alternatively, we can also select 'motion1' in visual mode and then hit '<leader>s<motion2>' for the same effect.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:This can be very powerful. For example, you could execute '<leader>siwip' to replace all instances of the current word under the cursor that exist within the paragraph under the cursor.  Or '<leader>sl_' to replace all instances of the character under the cursor on the current line.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:The '<leader>ss' mapping is used as a shortcut to replace the current word under the cursor.  This allows you for example to execute '<leader>ssip' to replace the word under cursor in the current paragraph.  Note that this matches complete words so is different from '<leader>siwip' (which will not require that there be word boundaries on each match)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:In this gif, we first rename the local 'foo' parameter by executing '<leader>ssom' then entering 'bar' in the prompt (note that 'om' is a custom motion that stands for 'outer c# method' and is not provided by this plugin).  Also note that because we are using '<leader>ss', the text '_foos' is unaffected because it does not match the complete word.  It is useful in this case because we only want to rename the parameter within the function.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:After that we switch to visual mode and select the 'foo' part '_foos' then execute '<leader>sie' and once again enter 'bar' into the prompt.  `ie` is again a custom motion that stands for `entire buffer` (see next section for details)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:After that we move to the 'Foo' part of 'AddFoo' and execute '<leader>seie' and once again enter 'Bar'.  Then finally do the same for the fully capitalized 'FOOS'.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:If you provide an explicit register to any of the substitute motions above it will not prompt and instead will use the contents of the given register.  For example, '"a<leader>siwip' will immediately replace all instances of the current word under the cursor with the contents of register 'a' that exist within the current paragraph.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader>s <plug>(SubversiveSubstituteRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>ss <plug>(SubversiveSubstituteWordRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>cr <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader>cr <plug>(SubversiveSubstituteRangeConfirm)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader>crr <plug>(SubversiveSubstituteWordRangeConfirm)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:These work the same as the '<leader>r' maps above except will step through each replacement one by one.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader><leader>s <plug>(SubversiveSubvertRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>ss <plug>(SubversiveSubvertWordRange)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:This will behave the same as '<leader>s' except that it will perform an abolish 'subvert' instead of using vim's built in substitute command.  This will apply the substitution and also preserve whatever case the original word has.  For example:
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:In this example, we move the cursor overtop 'foo' and then execute '<leader><leader>seie' then enter 'bar', which replaces all instances of 'foo' regardless of case.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:As you would expect, the '<leader><leader>ss' mapping works similarly except only matches complete words that include word boundaries.
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    xmap <leader><leader>s <plug>(SubversiveSubvertRangeNoPrompt)
vim/packs-cp/opt/vim-subversive/doc/subversive.txt:    nmap <leader><leader>ss <plug>(SubversiveSubvertWordRangeNoPrompt)
vim/packs-cp/opt/vim-gitgutter/README.mkd:You can jump between hunks with `[c` and `]c`.  You can preview, stage, and undo hunks with `<leader>hp`, `<leader>hs`, and `<leader>hu` respectively.
vim/packs-cp/opt/vim-gitgutter/README.mkd:* stage the hunk with `<Leader>hs` or
vim/packs-cp/opt/vim-gitgutter/README.mkd:* undo it with `<Leader>hu`.
vim/packs-cp/opt/vim-gitgutter/README.mkd:* either visually selecting the part you want and staging with your mapping, e.g. `<Leader>hs`;
vim/packs-cp/opt/vim-gitgutter/README.mkd:* preview the hunk, e.g. `<Leader>hp`;
vim/packs-cp/opt/vim-gitgutter/README.mkd:* stage the remaining lines: either write (`:w`) the window or stage via `<Leader>hs` or `:GitGutterStageHunk`.
vim/packs-cp/opt/vim-gitgutter/README.mkd:And you can preview a hunk's changes with `<Leader>hp`.  The location of the preview window is configured with `g:gitgutter_preview_win_location` (default `'bo'`).  You can of course change this mapping, e.g:
vim/packs-cp/opt/vim-gitgutter/README.mkd:nmap <silent> <Leader>x :set opfunc=CleanUp<CR>g@
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'v') && maparg('<Leader>hs', 'x') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    xmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterStageHunk)', 'n') && maparg('<Leader>hs', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hs <Plug>(GitGutterStageHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterUndoHunk)') && maparg('<Leader>hu', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hu <Plug>(GitGutterUndoHunk)
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:  if !hasmapto('<Plug>(GitGutterPreviewHunk)') && maparg('<Leader>hp', 'n') ==# ''
vim/packs-cp/opt/vim-gitgutter/autoload/gitgutter.vim:    nmap <buffer> <Leader>hp <Plug>(GitGutterPreviewHunk)
vim/packs-cp/opt/vim-gitgutter/doc/tags:gitgutter-<Leader>hp	gitgutter.txt	/*gitgutter-<Leader>hp*
vim/packs-cp/opt/vim-gitgutter/doc/tags:gitgutter-<Leader>hs	gitgutter.txt	/*gitgutter-<Leader>hs*
vim/packs-cp/opt/vim-gitgutter/doc/tags:gitgutter-<Leader>hu	gitgutter.txt	/*gitgutter-<Leader>hu*
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:                                                         *gitgutter-<Leader>hp*
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:<Leader>hp              Preview the hunk under the cursor.
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:                                                         *gitgutter-<Leader>hs*
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:<Leader>hs              Stage the hunk under the cursor.
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:                                                         *gitgutter-<Leader>hu*
vim/packs-cp/opt/vim-gitgutter/doc/gitgutter.txt:<Leader>hu              Undo the hunk under the cursor.
vim/packs-cp/opt/thesaurus_query.vim/README.md:`<Leader>cs`.
vim/packs-cp/opt/thesaurus_query.vim/README.md:nnoremap <Leader>cs :ThesaurusQueryReplaceCurrentWord<CR>
vim/packs-cp/opt/thesaurus_query.vim/README.md:`<Leader>cs`
vim/packs-cp/opt/thesaurus_query.vim/README.md:vnoremap <Leader>cs y:ThesaurusQueryReplace <C-r>"<CR>
vim/packs-cp/opt/vim-go/CHANGELOG.md:* Lowercase `<Leader>` in mappings examples for consistent documentation across the README [[GH-1192]](https://github.com/fatih/vim-go/pull/1192)
vim/packs-cp/opt/vim-mark/README.md:    <Leader>m               Mark the word under the cursor, similar to the star
vim/packs-cp/opt/vim-mark/README.md:                            <Leader>n.
vim/packs-cp/opt/vim-mark/README.md:    {Visual}<Leader>m       Mark or unmark the visual selection.
vim/packs-cp/opt/vim-mark/README.md:    {N}<Leader>m            With {N}, mark the word under the cursor with the
vim/packs-cp/opt/vim-mark/README.md:                            which color, just use 99<Leader>n and pick the color
vim/packs-cp/opt/vim-mark/README.md:    {Visual}[N]<Leader>m    Ditto, based on the visual selection.
vim/packs-cp/opt/vim-mark/README.md:    [N]<Leader>r            Manually input a regular expression to mark.
vim/packs-cp/opt/vim-mark/README.md:    {Visual}[N]<Leader>r    Ditto, based on the visual selection.
vim/packs-cp/opt/vim-mark/README.md:    <Leader>n               Clear the mark under the cursor.
vim/packs-cp/opt/vim-mark/README.md:                            so the use of <Leader>n on such a mark will
vim/packs-cp/opt/vim-mark/README.md:                            {Visual}<Leader>r or :Mark {pattern} to clear
vim/packs-cp/opt/vim-mark/README.md:    {N}<Leader>n            Clear the marks represented by highlight group {N}.
vim/packs-cp/opt/vim-mark/README.md:    [count]<Leader>* [count]<Leader>#
vim/packs-cp/opt/vim-mark/README.md:    [count]<Leader>/ [count]<Leader>?
vim/packs-cp/opt/vim-mark/README.md:      <Leader>* Jump to the next occurrence of      Jump to the next occurrence of
vim/packs-cp/opt/vim-mark/README.md:      <Leader>/ Jump to the next occurrence of      Same as left.
vim/packs-cp/opt/vim-mark/README.md:       *        If <Leader>* is the most recently   Do Vim's original * command.
vim/packs-cp/opt/vim-mark/README.md:                used, do a <Leader>*; otherwise
vim/packs-cp/opt/vim-mark/README.md:                (<Leader>/ is the most recently
vim/packs-cp/opt/vim-mark/README.md:                used), do a <Leader>/.
vim/packs-cp/opt/vim-mark/README.md:                            <Leader>m command (with [N]) is shown with a ">".
vim/packs-cp/opt/vim-mark/README.md:                            The last mark used for a search (via <Leader>*) is
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>M <Plug>MarkToggle
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>N <Plug>MarkAllClear
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>N <Plug>MarkConfirmAllClear
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>1  <Plug>MarkSearchGroup1Next
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>!  <Plug>MarkSearchGroup1Prev
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>+* <Plug>MarkSearchUsedGroupNext
vim/packs-cp/opt/vim-mark/README.md:    nmap <Leader>-* <Plug>MarkSearchUsedGroupPrev
vim/packs-cp/opt/vim-mark/README.md:    xmap <Leader>* <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/README.md:    xmap <Leader>m <Plug>MarkIWhiteSet
vim/packs-cp/opt/thesaurus_query.vim/plugin/thesaurus_query.vim:    nnoremap <unique><silent> <Leader>cs :ThesaurusQueryReplaceCurrentWord<CR>
vim/packs-cp/opt/thesaurus_query.vim/plugin/thesaurus_query.vim:    vnoremap <unique><silent> <Leader>cs "ky:ThesaurusQueryReplace <C-r>k<CR>
vim/packs-cp/opt/thesaurus_query.vim/doc/thesaurus_query.txt:    nnoremap <unique> <Leader>cs :ThesaurusQueryReplaceCurrentWord<CR>
vim/packs-cp/opt/thesaurus_query.vim/doc/thesaurus_query.txt:    vnoremap <unique> <Leader>cs "ky:ThesaurusQueryReplace <C-r>k<CR>
vim/packs-cp/opt/thesaurus_query.vim/doc/thesaurus_query.txt:If user decided that `<Leader>cs` is better used for other purposes, you may
vim/packs-cp/opt/vim-mark/autoload/mark.vim:" set from <Leader>m or :Mark {pattern}) with a:isLiteral = 1), or 0 if not
vim/packs-cp/opt/vim-mark/autoload/mark.vim:" alternatives (set from {N}<Leader>m or :{N}Mark).
vim/packs-cp/opt/thesaurus_query.vim/CHANGELOG.org:    - =<Leader>cs= for thesaurus_query functionality.
vim/packs-cp/opt/nerdtree/README.markdown:nnoremap <leader>n :NERDTreeFocus<CR>
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>m <Plug>MarkSet
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	xmap <unique> <Leader>m <Plug>MarkSet
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>r <Plug>MarkRegex
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	xmap <unique> <Leader>r <Plug>MarkRegex
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>n <Plug>MarkClear
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>* <Plug>MarkSearchCurrentNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader># <Plug>MarkSearchCurrentPrev
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>/ <Plug>MarkSearchAnyNext
vim/packs-cp/opt/vim-mark/plugin/mark.vim:	nmap <unique> <Leader>? <Plug>MarkSearchAnyPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:						     *<Leader>m* *v_<Leader>m*
vim/packs-cp/opt/vim-mark/doc/mark.txt:<Leader>m		Mark the word under the cursor, similar to the |star|
vim/packs-cp/opt/vim-mark/doc/mark.txt:			|<Leader>n|.
vim/packs-cp/opt/vim-mark/doc/mark.txt:{Visual}<Leader>m	Mark or unmark the visual selection.
vim/packs-cp/opt/vim-mark/doc/mark.txt:{N}<Leader>m		With {N}, mark the word under the cursor with the
vim/packs-cp/opt/vim-mark/doc/mark.txt:			which color, just use 99<Leader>n and pick the color
vim/packs-cp/opt/vim-mark/doc/mark.txt:{Visual}[N]<Leader>m	Ditto, based on the visual selection.
vim/packs-cp/opt/vim-mark/doc/mark.txt:						     *<Leader>r* *v_<Leader>r*
vim/packs-cp/opt/vim-mark/doc/mark.txt:[N]<Leader>r		Manually input a regular expression to mark.
vim/packs-cp/opt/vim-mark/doc/mark.txt:{Visual}[N]<Leader>r	Ditto, based on the visual selection.
vim/packs-cp/opt/vim-mark/doc/mark.txt:								   *<Leader>n*
vim/packs-cp/opt/vim-mark/doc/mark.txt:<Leader>n		Clear the mark under the cursor.
vim/packs-cp/opt/vim-mark/doc/mark.txt:			so the use of <Leader>n on such a mark will
vim/packs-cp/opt/vim-mark/doc/mark.txt:			{Visual}<Leader>r or :Mark {pattern} to clear
vim/packs-cp/opt/vim-mark/doc/mark.txt:{N}<Leader>n		Clear the marks represented by highlight group {N}.
vim/packs-cp/opt/vim-mark/doc/mark.txt:			    *<Leader>star* *<Leader>#* *<Leader>/* *<Leader>?*
vim/packs-cp/opt/vim-mark/doc/mark.txt:[count]<Leader>* [count]<Leader>#
vim/packs-cp/opt/vim-mark/doc/mark.txt:[count]<Leader>/ [count]<Leader>?
vim/packs-cp/opt/vim-mark/doc/mark.txt:  <Leader>* Jump to the next occurrence of      Jump to the next occurrence of
vim/packs-cp/opt/vim-mark/doc/mark.txt:  <Leader>/ Jump to the next occurrence of      Same as left.
vim/packs-cp/opt/vim-mark/doc/mark.txt:   *        If <Leader>* is the most recently   Do Vim's original * command.
vim/packs-cp/opt/vim-mark/doc/mark.txt:            used, do a <Leader>*; otherwise
vim/packs-cp/opt/vim-mark/doc/mark.txt:            (<Leader>/ is the most recently
vim/packs-cp/opt/vim-mark/doc/mark.txt:            used), do a <Leader>/.
vim/packs-cp/opt/vim-mark/doc/mark.txt:			|<Leader>m| command (with [N]) is shown with a ">".
vim/packs-cp/opt/vim-mark/doc/mark.txt:			The last mark used for a search (via <Leader>*) is
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>M <Plug>MarkToggle
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>N <Plug>MarkAllClear
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>N <Plug>MarkConfirmAllClear
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>1  <Plug>MarkSearchGroup1Next
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>!  <Plug>MarkSearchGroup1Prev
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>+* <Plug>MarkSearchUsedGroupNext
vim/packs-cp/opt/vim-mark/doc/mark.txt:    nmap <Leader>-* <Plug>MarkSearchUsedGroupPrev
vim/packs-cp/opt/vim-mark/doc/mark.txt:|v_<Leader>m|, but have whitespace in the selection match any whitespace when
vim/packs-cp/opt/vim-mark/doc/mark.txt:mapping target: Using this, you can assign a new visual mode mapping <Leader>* >
vim/packs-cp/opt/vim-mark/doc/mark.txt:    xmap <Leader>* <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/doc/mark.txt:or override the default |v_<Leader>m| mapping, in case you always want this
vim/packs-cp/opt/vim-mark/doc/mark.txt:    xmap <Leader>m <Plug>MarkIWhiteSet
vim/packs-cp/opt/vim-mark/doc/mark.txt:- ENH: Handle magicness atoms (\V, \m) in regexps entered via <Leader>r or
vim/packs-cp/opt/vim-mark/doc/mark.txt:- BUG: Regression: <Leader>n without {N} and not on an existing mark prints
vim/packs-cp/opt/vim-mark/doc/mark.txt:- Also allow a [count] for <Leader>r to select (or query for) a mark group, as
vim/packs-cp/opt/vim-mark/doc/mark.txt:  with <Leader>m.
vim/packs-cp/opt/vim-mark/doc/mark.txt:  via <Leader>r and :Mark so that it is easier to determine whether the
vim/packs-cp/opt/vim-mark/doc/mark.txt:- Don't define the default <Leader>m and <Leader>r mappings in select mode,
vim/packs-cp/opt/vim-mark/doc/mark.txt:  This allows to interactively choose a color via 99<Leader>m.
vim/packs-cp/opt/vim-mark/doc/mark.txt:- FIX: When the cursor is positioned on the current mark, [N]<Leader>n /
vim/packs-cp/opt/vim-mark/doc/mark.txt:- ENH: Allow [count] for <Leader>m and :Mark to add / subtract match to / from
vim/packs-cp/opt/vim-mark/doc/mark.txt:  highlight group [count], and use [count]<Leader>n to clear only highlight
vim/packs-cp/opt/vim-mark/doc/mark.txt:- FIX: :Mark and <Leader>n actually toggled marks back on when they were
vim/packs-cp/opt/vim-mark/doc/mark.txt:  mark that matches the entire line (e.g. created by V<Leader>m) can be
vim/packs-cp/opt/vim-mark/doc/mark.txt:  cleared via <Leader>n. Thanks to ping for reporting this.
vim/packs-cp/opt/vim-mark/doc/mark.txt:  {Visual}<Leader>m and {Visual}<Leader>r clobbered the unnamed register. Now
vim/packs-cp/opt/vim-mark/doc/mark.txt:- ENH: The MarkSearch mappings (<Leader>[*#/?]) add the original cursor
vim/packs-cp/opt/vim-mark/doc/mark.txt:- BUG: Creation of literal pattern via '\V' in {Visual}<Leader>m mapping
vim/packs-cp/opt/vim-mark/doc/mark.txt:  collided with individual escaping done in <Leader>m mapping so that an
vim/packs-cp/opt/vim-mark/doc/tags:<Leader>#	mark.txt	/*<Leader>#*
vim/packs-cp/opt/vim-mark/doc/tags:<Leader>/	mark.txt	/*<Leader>\/*
vim/packs-cp/opt/vim-mark/doc/tags:<Leader>?	mark.txt	/*<Leader>?*
vim/packs-cp/opt/vim-mark/doc/tags:<Leader>m	mark.txt	/*<Leader>m*
vim/packs-cp/opt/vim-mark/doc/tags:<Leader>n	mark.txt	/*<Leader>n*
vim/packs-cp/opt/vim-mark/doc/tags:<Leader>r	mark.txt	/*<Leader>r*
vim/packs-cp/opt/vim-mark/doc/tags:<Leader>star	mark.txt	/*<Leader>star*
vim/packs-cp/opt/vim-mark/doc/tags:v_<Leader>m	mark.txt	/*v_<Leader>m*
vim/packs-cp/opt/vim-mark/doc/tags:v_<Leader>r	mark.txt	/*v_<Leader>r*
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim:  map <unique> <Leader>swp <Plug>SaveWinPosn
vim/packs-unix/opt/vim-plugin-AnsiEsc/plugin/cecutil.vim:  map <unique> <Leader>rwp <Plug>RestoreWinPosn
vim/packs-cp/opt/vim-go/doc/vim-go.txt:  au FileType go nmap <leader>r <Plug>(go-run)
vim/packs-cp/opt/vim-go/doc/vim-go.txt: au FileType go nmap <leader>rt <Plug>(go-run-tab)
vim/packs-cp/opt/vim-go/doc/vim-go.txt: au FileType go nmap <leader>rs <Plug>(go-run-split)
vim/packs-cp/opt/vim-go/doc/vim-go.txt: au FileType go nmap <leader>rv <Plug>(go-run-vertical)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pe <Plug>(PickerEdit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ps <Plug>(PickerSplit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pt <Plug>(PickerTabedit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pd <Plug>(PickerTabdrop)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pv <Plug>(PickerVsplit)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pb <Plug>(PickerBuffer)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>p] <Plug>(PickerTag)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>pw <Plug>(PickerStag)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>po <Plug>(PickerBufferTag)
vim/packs-unix/opt/vim-picker/README.md:nmap <unique> <leader>ph <Plug>(PickerHelp)
vim/packs-cp/opt/tagalong.vim/autoload/tagalong.vim:      " e.g. {'c': '<leader>c'}
vim/packs-cp/opt/vim-airline/doc/airline.txt:  <leader>0 will jump to tenth buffer. Those mappings are not automatically
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>1 <Plug>AirlineSelectTab1
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>2 <Plug>AirlineSelectTab2
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>3 <Plug>AirlineSelectTab3
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>4 <Plug>AirlineSelectTab4
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>5 <Plug>AirlineSelectTab5
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>6 <Plug>AirlineSelectTab6
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>7 <Plug>AirlineSelectTab7
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>8 <Plug>AirlineSelectTab8
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>9 <Plug>AirlineSelectTab9
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>0 <Plug>AirlineSelectTab0
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>- <Plug>AirlineSelectPrevTab
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>+ <Plug>AirlineSelectNextTab
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>10 <Plug>AirlineSelectTab10
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>11 <Plug>AirlineSelectTab11
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>12 <Plug>AirlineSelectTab12
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>13 <Plug>AirlineSelectTab13
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>01 <Plug>AirlineSelectTab01
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>02 <Plug>AirlineSelectTab02
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>03 <Plug>AirlineSelectTab03
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <Leader>99 <Plug>AirlineSelectTab99
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader><F5>  <Plug>XTablineToggleFiltering
vim/packs-cp/opt/vim-airline/doc/airline.txt:  nmap <leader>tr    <Plug>XTablineReopen <SID>ReopenLastTab
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdc       <Plug>XTablineCdCurrent
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdd       <Plug>XTablineCdDown1
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd2       <Plug>XTablineCdDown2
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cd3       <Plug>XTablineCdDown3
vim/packs-cp/opt/vim-airline/doc/airline.txt:  map <leader>cdh       <Plug>XTablineCdHome
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        nmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/Colorizer.vmb:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
vim/packs-unix/opt/Colorizer/Colorizer.vmb:        xmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
vim/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
vim/packs-unix/opt/Colorizer/Colorizer.vmb:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
vim/packs-unix/opt/Colorizer/Colorizer.vmb:It uses the prefix <leader>c to set all functionality up. By default, <Leader>
vim/packs-unix/opt/Colorizer/Colorizer.vmb:is defined as '\' (|<Leader>|). Use the name provided in the second column to
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader><F5>','<Plug>XTablineToggleFiltering')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        call s:mapkeys('<leader>tr','<Plug>XTablineReopen')
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdc <Plug>XTablineCdCurrent
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdd <Plug>XTablineCdDown1
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd2 <Plug>XTablineCdDown2
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cd3 <Plug>XTablineCdDown3
vim/packs-cp/opt/vim-airline/autoload/airline/extensions/tabline/xtabline.vim:        map <unique> <leader>cdh <Plug>XTablineCdHome
vim/packs-unix/opt/vim-better-whitespace/README.md:    *  There is an operator (defaulting to `<leader>s`) to clean whitespace.
vim/packs-unix/opt/vim-better-whitespace/README.md:        For example, in normal mode, `<leader>sip` will remove trailing whitespace from the
vim/packs-unix/opt/vim-better-whitespace/plugin/better-whitespace.vim:call s:InitVariable('better_whitespace_operator', '<leader>s')
vim/packs-unix/opt/vim-better-whitespace/doc/better-whitespace.txt:By default, an operator is provided mapped to: <leader>s.
vim/plugin/pluginsVim.vim:nnoremap <leader>B :BLines<CR>
vim/plugin/pluginsVim.vim:nnoremap <leader>L :Lines<CR>
vim/plugin/pluginsVim.vim:nnoremap <leader>j :Files $DJH<CR>
vim/plugin/pluginsVim.vim:nnoremap <leader>bb :CtrlPBuffer<CR>
vim/plugin/pluginsVim.vim:nnoremap <leader>m :MRU
vim/plugin/pluginsVim.vim:  nmap <unique> <leader>pe <Plug>(PickerEdit)
vim/plugin/pluginsVim.vim:  nmap <unique> <leader>pb <Plug>(PickerBuffer)
vim/plugin/pluginsVim.vim:noremap <silent> <leader>be :BufExplorer<CR>
vim/plugin/pluginsVim.vim:"  <Leader>be - Opens BufExplorer
vim/plugin/pluginsVim.vim:"  <Leader>bt - Toggles BufExplorer open or closed
vim/plugin/pluginsVim.vim:"  <Leader>bs - Opens horizontally split window BufExplorer
vim/plugin/pluginsVim.vim:"  <Leader>bv - Opens vertically split window BufExplorer
vim/plugin/plugins.vim:" <leader>c<space> -> NERDCommenterToggle
vim/plugin/plugins.vim:" add this for relevant filetypes:  nnoremap <silent> <buffer> <leader>ct :TagbarToggle<CR>
vim/plugin/plugins.vim:nnoremap <leader>pp :<c-u>MatchupWhereAmI??<cr>
vim/plugin/plugins.vim:noremap <silent> <leader>aj <Plug>(ale_next_wrap)
vim/plugin/plugins.vim:noremap <silent> <leader>ak <Plug>(ale_previous_wrap)
vim/plugin/plugins.vim:" noremap <leader>aa :ALEToggleBuffer<CR>  " doesn't report status
vim/plugin/plugins.vim:noremap <leader>aa :call ALEToggleBufferShow()<cr>
vim/plugin/plugins.vim:nnoremap <leader>tq :ThesaurusQueryReplaceCurrentWord<CR>
vim/plugin/plugins.vim:nnoremap <leader>lt :LangTool <bar> lopen 15 <CR>
vim/plugin/plugins.vim:nnoremap <leader>LT :call LanguageTool_lopen() <CR>
vim/plugin/plugins.vim:nnoremap <silent><leader>it :call IlluminateMoreToggle()<cr>
vim/plugin/plugins.vim:" <Leader><Leader>+ -> bigger font
vim/plugin/plugins.vim:" <Leader><Leader>- -> smaller font
vim/plugin/plugins.vim:" <Leader><Leader>0 -> default font size
vim/plugin/plugins.vim:noremap <leader>yy :CalendarH<CR>
vim/plugin/plugins.vim:" <Leader>f{char} to move to {char}
vim/plugin/plugins.vim:map  <Leader><Leader>f <Plug>(easymotion-bd-f)
vim/plugin/plugins.vim:nmap <Leader><Leader>f <Plug>(easymotion-overwin-f)
vim/plugin/plugins.vim:map  <Leader><Leader>w <Plug>(easymotion-bd-w)
vim/plugin/plugins.vim:nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)
vim/plugin/plugins.vim:nnoremap <leader>e :call EasyMotionSearchToggle()<cr>
vim/plugin/plugins.vim:nmap <leader><leader>m <Plug>MarkSet
vim/plugin/plugins.vim:nmap <leader><leader>n <Plug>MarkClear
vim/plugin/plugins.vim:nmap <leader>s <plug>(SubversiveSubstituteRangeConfirm)
vim/plugin/plugins.vim:nnoremap <leader>bdd :Bdelete other<CR>
vim/plugin/plugins.vim:nnoremap <leader>bd  :Bdelete hidden<CR>
vim/plugin/plugins.vim:noremap <silent> <leader><leader>d :BD<CR>:bp<CR>
vim/plugin/plugins.vim:let g:lt_location_list_toggle_map = '<leader>ll'
vim/plugin/plugins.vim:" let g:lt_location_list_toggle_map = '<leader>l'
vim/plugin/plugins.vim:" let g:lt_quickfix_list_toggle_map = '<leader>q'
vim/plugin/plugin.vim:  nnoremap <leader><leader>( :s/\m\[.\{-}]//g<CR>
vim/plugin/plugin.vim:  nnoremap <leader>[ :s/\m\[.\{-}]//g<CR>
vim/plugin/plugin.vim:nnoremap <leader>U :Underline
vim/plugin/plugin.vim:  nnoremap <leader>é :call ClearFancyGlyphs()<cr>
vim/plugin/plugin.vim:  nnoremap <leader>2 :call ClearFancyGlyphs()<cr>
vim/plugin/plugin.vim:nnoremap <leader><leader>2 :call ClearMAS()<cr>
vim/plugin/plugin.vim:  inoremap <leader>_ <Esc>:call DateFr()<cr>
vim/plugin/plugin.vim:  nnoremap <leader>_ :call DateFr()<cr>
vim/plugin/plugin.vim:  vnoremap <leader>_ <Esc>:call DateFr()<cr>
vim/plugin/plugin.vim:    noremap <leader>yp :lan fr_FR.UTF-8<CR>:call DateFr()<CR>:lan en_GB.UTF-8<CR>
vim/plugin/plugin.vim:    noremap <leader>yp :lan en_GB.UTF-8<CR>:exe ":norm a".strftime('%a %d %b %Y')<CR>:lan fr_FR.UTF-8<CR>
vim/plugin/plugin.vim:    noremap <leader>yp :lan tim English_United Kingdom<CR>:exe ":norm a".strftime('%a %d %b %Y')<CR>:lan tim French<CR>
vim/plugin/plugin.vim:    noremap <leader>yp :lan tim French<CR>:call DateFr()<CR>:lan tim English_United Kingdom<CR>
vim/plugin/plugin.vim:nnoremap <leader>9 :call PercentUnicode()<cr>
vim/plugin/plugin.vim:  nnoremap <leader>( :call UnicodePercent()<cr>
vim/plugin/plugin.vim:  nnoremap <leader>5 :call UnicodePercent()<cr>
vim/plugin/plugin.vim:inoremap <leader><f5> :call clearmatches()<cr>
vim/plugin/plugin.vim:nnoremap <leader><f5> :call clearmatches()<cr>
vim/plugin/plugin.vim:noremap <leader><leader>ll :set list! list? <CR>
vim/plugin/plugin.vim:nnoremap <leader>zz :let &scrolloff=999-&scrolloff<CR>
vim/plugin/plugin.vim:nnoremap <silent><leader><leader>c :set cuc! cuc? <CR>
vim/plugin/plugin.vim:nnoremap <silent><leader><leader>l :set cul! cul? <CR>
vim/plugin/plugin.vim:nnoremap <silent><leader>rn :set rnu! rnu? <CR>
vim/plugin/plugin.vim:nnoremap <leader>x <C-W>c
vim/plugin/plugin.vim:nnoremap <leader><leader>h :split<CR>
vim/plugin/plugin.vim:nnoremap <leader><leader>v :vsplit<CR>
vim/plugin/plugin.vim:nnoremap <leader><leader>o :close<CR>
vim/plugin/plugin.vim:nnoremap <leader><down> 5<C-W>-
vim/plugin/plugin.vim:nnoremap <leader><up> 5<C-W>+
vim/plugin/plugin.vim:nnoremap <leader><left> 10<C-W><
vim/plugin/plugin.vim:nnoremap <leader><right> 10<C-W>>
vim/plugin/plugin.vim:nnoremap <leader>c= :windo set nowfh <CR>
vim/plugin/plugin.vim:nnoremap <leader>n :nohlsearch<CR>
vim/plugin/plugin.vim:vnoremap <leader>n <Esc>:nohlsearch<CR>
vim/plugin/plugin.vim:nnoremap <leader>/ :call TweakLS()<CR>
vim/plugin/plugin.vim:nnoremap <leader>is :call IncSearchToggle()<cr>
vim/plugin/plugin.vim:" noremap <leader>q :copen<CR>
vim/plugin/plugin.vim:  nnoremap <leader>v v$hy
vim/plugin/plugin.vim:nnoremap <leader>vg :call VimgrepSelection()<CR>
vim/plugin/plugin.vim:nnoremap <leader><leader>q :call VimgrepQRs()<CR>
vim/plugin/plugin.vim:" and <leader>pt toggles it:
vim/plugin/plugin.vim:nnoremap <leader>pt :call ParenthsToggle()<cr>
vim/plugin/plugin.vim:nnoremap <leader>vs :call ConvertSearchForVisualSelection()<CR>
vim/plugin/plugin.vim:vnoremap <leader>vs <Esc>:call ConvertSearchForVisualSelection()<CR>
vim/plugin/plugin.vim:nnoremap <leader>f :let@f=@%<CR>
vim/plugin/plugin.vim:nnoremap <silent><leader><F11> :echo strftime('%c',getftime(expand('%')))<cr>
vim/plugin/plugin.vim:inoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>
vim/plugin/plugin.vim:vnoremap <silent><leader><F11> <Esc>:echo strftime('%c',getftime(expand('%')))<cr>
vim/plugin/plugin.vim:nnoremap <leader>- :Hexplore<cr>
vim/plugin/plugin.vim:nnoremap <leader>d :cd %:p:h<CR>:pwd<CR>
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'n')) && empty(hasmapto('<Plug>Colorizer', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cC', 'x')) && empty(hasmapto('<Plug>Colorizer', 'x'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cC <Plug>Colorizer
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'n')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cT', 'x')) && empty(hasmapto('<Plug>ColorContrast', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cT <Plug>ColorContrast
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'n')) && empty(hasmapto('<Plug>ColorFgBg', 'n'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        nmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:    if empty(maparg('<Leader>cF', 'x')) && empty(hasmapto('<Plug>ColorFgBg', 'x'))
vim/packs-unix/opt/Colorizer/plugin/ColorizerPlugin.vim:        xmap <silent> <Leader>cF <Plug>ColorFgBg
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cC      <Plug>Colorizer     Toggle highlighting of Colors. In visual
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cT      <Plug>ColorContrast Cycle through contrast setting
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:<Leader>cF      <Plug>ColorFgBg     Toggle foreground and background color
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:It uses the prefix <leader>c to set all functionality up. By default, <Leader>
vim/packs-unix/opt/Colorizer/doc/Colorizer.txt:is defined as '\' (|<Leader>|). Use the name provided in the second column to

$lazy

lazy.nvim/doc/lazy.nvim.txt:          { "<leader>ft", "<cmd>Neotree toggle<cr>", desc = "NeoTree" },
lazy.nvim/README.md:      { "<leader>ft", "<cmd>Neotree toggle<cr>", desc = "NeoTree" },
plenary.nvim/README.md:nmap <leader>t <Plug>PlenaryTestFile
plenary.nvim/doc/plenary-test.txt:  nmap <leader>t <Plug>PlenaryTestFile
Comment.nvim/doc/Comment.txt:                line = '<leader>cc',
Comment.nvim/doc/Comment.txt:                block = '<leader>bc',
Comment.nvim/doc/Comment.txt:                line = '<leader>c',
Comment.nvim/doc/Comment.txt:                block = '<leader>b',
Comment.nvim/doc/Comment.txt:        -- Example: <leader>gc3j will comment 4 lines
Comment.nvim/doc/Comment.txt:            'n', '<leader>gc', api.call('toggle.linewise', 'g@'),
Comment.nvim/doc/Comment.txt:        -- Example: <leader>gb3j will comment 4 lines
Comment.nvim/doc/Comment.txt:            'n', '<leader>gb', api.call('toggle.blockwise', 'g@'),
Comment.nvim/doc/Comment.txt:        vim.keymap.set('x', '<leader>c', function()
Comment.nvim/doc/Comment.txt:        vim.keymap.set('x', '<leader>b', function()
Comment.nvim/doc/Comment.txt:            'n', '<leader>c', api.locked('toggle.linewise.current')
Comment.nvim/doc/Comment.txt:        vim.keymap.set('x', '<leader>c', function()
Comment.nvim/lua/Comment/api.lua:----- Example: <leader>gc3j will comment 4 lines
Comment.nvim/lua/Comment/api.lua:---    'n', '<leader>gc', api.call('toggle.linewise', 'g@'),
Comment.nvim/lua/Comment/api.lua:----- Example: <leader>gb3j will comment 4 lines
Comment.nvim/lua/Comment/api.lua:---    'n', '<leader>gb', api.call('toggle.blockwise', 'g@'),
Comment.nvim/lua/Comment/api.lua:---vim.keymap.set('x', '<leader>c', function()
Comment.nvim/lua/Comment/api.lua:---vim.keymap.set('x', '<leader>b', function()
Comment.nvim/lua/Comment/api.lua:---    'n', '<leader>c', api.locked('toggle.linewise.current')
Comment.nvim/lua/Comment/api.lua:---vim.keymap.set('x', '<leader>c', function()
Comment.nvim/lua/Comment/init.lua:---        line = '<leader>cc',
Comment.nvim/lua/Comment/init.lua:---        block = '<leader>bc',
Comment.nvim/lua/Comment/init.lua:---        line = '<leader>c',
Comment.nvim/lua/Comment/init.lua:---        block = '<leader>b',
telescope.nvim/README.md:nnoremap <leader>ff <cmd>Telescope find_files<cr>
telescope.nvim/README.md:nnoremap <leader>fg <cmd>Telescope live_grep<cr>
telescope.nvim/README.md:nnoremap <leader>fb <cmd>Telescope buffers<cr>
telescope.nvim/README.md:nnoremap <leader>fh <cmd>Telescope help_tags<cr>
telescope.nvim/README.md:nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
telescope.nvim/README.md:nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
telescope.nvim/README.md:nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
telescope.nvim/README.md:nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
telescope.nvim/README.md:vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
telescope.nvim/README.md:vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
telescope.nvim/README.md:vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
telescope.nvim/README.md:vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})
telescope.nvim/README.md::nnoremap <Leader>pp :lua require'telescope.builtin'.planets{}
telescope.nvim/README.md:nnoremap <Leader>f :lua require'telescope.builtin'.find_files(require('telescope.themes').get_dropdown({}))<cr>
telescope.nvim/README.md:nnoremap <Leader>f :lua require'telescope.builtin'.find_files(require('telescope.themes').get_dropdown({ winblend = 10 }))<cr>
telescope-live-grep-args.nvim/README.md:keymap.set("n", "<leader>fg", ":lua require('telescope').extensions.live_grep_args.live_grep_args()<CR>")
telescope-live-grep-args.nvim/README.md:keymap.set("n", "<leader>gc", live_grep_args_shortcuts.grep_word_under_cursor)

